(window.Aura||(Aura={})).frameworkJsReady||(Aura.ApplicationDefs={},$A={fn:function(e){return function(n){var r=Aura.ApplicationDefs,f=r[e];if(f)if(n instanceof Array)f.push.apply(f,n);else for(var i in n)f[i]=n[i];else r[e]=n}}},$A.componentService={addComponents:$A.fn('cmpExporter'),addLibraryExporters:$A.fn('libExporter'),initEventDefs:$A.fn('eventDefs'),initLibraryDefs:$A.fn('libraryDefs'),initControllerDefs:$A.fn('controllerDefs'),initModuleDefs:$A.fn('moduleDefs')});
$A.componentService.addLibraryExporter({'js://ui.panelPositioningLib.positioningUtils':function(){/*$A.componentService.addLibraryInclude("js://ui.panelPositioningLib.positioningUtils",[],function lib() {
  function isShadowRoot(node) {
    return node && node.nodeType === 11
  }
  function getParentNode(elem) {
    var parent = elem.parentNode;
    return isShadowRoot(parent) ? parent.host : parent
  }
  function getPositionTarget(element) {
    return element.tagName === "TEXTAREA" ? getParentNode(element) : element
  }
  function getScrollableParent(elem, stopEl) {
    if(!elem || elem === stopEl || elem === document.body) {
      return null
    }
    try {
      var computedStyle = getComputedStyle(elem) || elem.style
    }catch(e) {
      return null
    }
    if(!computedStyle) {
      return null
    }
    var overflow = computedStyle["overflow-y"];
    if(overflow === "auto" || overflow === "scroll") {
      return elem
    }
    return getScrollableParent(getParentNode(elem))
  }
  function isWindow(elem) {
    return elem.toString() === "[object Window]"
  }
  return{getPositionTarget:getPositionTarget, getScrollableParent:getScrollableParent, isWindow:isWindow, isShadowRoot:isShadowRoot, getParentNode:getParentNode}
}

);
*/},'js://ui.panelPositioningLib.elementProxy':function(){/*$A.componentService.addLibraryInclude("js://ui.panelPositioningLib.elementProxy",["js://ui.panelPositioningLib.positioningUtils"],function lib(utils, w) {
  function isInDom(el) {
    if(el === w) {
      return true
    }
    var parentNode = utils.getParentNode(el);
    if(parentNode && parentNode.tagName && parentNode.tagName.toUpperCase() === "BODY") {
      return true
    }
    if(parentNode) {
      return isInDom(parentNode)
    }
    return false
  }
  function computeAbsPos(target) {
    var val2;
    var val = {top:target.offsetTop, left:target.offsetLeft};
    if(target.offsetParent) {
      val2 = computeAbsPos(target.offsetParent);
      val.top += val2.top;
      val.left += val2.left
    }
    return val
  }
  function ElementProxy(el, id) {
    this.id = id;
    this.width = 0;
    this.height = 0;
    this.left = 0;
    this.top = 0;
    this.right = 0;
    this.bottom = 0;
    this._dirty = false;
    this._node = null;
    this._releaseCb = null;
    if(!el) {
      throw new Error("Element missing");
    }
    if(utils.isWindow(el)) {
      el = w
    }
    this._node = el;
    if("MutationObserver" in w) {
      this._observer = new w.MutationObserver(this.refresh.bind(this));
      if(!utils.isWindow(this._node)) {
        this._observer.observe(this._node, {attributes:true, childList:true, characterData:true, subtree:true})
      }
    }
    this.refresh()
  }
  w = w || window;
  ElementProxy.prototype.setReleaseCallback = function(cb, scope) {
    var scopeObj = scope || this;
    this._releaseCb = cb.bind(scopeObj)
  };
  ElementProxy.prototype.checkNodeIsInDom = function() {
    if(!isInDom(this._node)) {
      return false
    }else {
      return true
    }
  };
  ElementProxy.prototype.refresh = function() {
    if(!this.isDirty()) {
      if(!this.checkNodeIsInDom()) {
        return this.release()
      }
      var box;
      var x;
      var scrollTop;
      var scrollLeft;
      if(typeof w.pageYOffset !== "undefined") {
        scrollTop = w.pageYOffset;
        scrollLeft = w.pageXOffset
      }else {
        scrollTop = w.scrollY;
        scrollLeft = w.scrollX
      }
      if(!utils.isWindow(this._node)) {
        this._node.offsetHeight;
        box = this._node.getBoundingClientRect();
        for(x in box) {
          this[x] = Math.floor(box[x])
        }
        this.top = Math.floor(this.top + scrollTop);
        this.bottom = Math.floor(this.top + box.height);
        this.left = Math.floor(this.left + scrollLeft);
        this.right = Math.floor(this.left + box.width)
      }else {
        box = {};
        this.width = w.document.documentElement.clientWidth;
        this.height = w.document.documentElement.clientHeight;
        this.left = scrollLeft;
        this.top = scrollTop;
        this.right = w.document.documentElement.clientWidth + scrollLeft;
        this.bottom = w.document.documentElement.clientHeight
      }
      this._dirty = false
    }
  };
  ElementProxy.prototype.getNode = function() {
    return this._node
  };
  ElementProxy.prototype.isDirty = function() {
    return this._dirty
  };
  ElementProxy.prototype.bake = function() {
    var absPos = this._node.getBoundingClientRect();
    this._node.style.position = "absolute";
    var style = w.getComputedStyle(this._node);
    var originalLeft;
    var originalTop;
    var scrollTop;
    var scrollLeft;
    if(typeof w.pageYOffset !== "undefined") {
      scrollTop = w.pageYOffset;
      scrollLeft = w.pageXOffset
    }else {
      scrollTop = w.scrollY;
      scrollLeft = w.scrollX
    }
    if(style.left.match(/auto|fixed/)) {
      originalLeft = "0"
    }else {
      originalLeft = style.left
    }
    if(style.top.match(/auto|fixed/)) {
      originalTop = "0"
    }else {
      originalTop = style.top
    }
    originalLeft = parseInt(originalLeft.replace("px", ""), 10);
    originalTop = parseInt(originalTop.replace("px", ""), 10);
    var leftDif = this.left - (absPos.left + scrollLeft);
    var topDif = this.top - (absPos.top + scrollTop);
    this._node.style.left = originalLeft + leftDif + "px";
    this._node.style.top = originalTop + topDif + "px";
    this._dirty = false
  };
  ElementProxy.prototype.set = function(direction, val) {
    this[direction] = val;
    this._dirty = true
  };
  ElementProxy.prototype.release = function() {
    if(this._releaseCb) {
      this._releaseCb(this)
    }
  };
  return{ElementProxy:ElementProxy, isInDom:isInDom}
}

);
*/},'js://ui.panelPositioningLib.elementProxyFactory':function(){/*$A.componentService.addLibraryInclude("js://ui.panelPositioningLib.elementProxyFactory",["js://ui.panelPositioningLib.elementProxy", "js://ui.panelPositioningLib.positioningUtils"],function lib(elementProxy, utils, win) {
  function releaseOrphanProxies() {
    for(var proxy in proxyCache) {
      if(!proxyCache[proxy].el.checkNodeIsInDom()) {
        proxyCache[proxy].el.release()
      }
    }
  }
  function bakeOff() {
    for(var proxy in proxyCache) {
      if(proxyCache[proxy].el.isDirty()) {
        proxyCache[proxy].el.bake()
      }
    }
  }
  function assignNodeKey(node) {
    var key = "aura-pos-lib-" + proxyCounter++;
    node.setAttribute("data-proxy-id", key);
    return key
  }
  function getNodeKey(node) {
    return node && node.getAttribute("data-proxy-id")
  }
  function getReferenceCount(el) {
    var id = getNodeKey(el);
    if(!id || !proxyCache[id]) {
      return 0
    }else {
      return proxyCache[id].refCount
    }
  }
  function release(prx) {
    var proxy = proxyCache[prx.key];
    if(proxy) {
      --proxy.refCount
    }
    if(proxy && proxy.refCount <= 0) {
      delete proxyCache[prx.key]
    }
  }
  function elementProxyFactory(el) {
    var key;
    var newProxy;
    var id;
    if(utils.isWindow(el)) {
      key = "window"
    }else {
      $A.assert(el && el.nodeType && (el.nodeType !== 1 || el.nodeType !== 11), "Element Proxy requires an element");
      key = getNodeKey(el);
      if(!key) {
        key = assignNodeKey(el)
      }
      if(!el.id) {
        var cmp = w.$A.getComponent(el);
        el.id = cmp ? cmp.getGlobalId() : "window"
      }
      id = el.id
    }
    if(proxyCache[key]) {
      proxyCache[key].refCount++;
      return proxyCache[key].el
    }else {
      newProxy = new ElementProxy(el, id);
      newProxy.key = key;
      newProxy.setReleaseCallback(release, newProxy);
      proxyCache[key] = {el:newProxy, refCount:1}
    }
    w.setTimeout(releaseOrphanProxies, 0);
    return proxyCache[key].el
  }
  function reset() {
    proxyCache = {}
  }
  var w = win || window;
  var ElementProxy = elementProxy.ElementProxy;
  var proxyCache = {};
  var proxyCounter = 0;
  return{_proxyCache:proxyCache, getReferenceCount:getReferenceCount, getElement:elementProxyFactory, bakeOff:bakeOff, resetFactory:reset, release:release}
}

);
*/},'js://ui.panelPositioningLib.constraint':function(){/*$A.componentService.addLibraryInclude("js://ui.panelPositioningLib.constraint",["js://ui.panelPositioningLib.elementProxyFactory"],function lib() {
  var transformFunctions = {center:function(inp, targetBox) {
    return Math.floor(inp + 0.5 * targetBox.width)
  }, right:function(inp, targetBox) {
    return inp + targetBox.width
  }, left:function(inp) {
    return inp
  }, bottom:function(inp, targetBox) {
    return inp + targetBox.height
  }};
  var Constraint = function(type, conf) {
    var targetAlign;
    this._el = conf.element;
    this._targetElement = conf.target;
    this._inputDirection = "top";
    this.destroyed = false;
    var pad = conf.pad || 0;
    var boxDirs = conf.boxDirections || {left:true, right:true};
    this._transformX = function(inp) {
      return inp
    };
    this._transformY = function(inp) {
      return inp
    };
    if(conf.targetAlign) {
      targetAlign = conf.targetAlign.split(/\s/);
      this._transformX = transformFunctions[targetAlign[0]];
      this._transformY = transformFunctions[targetAlign[1]] ? transformFunctions[targetAlign[1]] : this._transformY
    }
    var self = this;
    switch(type) {
      case "top":
        this._exp = function(targetBox, elementBox) {
          return{top:self._transformY(targetBox.top, targetBox, elementBox) + pad}
        };
        break;
      case "bottom":
        this._exp = function(targetBox, elementBox) {
          return{top:self._transformY(targetBox.top, targetBox, elementBox) - elementBox.height - pad}
        };
        break;
      case "center":
        this._exp = function(targetBox, elementBox) {
          return{left:Math.floor(self._transformX(targetBox.left, targetBox, elementBox) - 0.5 * elementBox.width)}
        };
        break;
      case "middle":
        this._exp = function(targetBox, elementBox) {
          return{top:Math.floor(0.5 * (2 * targetBox.top + targetBox.height - elementBox.height))}
        };
        break;
      case "left":
        this._exp = function(targetBox, elementBox) {
          return{left:self._transformX(targetBox.left, targetBox, elementBox) + pad}
        };
        break;
      case "right":
        this._exp = function(targetBox, elementBox) {
          return{left:self._transformX(targetBox.left, targetBox, elementBox) - elementBox.width - pad}
        };
        break;
      case "below":
        this._exp = function(targetBox, elementBox) {
          if(elementBox.top < targetBox.top + targetBox.height + pad) {
            return{top:targetBox.top + targetBox.height + pad}
          }
        };
        break;
      case "bounding box":
        this._exp = function(targetBox, elementBox) {
          var retBox = {};
          if(boxDirs.top && elementBox.top < targetBox.top + pad) {
            retBox.top = targetBox.top + pad
          }
          if(boxDirs.left && elementBox.left < targetBox.left + pad) {
            retBox.left = targetBox.left + pad
          }
          if(boxDirs.right && elementBox.left + elementBox.width > targetBox.left + targetBox.width - pad) {
            retBox.left = targetBox.left + targetBox.width - elementBox.width - pad
          }
          if(boxDirs.bottom && elementBox.top + elementBox.height > targetBox.top + targetBox.height - pad) {
            retBox.top = targetBox.top + targetBox.height - elementBox.height - pad
          }
          return retBox
        };
        break;
      case "inverse bounding box":
        this._exp = function(targetBox, elementBox) {
          var retBox = {};
          if(boxDirs.left && targetBox.left - pad < elementBox.left) {
            retBox.left = targetBox.left - pad
          }
          if(boxDirs.right && elementBox.left + elementBox.width < targetBox.left + targetBox.width + pad) {
            retBox.left = targetBox.width + pad - elementBox.width + targetBox.left
          }
          if(boxDirs.top && targetBox.top < elementBox.top + pad) {
            retBox.top = targetBox.top - pad
          }
          if(boxDirs.bottom && elementBox.top + elementBox.height < targetBox.top + targetBox.height + pad) {
            retBox.top = targetBox.height + pad - elementBox.height + targetBox.top
          }
          return retBox
        };
        break;
      default:
        console.error("no constraint expression for", type);
        this._exp = function() {
        }
    }
    if(conf && conf.enable === false) {
      this._disabled = true
    }
  };
  Constraint.prototype.detach = function() {
    this._disabled = true
  };
  Constraint.prototype.attach = function() {
    this._disabled = false
  };
  Constraint.prototype.updateValues = function() {
    if(!this._disabled) {
      this._targetElement.refresh();
      this._pendingBox = this._exp(this._targetElement, this._el)
    }
  };
  Constraint.prototype.reposition = function() {
    var el = this._el;
    if(!this._disabled) {
      for(var val in this._pendingBox) {
        el.set(val, this._pendingBox[val])
      }
    }
  };
  Constraint.prototype.destroy = function() {
    this._el.release();
    this._targetElement.release();
    this._disabled = true;
    this.destroyed = true
  };
  return{Constraint:Constraint}
}

);
*/},'js://ui.panelPositioningLib.panelPositioning':function(){/*$A.componentService.addLibraryInclude("js://ui.panelPositioningLib.panelPositioning",["js://ui.panelPositioningLib.constraint", "js://ui.panelPositioningLib.elementProxyFactory", "js://ui.panelPositioningLib.positioningUtils"],function lib(constraint, elementProxyFactory, utils, win) {
  function isDomNode(obj) {
    return obj.nodeType && (obj.nodeType === 1 || obj.nodeType === 11)
  }
  function dispatchRepositionCallbacks() {
    for(;repositionCallbacks.length > 0;) {
      repositionCallbacks.shift()()
    }
  }
  function reposition(callback) {
    var toSplice = [];
    if(typeof callback === "function") {
      repositionCallbacks.push(callback)
    }
    clearTimeout(timeoutId);
    timeoutId = 0;
    if(!repositionScheduled) {
      w.requestAnimationFrame(function() {
        repositionScheduled = false;
        for(var i = 0;i < constraints.length;i++) {
          if(!constraints[i].destroyed) {
            constraints[i].updateValues();
            constraints[i].reposition()
          }else {
            toSplice.push(i)
          }
        }
        for(;toSplice.length > 0;) {
          constraints.splice(toSplice.pop(), 1)
        }
        elementProxyFactory.bakeOff();
        dispatchRepositionCallbacks()
      });
      repositionScheduled = true
    }
  }
  function handleRepositionEvents() {
    if(timeoutId === 0) {
      timeoutId = setTimeout(reposition, 10)
    }
  }
  function bindEvents() {
    w.addEventListener("resize", handleRepositionEvents);
    w.addEventListener("scroll", handleRepositionEvents);
    eventsBound = true
  }
  function detachEvents() {
    w.removeEventListener("resize", handleRepositionEvents);
    w.removeEventListener("scroll", handleRepositionEvents);
    eventsBound = false
  }
  function isScrolling(elem) {
    return elem.scrollHeight > elem.clientHeight
  }
  function containsScrollingElement(list) {
    var len = list.length;
    if(!len) {
      return false
    }
    for(var i = 0;i < len;i++) {
      if(isScrolling(list[i])) {
        return true
      }
    }
    return false
  }
  var ALIGN_REGEX = /^(left|right|center)\s(top|bottom|center)$/;
  var w = win || window;
  var Constraint = constraint.Constraint;
  var repositionScheduled = false;
  var eventsBound = false;
  var constraints = [];
  var timeoutId = 0;
  var repositionCallbacks = [];
  var directionMap = {vert:{top:"top", center:"middle", bottom:"bottom"}, horiz:{left:"left", right:"right", center:"center"}};
  return{createRelationship:function(config) {
    if(!eventsBound) {
      bindEvents()
    }
    var constraintList = [];
    var handleWheel;
    var observer;
    var proxyWheelEvents = true;
    var domHandle = config.element;
    var scrollableParent = utils.getScrollableParent(utils.getPositionTarget(config.target), w);
    if(w.MutationObserver) {
      var scrollableChildren = domHandle.querySelectorAll('[data-scoped-scroll\x3d"true"]');
      observer = new MutationObserver(function() {
        scrollableChildren = domHandle.querySelectorAll('[data-scoped-scroll\x3d"true"]');
        proxyWheelEvents = !containsScrollingElement(scrollableChildren)
      });
      if(containsScrollingElement(scrollableChildren)) {
        proxyWheelEvents = false
      }
      observer.observe(domHandle, {attributes:true, subtree:true, childList:true})
    }
    if(scrollableParent) {
      scrollableParent.addEventListener("scroll", handleRepositionEvents);
      handleWheel = function(e) {
        if(proxyWheelEvents && scrollableParent && typeof scrollableParent.scrollTop !== "undefined") {
          scrollableParent.scrollTop += e.deltaY
        }
      };
      config.element.addEventListener("wheel", handleWheel)
    }
    $A.assert(config.element && isDomNode(config.element), "Element is undefined or missing");
    $A.assert(config.target && (utils.isWindow(config.target) || isDomNode(config.target)), "Target is undefined or missing");
    if(config.appendToBody) {
      document.body.appendChild(config.element)
    }
    if(config.align) {
      $A.assert(!!config.align.match(ALIGN_REGEX), "Invalid align string")
    }
    if(!config.type && config.targetAlign) {
      $A.assert(!!config.targetAlign.match(ALIGN_REGEX), "Invalid targetAlign string")
    }
    config.element = elementProxyFactory.getElement(config.element);
    config.target = elementProxyFactory.getElement(config.target);
    if(!config.type) {
      $A.assert(config.align, "Required align string missing");
      var constraintDirections = config.align.split(/\s/);
      var vertConfig = $A.util.copy(config);
      if(vertConfig.padTop !== undefined) {
        vertConfig.pad = vertConfig.padTop
      }
      constraintList.push(new Constraint(directionMap.horiz[constraintDirections[0]], config));
      constraintList.push(new Constraint(directionMap.vert[constraintDirections[1]], vertConfig))
    }else {
      constraintList.push(new Constraint(config.type, config))
    }
    if(config.scrollableParentBound && scrollableParent) {
      var boxConfig = {element:config.element, enabled:config.enabled, target:elementProxyFactory.getElement(scrollableParent), type:"bounding box", pad:3, boxDirections:{top:true, bottom:true, left:true, right:true}};
      constraintList.push(new Constraint(boxConfig.type, boxConfig))
    }
    constraints = constraints.concat(constraintList);
    reposition();
    return{disable:function() {
      constraintList.forEach(function(constraintToDisable) {
        constraintToDisable.detach()
      })
    }, enable:function() {
      constraintList.forEach(function(constraintToEnable) {
        constraintToEnable.attach()
      })
    }, destroy:function() {
      if(scrollableParent) {
        scrollableParent.removeEventListener("scroll", handleRepositionEvents)
      }
      for(;constraintList.length > 0;) {
        constraintList.pop().destroy()
      }
      if(config.appendToBody && config.element) {
        var nodeToRemove = document.getElementById(config.element.id);
        if(nodeToRemove) {
          nodeToRemove.parentNode.removeChild(nodeToRemove)
        }
      }
    }}
  }, reposition:reposition}
}

);
*/},'js://ui.eventLib.interactive':function(){/*$A.componentService.addLibraryInclude("js://ui.eventLib.interactive",[],function lib() {
  var lib = {DATA_UID_KEY:"data-interactive-lib-uid", domEventMap:{}, interactiveUid:1, addDomEvents:function(component) {
    var events = lib.getHandledDOMEvents(component);
    var helper = component.getConcreteComponent().getDef().getHelper() || this;
    for(var event in events) {
      if(helper.addDomHandler) {
        helper.addDomHandler(component, event)
      }else {
        lib.addDomHandler(component, event)
      }
    }
  }, addDomHandler:function(component, event) {
    var el = component.getElement();
    this.attachDomHandlerToElement(component, el, event)
  }, attachDomHandlerToElement:function(component, element, event) {
    if(!element) {
      return
    }
    var handler = $A.getCallback(this.domEventHandler);
    var elementId = this.getUid(element) || this.newUid(element);
    $A.util.on(element, event, handler);
    if(!this.domEventMap[elementId]) {
      this.domEventMap[elementId] = {}
    }
    var existing = this.domEventMap[elementId][event];
    if(existing) {
      $A.util.removeOn(element, event, existing)
    }
    this.domEventMap[elementId][event] = handler
  }, getUid:function(element) {
    return element.getAttribute(this.DATA_UID_KEY)
  }, newUid:function(element) {
    var nextUid = ++this.interactiveUid;
    element.setAttribute(this.DATA_UID_KEY, nextUid);
    return nextUid
  }, removeDomEventsFromMap:function(component) {
    var element = component.getElement();
    if(!element) {
      return
    }
    var elementId = this.getUid(element);
    if(!elementId) {
      var inputElement = this.getInputElement(element);
      if(inputElement) {
        elementId = this.getUid(inputElement);
        element = inputElement
      }
    }
    if(elementId && this.domEventMap.hasOwnProperty(elementId)) {
      var eventHandlers = this.domEventMap[elementId];
      for(var event in eventHandlers) {
        var existing = eventHandlers[event];
        if(existing) {
          $A.util.removeOn(element, event, existing)
        }
      }
      delete this.domEventMap[elementId]
    }
  }, domEventHandler:function(event) {
    var element = event.target;
    var htmlCmp = $A.componentService.getRenderingComponentForElement(element);
    if(!htmlCmp) {
      return
    }
    var component = htmlCmp.getComponentValueProvider().getConcreteComponent();
    component = component.meta.name === "ui$inputSmartNumber" ? component.getComponentValueProvider().getConcreteComponent() : component;
    var helper = component.getDef().getHelper();
    if(component._recentlyClicked) {
      return
    }
    if(helper && helper.preEventFiring) {
      helper.preEventFiring(component, event)
    }
    lib._dispatchAction(undefined, event, htmlCmp, component, helper);
    if(event.type === "click" && component.isInstanceOf("ui:doubleClicks") && component.get("v.disableDoubleClicks")) {
      component._recentlyClicked = true;
      window.setTimeout(function() {
        component._recentlyClicked = false
      }, 350)
    }
  }, _dispatchAction:function(action, event, htmlCmp, component, helper) {
    if(helper && helper.fireEvent) {
      helper.fireEvent(component, event, helper)
    }else {
      lib.fireEvent(component, event, helper)
    }
  }, fireEvent:function(component, event) {
    if(component.isValid()) {
      var e = component.getEvent(event.type);
      if(!$A.util.isUndefinedOrNull(e) && e.getDef) {
        lib.setEventParams(e, event);
        e.fire()
      }
    }
  }, getDomEvents:function(component) {
    return component.getDef().getAllEvents()
  }, getHandledDOMEvents:function(component) {
    var ret = {};
    var handledEvents = component.getHandledEvents();
    var domEvents = lib.getDomEvents(component);
    if(domEvents) {
      var i = 0;
      for(var len = domEvents.length;i < len;i++) {
        var eventName = domEvents[i].toLowerCase();
        if(handledEvents[eventName]) {
          ret[eventName] = true
        }
      }
    }
    return ret
  }, setEventParams:function(e, DOMEvent) {
    var attributeDefs = e.getDef().getAttributeDefs().getNames();
    var params = {};
    var attribute;
    var c = 0;
    for(var length = attributeDefs.length;c < length;c++) {
      attribute = attributeDefs[c];
      if(attribute === "domEvent") {
        params[attribute] = DOMEvent
      }else {
        if(attribute === "keyCode") {
          params[attribute] = DOMEvent.which || DOMEvent.keyCode
        }else {
          params[attribute] = DOMEvent[attribute]
        }
      }
    }
    e.setParams(params)
  }, setDisabled:function(component, disabled, disabledCss) {
    component.set("v.disabled", disabled);
    if(disabledCss) {
      if(disabled) {
        $A.util.addClass(component.getElement(), disabledCss)
      }else {
        $A.util.removeClass(component.getElement(), disabledCss)
      }
    }
  }, getInputElement:function(element) {
    if(!element) {
      return element
    }
    return element.getElementsByTagName("input")[0] || element.getElementsByTagName("a")[0] || element.getElementsByTagName("select")[0] || element.getElementsByTagName("textarea")[0] || element
  }};
  return lib
}

);
*/},});
$A.componentService.addComponent({'markup://aura:text':function(){/*$A.componentService.addComponentClass("markup://aura:text",function() {
return {
  "meta":{
    "name":"aura$text"
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:text",
  "ad":[
    ["value","aura://String","G",false],
    ["truncate","aura://Integer","I",false],
    ["truncateByWord","aura://Boolean","I",false,false],
    ["ellipsis","aura://Boolean","I",false,true]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "css":true
}*/},'markup://aura:placeholder':function(){/*$A.componentService.addComponentClass("markup://aura:placeholder",function() {
return {
  "meta":{
    "name":"aura$placeholder",
    "extends":"markup://aura:component"
  },
  "renderer":{
    "render":function(cmp) {
        var ret=cmp.superRender();
        return ret;
    },
    "rerender":function(cmp) {
        return cmp.superRerender();
    },
    "afterRender":function(cmp) {
        if ($A.util.getBooleanValue(cmp.get("v.loaded"))){
            return cmp.superAfterRender();
        }

        var action = $A.get("c.aura://ComponentController.getComponent");
        var attributes = cmp.get("v.attributes");
        var atts = {};
        for(var x in attributes){
            var value=attributes[x];
            
            if(value) {
	            if(value["descriptor"]){
	                value=value["value"];
	            }
	            if($A.util.isExpression(value)){
	                value=value.evaluate();
	            }
            }
            atts[x]=value;
        }
        var avp = cmp.getAttributeValueProvider();

        action.setCallback(this, function(a){
            var newBody;
            if(!cmp.isValid()){
                return;
            }
            var state = a.getState();
            if (state === "SUCCESS"){
                var config= a.getReturnValue();
                if(!config.hasOwnProperty("attributes")){
                    config["attributes"]={"values":{}};
                }
                $A.util.apply(config["attributes"]["values"], attributes);
                config["attributes"]["valueProvider"] = avp;
                newBody = $A.createComponentFromConfig(config);
            } else if (state === "INCOMPLETE") { 
            	var offlineMessageEvt = $A.getEvt('markup://force:showOfflineMessage');
            	if(offlineMessageEvt){
            		offlineMessageEvt.setParams({retryAction: action}).fire();
            	}
            } else if (state === "ERROR") {
                var errors = a.getError();
                newBody = $A.createComponentFromConfig({ "descriptor" : "markup://aura:text" });
                if (errors) {
                    newBody.set("v.value", errors[0].message);

                } else {
                    newBody.set("v.value", 'unknown error');
                }
            }




            
            var localId = cmp.getLocalId();
            if(localId){
                var cvp = cmp.getAttributeValueProvider();
                cvp.deIndex(localId, cmp.getGlobalId());
                cvp.index(localId, newBody.getGlobalId());
            }
            cmp.set("v.loaded", true, true);
            cmp.set("v.body", [newBody]);
        });

        var desc = cmp.get("v.refDescriptor");
        action.setParams({
            "name" : desc,
            "attributes" : atts
        });

        $A.enqueueAction(action);

        cmp.superAfterRender();
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://aura:placeholder",
  "st":{
    "descriptor":"css://aura.placeholder",
    "cl":"auraPlaceholder"
  },
  "ad":[
    ["body","aura://Aura.Component[]","I",false,[
      {
        "componentDef":{
          "descriptor":"markup://aura:html"
        },
        "attributes":{
          "values":{
            "HTMLAttributes":{
              "descriptor":"HTMLAttributes",
              "value":{
                "class":"spin"
              }
            },
            "tag":{
              "descriptor":"tag",
              "value":"div"
            }
          }
        }
      }
    ]],
    ["refDescriptor","java://org.auraframework.def.DefDescriptor","I",false,null],
    ["attributes","aura://Object","I",false,null],
    ["loaded","aura://Boolean","I",false,false],
    ["exclusive","aura://Boolean","I",false,false]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"aura:placeholder",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://aura:component':function(){/*$A.componentService.addComponentClass("markup://aura:component",function() {
return {
  "meta":{
    "name":"aura$component"
  },
  "renderer":{
    "render":function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
    "afterRender":function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
    "rerender":function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
    "unrender":function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:component",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "ab":true,
  "css":true
}*/},'markup://aura:expression':function(){/*$A.componentService.addComponentClass("markup://aura:expression",function() {
return {
  "meta":{
    "name":"aura$expression"
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:expression",
  "ad":[
    ["value","aura://String","G",false]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "css":true
}*/},'markup://aura:html':function(){/*$A.componentService.addComponentClass("markup://aura:html",function() {
return {
  "meta":{
    "name":"aura$html"
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:html",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["tag","aura://String","G",false],
    ["HTMLAttributes","aura://Map","G",false,null]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "css":true
}*/},'markup://aura:if':function(){/*$A.componentService.addComponentClass("markup://aura:if",function() {
return {
  "meta":{
    "name":"aura$if"
  },
  "controller":{

  },
  "renderer":{
    "render":function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
    "afterRender":function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
    "rerender":function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
    "unrender":function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
  },
  "provider":{
    "provide":function(component) {
        return component;
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:if",
  "ad":[
    ["isTrue","aura://Boolean","G",true],
    ["body","aura://Aura.ComponentDefRef[]","G",true,[]],
    ["else","aura://Aura.ComponentDefRef[]","G",false,[]],
    ["template","aura://Aura.ComponentDefRef[]","I",false,[]]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleTheTruth"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.isTrue"
      },
      "n":"change"
    }
  ],
  "css":true
}*/},'markup://ui:actionMenuItem':function(){/*$A.componentService.addComponentClass("markup://ui:actionMenuItem",function() {
return {
  "meta":{
    "name":"ui$actionMenuItem",
    "extends":"markup://ui:menuItem"
  },
  "controller":{
    "init":function(cmp) {
        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;
        if (hasBodyAttribute) {
            cmp.find("anchor").set("v.body", bodyAttribute);
        }
    },
    "onClick":function(cmp, event) {
        if (cmp.isValid()) {
            $A.util.squash(event, true);
            cmp.getConcreteComponent().select();
        }
    }
  },
  "helper":{
    "buildBody":function(cmp) {
        var anchorElement = cmp.find("anchor").getElement();
        var label = cmp.get("v.label");
        var isDisabled = cmp.get("v.disabled");

        var role = cmp.get("v.role");
        if (role) {
            anchorElement.setAttribute("role", role);
        }

        anchorElement.setAttribute("aria-disabled", isDisabled);
        anchorElement.setAttribute("tabindex", isDisabled ? "-1" : "0");
        anchorElement.setAttribute("title", label);

        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;

        if (!hasBodyAttribute) {
            $A.util.clearNode(anchorElement);
            anchorElement.appendChild(document.createTextNode(label));
        }
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        var ret = cmp.superRender();

        helper.buildBody(cmp);

        return ret;
    },
    "rerender":function(cmp, helper) {
        cmp.superRerender();

        helper.buildBody(cmp);
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:actionMenuItem",
  "su":"markup://ui:menuItem",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false,"menuitem"],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["selected","aura://Boolean","G",false,false],
    ["type","aura://String","G",false],
    ["label","aura://String","G",false],
    ["hideMenuAfterSelected","aura://Boolean","G",false,true],
    ["disabled","aura://Boolean","G",false,false],
    ["id","aura://String","I",false]
  ],
  "med":[
    {
      "name":"ui:select",
      "xs":"I",
      "action":"{!c.select}"
    },
    {
      "name":"ui:setFocus",
      "xs":"I",
      "action":"{!c.setFocus}"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuSelect",
      "n":"menuSelect",
      "xs":"PP"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "anchor":{
      "description":"Action item button",
      "context":{
        "devNameOrId":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:actionMenuItem",
          "path":"v.id"
        }
      },
      "alias":"menu-item",
      "isPrimitive":true
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:actionMenuItem",
                    "path":"v.class"
                  },
                  "role":"presentation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"anchor",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "onclick":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:actionMenuItem",
                              "path":"c.onClick"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"a"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:checkboxMenuItem':function(){/*$A.componentService.addComponentClass("markup://ui:checkboxMenuItem",function() {
return {
  "meta":{
    "name":"ui$checkboxMenuItem",
    "extends":"markup://ui:menuItem"
  },
  "controller":{
    "init":function(cmp) {
        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;
        if (hasBodyAttribute) {
            cmp.find("anchor").set("v.body", bodyAttribute);
        }
    },
    "onClick":function(cmp, event) {
        if (cmp.isValid()) {
            $A.util.squash(event, true);
            cmp.getConcreteComponent().select();
        }
    },
    "select":function(component) {
        var concreteComponent = component.getConcreteComponent();

        if (concreteComponent.get("v.disabled")) {
            return;
        }

        var current = concreteComponent.get("v.selected");
        concreteComponent.set("v.selected", !current);

        component.getSuper().select();
    }
  },
  "helper":{
    "buildBody":function(cmp) {
        var anchorElement = cmp.find("anchor").getElement();

        var label = cmp.get("v.label");
        var isDisabled = cmp.get("v.disabled");
        var isSelected = cmp.get("v.selected");

        var role = cmp.get("v.role");
        if (role) {
            anchorElement.setAttribute("role", role);
        }

        anchorElement.setAttribute("aria-disabled", isDisabled);
        anchorElement.setAttribute("tabindex", isDisabled ? "-1" : "0");
        anchorElement.setAttribute("title", label);
        anchorElement.setAttribute("aria-checked", isSelected);

        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;

        if (!hasBodyAttribute) {
            $A.util.clearNode(anchorElement);
            anchorElement.appendChild(document.createTextNode(label));
        }

        if (isSelected === true) {
            $A.util.addClass(anchorElement, "selected");
        } else {
            $A.util.removeClass(anchorElement, "selected");
        }
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        var ret = cmp.superRender();

        helper.buildBody(cmp);

        return ret;
    },
    "rerender":function(cmp, helper) {
        cmp.superRerender();

        helper.buildBody(cmp);
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:checkboxMenuItem",
  "st":{
    "descriptor":"css://ui.checkboxMenuItem",
    "cl":"uiCheckboxMenuItem"
  },
  "su":"markup://ui:menuItem",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false,"menuitemcheckbox"],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["selected","aura://Boolean","G",false,false],
    ["type","aura://String","G",false],
    ["label","aura://String","G",false],
    ["hideMenuAfterSelected","aura://Boolean","G",false,true],
    ["disabled","aura://Boolean","G",false,false]
  ],
  "med":[
    {
      "name":"ui:select",
      "xs":"I",
      "action":"{!c.select}"
    },
    {
      "name":"ui:setFocus",
      "xs":"I",
      "action":"{!c.setFocus}"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuSelect",
      "n":"menuSelect",
      "xs":"PP"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "anchor":{
      "description":"Select checkBoxMenuItem",
      "context":{
        "body":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:checkboxMenuItem",
          "path":"v.body"
        }
      },
      "alias":"select-checkBoxMenuItem"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:checkboxMenuItem",
                    "path":"v.class"
                  },
                  "role":"presentation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"anchor",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "onclick":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:checkboxMenuItem",
                              "path":"c.onClick"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"a"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:interactive':function(){/*$A.componentService.addComponentClass("markup://ui:interactive",function() {
return {
  "meta":{
    "name":"ui$interactive",
    "extends":"markup://aura:component"
  },
  "helper":{
    "DATA_UID_KEY":"data-interactive-uid",
    "domEventMap":{

    },
    "interactiveUid":1,
    "addDomEvents":function(component) {
        var events = this.getHandledDOMEvents(component);
        
        var concrete = component.getConcreteComponent();
        var helper = concrete.helper || this;
        for (var event in events) {
            helper.addDomHandler(component, event);
        }
    },
    "addDomHandler":function(component, event) {
        var element = component.getElement();
        if (element === null) {
            $A.warning("Can't add handler to component because didn't have valid html element. Component was " + JSON.stringify(component));
            return ;
        }
        var elementId = this.getUid(element) || this.newUid(element);

        var handler = $A.getCallback(this.domEventHandler);
        $A.util.on(element, event, handler);

        
        
        
        if(!this.domEventMap[elementId]) {
        	this.domEventMap[elementId] = {};
        }

        
        var existing = this.domEventMap[elementId][event];
        if(existing) {
        	
        	$A.util.removeOn(element, event, existing);
        }

        this.domEventMap[elementId][event] = handler;
    },
    "getUid":function(element) {
        return element ? element.getAttribute(this.DATA_UID_KEY) : null;
    },
    "newUid":function(element) {
        var nextUid = ++this.interactiveUid;
        element.setAttribute(this.DATA_UID_KEY, nextUid);
        return nextUid;
    },
    "removeDomEventsFromMap":function(component) {
        var element = component.getElement();
        if (!element) {
            return;
        }

        var elementId = this.getUid(element);

        
        if(elementId && this.domEventMap.hasOwnProperty(elementId)) {
            var eventHandlers = this.domEventMap[elementId];
            for (var event in eventHandlers) {
                var existing = eventHandlers[event];
                if(existing) {
                    $A.util.removeOn(element, event, existing);
                }
            }

            delete this.domEventMap[elementId];
        }
    },
    "domEventHandler":function(event) {
        var element = event.currentTarget || event.target;
        var htmlCmp = $A.componentService.getRenderingComponentForElement(element);

        
        if (!htmlCmp) {
            return;
        }

        var component = htmlCmp.getComponentValueProvider().getConcreteComponent();
        var helper = component.helper;

        if (!helper || component._recentlyClicked) {
            return;
        }

        
        if (helper.preEventFiring) {
            helper.preEventFiring(component, event);
        }

        
        if (helper.fireEvent) {
            helper.fireEvent(component, event, helper);
        }

        if (event.type === "click" && component.isInstanceOf("ui:doubleClicks") && component.get("v.disableDoubleClicks")) {
        	component._recentlyClicked = true;
        	window.setTimeout(function() { component._recentlyClicked = false; }, 350);
        }
    },
    "fireEvent":function(component, event, helper) {
    	 
    	 
    	 if(component.isValid()) {
	        var e = component.getEvent(event.type);
	        helper.setEventParams(e, event);
	        e.setComponentEvent();
	        e.fire();
    	 }
     },
    "getDomEvents":function(component) {
        return component.getDef().getAllEvents();
    },
    "getHandledDOMEvents":function(component) {
        var ret = {};
        var handledEvents = component.getHandledEvents();
        var domEvents = this.getDomEvents(component);

        if(domEvents){
            for(var i=0,len=domEvents.length; i<len; i++){
                var eventName = domEvents[i].toLowerCase();
                if (handledEvents[eventName]) {
                    ret[eventName] = true;
                }
            }
        }
        return ret;
    },
    "preEventFiring":function() {
    },
    "setEventParams":function(e, DOMEvent) {
        
        var attributeDefs = e.getDef().getAttributeDefs().getNames();
        var attribute;
        var params = {};
        for (var c=0,length=attributeDefs.length;c<length;c++) {
            attribute = attributeDefs[c];
            if (attribute === "domEvent") {
                params[attribute] = DOMEvent;
            } else if (attribute === "keyCode") { 
                params[attribute] = DOMEvent.which || DOMEvent.keyCode;
            } else {
                params[attribute] = DOMEvent[attribute];
            }
        }
        e.setParams(params);
    },
    "setDisabled":function(component, disabled, disabledCss) {
        component.set('v.disabled', disabled);
        if (disabledCss) {
            if(disabled){
                $A.util.addClass(component.getElement(),disabledCss);
            }else{
                $A.util.removeClass(component.getElement(), disabledCss);
            }
        }
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        helper.addDomEvents(component);
        return component.superAfterRender();
    },
    "rerender":function(component, helper) {
        helper.addDomEvents(component);
        return component.superRerender();
    },
    "unrender":function(component, helper) {
    	helper.removeDomEventsFromMap(component);
        return component.superUnrender();
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:interactive",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["disableDoubleClicks","aura://Boolean","I",false,false],
    ["disabled","aura://Boolean","G",false,false]
  ],
  "i":[
    "markup://ui:visible",
    "markup://ui:doubleClicks"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:interactive",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "ab":true,
  "css":true
}*/},'markup://ui:menuItemSeparator':function(){/*$A.componentService.addComponentClass("markup://ui:menuItemSeparator",function() {
return {
  "meta":{
    "name":"ui$menuItemSeparator",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:menuItemSeparator",
  "st":{
    "descriptor":"css://ui.menuItemSeparator",
    "cl":"uiMenuItemSeparator"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["label","aura://String","I",false]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:menuItemSeparator",
                    "path":"v.class"
                  },
                  "role":"separator"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:radioMenuItem':function(){/*$A.componentService.addComponentClass("markup://ui:radioMenuItem",function() {
return {
  "meta":{
    "name":"ui$radioMenuItem",
    "extends":"markup://ui:menuItem"
  },
  "controller":{
    "init":function(cmp) {
        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;
        if (hasBodyAttribute) {
            cmp.find("anchor").set("v.body", bodyAttribute);
        }
    },
    "onClick":function(cmp, event) {
        if (cmp.isValid()) {
            $A.util.squash(event, true);
            cmp.getConcreteComponent().select();
        }
    },
    "select":function(component, event, helper) {
        var concreteComponent = component.getConcreteComponent();

        if (concreteComponent.get("v.disabled")) {
            return;
        }

        var current = concreteComponent.get("v.selected");
        if (current === false) {
            concreteComponent.set("v.selected", true);
        }

        helper.fireSelectEvent(concreteComponent, event, {
            "deselectSiblings": true
        });
    }
  },
  "helper":{
    "buildBody":function(cmp) {
        var anchorElement = cmp.find("anchor").getElement();

        var label = cmp.get("v.label");
        var isDisabled = cmp.get("v.disabled");
        var isSelected = cmp.get("v.selected");

        var role = cmp.get("v.role");
        if (role) {
            anchorElement.setAttribute("role", role);
        }

        anchorElement.setAttribute("aria-disabled", isDisabled);
        anchorElement.setAttribute("tabindex", isDisabled ? "-1" : "0");
        anchorElement.setAttribute("title", label);
        anchorElement.setAttribute("aria-checked", isSelected);

        var bodyAttribute = cmp.get("v.body");
        var hasBodyAttribute = bodyAttribute !== null && bodyAttribute.length > 0;

        if (!hasBodyAttribute) {
            $A.util.clearNode(anchorElement);

            
            
            anchorElement.appendChild(document.createElement("b"));

            anchorElement.appendChild(document.createTextNode(label));
        }

        if (isSelected === true) {
            $A.util.addClass(anchorElement, "selected");
        } else {
            $A.util.removeClass(anchorElement, "selected");
        }
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        var ret = cmp.superRender();

        helper.buildBody(cmp);

        return ret;
    },
    "rerender":function(cmp, helper) {
        cmp.superRerender();

        helper.buildBody(cmp);
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:radioMenuItem",
  "st":{
    "descriptor":"css://ui.radioMenuItem",
    "cl":"uiRadioMenuItem"
  },
  "su":"markup://ui:menuItem",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false,"menuitemradio"],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["selected","aura://Boolean","G",false,false],
    ["type","aura://String","G",false],
    ["label","aura://String","G",false],
    ["hideMenuAfterSelected","aura://Boolean","G",false,false],
    ["disabled","aura://Boolean","G",false,false]
  ],
  "med":[
    {
      "name":"ui:select",
      "xs":"I",
      "action":"{!c.select}"
    },
    {
      "name":"ui:setFocus",
      "xs":"I",
      "action":"{!c.setFocus}"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuSelect",
      "n":"menuSelect",
      "xs":"PP"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "anchor":{
      "description":"Radio menu item action",
      "context":{
        "body":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:radioMenuItem",
          "path":"v.body"
        }
      },
      "alias":"select-radioMenuItem"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"listitem",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:radioMenuItem",
                    "path":"v.class"
                  },
                  "role":"presentation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"anchor",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "onclick":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:radioMenuItem",
                              "path":"c.onClick"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"a"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://aura:iteration':function(){/*$A.componentService.addComponentClass("markup://aura:iteration",function() {
return {
  "meta":{
    "name":"aura$iteration"
  },
  "controller":{

  },
  "provider":{
    "provide":function(component) {
        return component;
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://aura:iteration",
  "ad":[
    ["items","aura://List","G",true,[]],
    ["var","aura://String","G",true],
    ["indexVar","aura://String","G",false,"_index"],
    ["start","aura://Integer","G",false],
    ["end","aura://Integer","G",false],
    ["loaded","aura://Boolean","G",false,false],
    ["body","aura://Aura.ComponentDefRef[]","G",true,[]],
    ["template","aura://Aura.ComponentDefRef[]","G",false,[]],
    ["forceServer","aura://Boolean","I",false,false]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "re":[
    {
      "ed":"markup://aura:operationComplete",
      "n":"iterationComplete",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.itemsChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.items"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.rangeChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.start"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.rangeChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.end"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.templateChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.template"
      },
      "n":"change"
    }
  ],
  "css":true
}*/},'markup://ui:menuItem':function(){/*$A.componentService.addComponentClass("markup://ui:menuItem",function() {
return {
  "meta":{
    "name":"ui$menuItem",
    "extends":"markup://aura:component"
  },
  "controller":{
    "setFocus":function(component, event, helper) {
        helper.focus(component);
    },
    "select":function(component, event, helper) {
        helper.fireSelectEvent(component, event);
    }
  },
  "helper":{
    "typeMap":{
      "action":"markup://ui:actionMenuItem",
      "checkbox":"markup://ui:checkboxMenuItem",
      "radio":"markup://ui:radioMenuItem",
      "separator":"markup://ui:menuItemSeparator"
    },
    "addMenuItemDomEvents":function(component) {
        var events = ["click", "keydown", "mouseover"];
        if (!component._menuItemDomEventsInstalled) {
            for (var i = 0, len = events.length; i < len; i++) {
                $A.util.on(component.getElement(), events[i], this.domEventHandler.bind(this, component));
            }
            component._menuItemDomEventsInstalled = true;
        }
    },
    "domEventHandler":function(component, event) {
        if (!component.isValid() || this.isDisabled(component)) {
            return false;
        }

        var concreteComponent = component.getConcreteComponent();
        if (event.type === "mouseover") {
            concreteComponent.setFocus();
        } else if (event.type === "keydown") {
            if (event.keyCode === 32 || event.keyCode === 13) {  
                event.preventDefault();
                concreteComponent.select();
            }
        } else if (event.type === "click") {
            event.preventDefault();
        }

        return false;
    },
    "isDisabled":function(component) {
        return component.get("v.disabled") === true;
    },
    "fireSelectEvent":function(component, event, options) {
        if (!component.isValid() || this.isDisabled(component)) {
            return;
        }

        
        component.getEvent("click").fire();

        options = options || {};

        var menuSelectEvent = component.getEvent("menuSelect");
        if (menuSelectEvent) {
            var hideMenu = options.hideMenu;
            if ($A.util.isUndefinedOrNull(hideMenu)) {
                hideMenu = component.get("v.hideMenuAfterSelected");
            }

            var focusTrigger = options.focusTrigger;
            if ($A.util.isUndefinedOrNull(focusTrigger)) {
                focusTrigger = hideMenu;
            }

            menuSelectEvent.setParams({
                selectedItem: component,
                "hideMenu": hideMenu,
                "deselectSiblings": options.deselectSiblings,
                "focusTrigger": focusTrigger
            });
            menuSelectEvent.fire();
        }

    },
    "focus":function(component) {
        var element = component.getElement();

        if (element) {
            var anchors = element.getElementsByTagName("a");
            if (anchors && anchors.length > 0) {
                var anchor = anchors[0];
                if (anchor && anchor.focus) {
                    anchor.focus();
                }
            }
        }
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        helper.addMenuItemDomEvents(component);
        return component.superAfterRender();
    },
    "rerender":function(component, helper) {
        helper.addMenuItemDomEvents(component);
        component.superRerender();
    },
    "unrender":function(component) {
        delete component._menuItemDomEventsInstalled;

        component.superUnrender();
    }
  },
  "provider":{
    "provide":function(component) {
        var helper = component.helper;
        var type = component.get("v.type")||'';
        if ($A.util.isEmpty(type)) {
            return helper.typeMap["action"];
        } else {
            var menuItemDef = helper.typeMap[type];
            if ($A.util.isUndefinedOrNull(menuItemDef)) {
                return type;
            } else {
                return menuItemDef;
            }
        }
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:menuItem",
  "st":{
    "descriptor":"css://ui.menuItem",
    "cl":"uiMenuItem"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false,"menuitem"],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["selected","aura://Boolean","G",false,false],
    ["type","aura://String","G",false],
    ["label","aura://String","G",false],
    ["hideMenuAfterSelected","aura://Boolean","G",false,true],
    ["disabled","aura://Boolean","G",false,false]
  ],
  "med":[
    {
      "name":"ui:select",
      "xs":"I",
      "action":"{!c.select}"
    },
    {
      "name":"ui:setFocus",
      "xs":"I",
      "action":"{!c.setFocus}"
    }
  ],
  "i":[
    "markup://ui:uiEvents",
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuSelect",
      "n":"menuSelect",
      "xs":"PP"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:menuItem",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "ab":true,
  "css":true
}*/},'markup://ui:popup':function(){/*$A.componentService.addComponentClass("markup://ui:popup",function() {
return {
  "meta":{
    "name":"ui$popup",
    "extends":"markup://aura:component"
  },
  "controller":{
    "doInit":function(component, event, helper) {
        helper = component.getConcreteComponent().getDef().getHelper();
        helper.setEventHandlersOnChildren(component, event);
    },
    "onTriggerPress":function(component, event, helper) {
        
        helper = component.getConcreteComponent().helper;
        helper.handleTriggerPress(component, event);
    },
    "onTargetShow":function(component, event, helper) {
        helper = component.getConcreteComponent().getDef().getHelper();
        helper.handleTargetShow(component, event);
    },
    "onTargetHide":function(component, event, helper) {
        helper = component.getConcreteComponent().getDef().getHelper();
        helper.handleTargetHide(component, event);
    },
    "onKeyboardEvent":function(component, event, helper) {
        helper = component.getConcreteComponent().getDef().getHelper();
        helper.handleKeyboardEvent(component, event);
    },
    "onRefresh":function(component, event, helper) {
        helper = component.getConcreteComponent().getDef().getHelper();
        helper.handleRefresh(component, event);
    }
  },
  "helper":{
    "getTargetComponent":function(component) {
        return this.getComponent(component, "ui:popupTarget");
    },
    "getTriggerComponent":function(component) {
        return this.getComponent(component, "ui:popupTrigger");
    },
    "getComponent":function(component, componentName) {
        var body = component.getConcreteComponent().get("v.body"),
            child;

        if (!$A.util.isUndefinedOrNull(componentName)) {
            for (var i = 0; i < body.length; i++) {
                child = body[i];

                if (child.isInstanceOf('ui:scroller')) {
                    return this.getComponent(child, componentName);
                } else if (child.isInstanceOf(componentName)) {
                    return child;
                }
            }
        }
    },
    "handleTriggerPress":function(component) {
        var target = this.getTargetComponent(component);
        if (target && target.isValid()) {
            this.setTargetVisibility(component, !target.get("v.visible"));
        }
    },
    "handleTargetShow":function(component, event) {
        var originalEvent = event.getParam("event");
        if (originalEvent && originalEvent.type === "keydown") {
            this.delegateEventToTarget(component, originalEvent, 'e.keydown');
        }

        this.setTargetVisibility(component, true);
    },
    "handleTargetHide":function(component, event) {
        var originalEvent = event.getParam("event");
        var escapeKeyPressed = originalEvent && originalEvent.type === "keydown" && originalEvent.keyCode === 27;
        if (escapeKeyPressed && this.getTargetComponent(component).get("v.visible")) {
            
            
            $A.util.squash(originalEvent, true);
        }
        this.setTargetVisibility(component, false);
    },
    "handleKeyboardEvent":function(component, event) {
        this.delegateEventToTarget(component, event.getParam("event"), 'e.popupKeyboardEvent');
    },
    "setTargetVisibility":function(component, visible) {
        var target = this.getTargetComponent(component);

        target.set("v.visible", visible);
    },
    "delegateEventToTarget":function(component, event, eventName) {
        var target = this.getTargetComponent(component),
            targetEvent = target.get(eventName);

        if (targetEvent) {
            targetEvent.setParams({
                event: event
            });
            targetEvent.fire();
        }
    },
    "setEventHandlersOnChildren":function(component) {
        var body = component.getConcreteComponent().get("v.body"),
            child;

        for (var i = 0, l = body.length; i < l; i++) {
            child = body[i];
            if (child.isInstanceOf("ui:popupTrigger")) {
                this.setTriggerEventHandlers(component, child);
            }

            if (child.isInstanceOf("ui:popupTarget")) {
                this.setTargetEventHandlers(component, child);
            }
        }
    },
    "setTriggerEventHandlers":function(component, childComponent) {
        childComponent.addHandler("popupTriggerPress", component, "c.onTriggerPress");
        childComponent.addHandler("popupTargetShow", component, "c.onTargetShow");
        childComponent.addHandler("popupTargetHide", component, "c.onTargetHide");
        childComponent.addHandler("popupKeyboardEvent", component, "c.onKeyboardEvent");
    },
    "setTargetEventHandlers":function(component, targetComponent) {
        this.addCloseHandler(component, targetComponent);
    },
    "addCloseHandler":function(component, childComponent) {
        childComponent.addHandler("doClose", component, "c.onTargetHide");
    },
    "handleRefresh":function(component) {
        this.setEventHandlersOnChildren(component);
    },
    "findElement":function(component, localId) {
        var cmp = component.getConcreteComponent();
        var retCmp = null;
        while (cmp) {
            retCmp = cmp.find(localId);
            if (retCmp) {
                break;
            }
            cmp = cmp.getSuper();
        }
        var elem = retCmp ? retCmp.getElement() : null;

        return elem;
    }
  },
  "renderer":{
    "afterRender":function(component) {
        var concreteCmp = component.getConcreteComponent();
        var _helper = concreteCmp.getDef().getHelper();
        var target = _helper.getTargetComponent(component);
    	var trigger = _helper.getTriggerComponent(component);

    	if (target && trigger) {
            var targetElement = _helper.findElement(trigger, "popupTriggerElement");
            if (targetElement) {
                target.set("v.referenceElement", targetElement);
            }
    	}

    	component.superAfterRender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:popup",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetShow",
      "n":"popupTargetShow",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetHide",
      "n":"popupTargetHide",
      "xs":"I"
    },
    {
      "ed":"markup://ui:refresh",
      "n":"refresh",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTriggerPress",
      "n":"popupTriggerPress",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.doInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onTriggerPress"
      },
      "n":"popupTriggerPress"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onTargetShow"
      },
      "n":"popupTargetShow"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onTargetHide"
      },
      "n":"popupTargetHide"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onKeyboardEvent"
      },
      "n":"popupKeyboardEvent"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onRefresh"
      },
      "n":"refresh"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"app",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:popup",
                    "path":"v.class"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:popup",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:popupTarget':function(){/*$A.componentService.addComponentClass("markup://ui:popupTarget",function() {
return {
  "meta":{
    "name":"ui$popupTarget",
    "extends":"markup://aura:component",
    "imports":{
      "lib":"markup://ui:panelPositioningLib"
    }
  },
  "controller":{
    "handleVisibilityChange":function(component, event, helper) {
        if (component.get("v.visible")) {
            var popupTarget = component.find("popupTarget");
            if (popupTarget.isRendered()) {
                helper.position(component);
            }
        } else {
            helper.unposition(component);
        }
    },
    "handleKeyboardEvent":function(component, event, helper) {
        var _helper = component.getConcreteComponent().getDef().getHelper() || helper;
        _helper.handleKeyboardEvent(component.getConcreteComponent(), event);
    }
  },
  "helper":{
    "getElementCache":function(component) {
        var o;

        if (!component._localElementCache) {
            o = {};
            o.target = component.getConcreteComponent(); 
            o.targetElement = o.target.getElement(); 

            if (component.find("popupTarget")) { 
                o.targetDiv = component.find("popupTarget").getElement(); 
            }

            o.triggerElement = component.getConcreteComponent().get("v.referenceElement");
            if (o.triggerElement) {
                o.trigger = this.getTriggerComponent(o.triggerElement);
            }
            component._localElementCache = o;
        }

        return component._localElementCache;
    },
    "getTransitionEndEventName":function(component) {
        var el,
            names;

        if (!component._transitionEndEventName) {
            el = document.createElement('div');
            names = {
                'transition': 'transitionend',
                'OTransition': 'otransitionend',
                'MozTransition': 'transitionend',
                'WebkitTransition': 'webkitTransitionEnd'
            };

            for (var i in names) {
                if (names.hasOwnProperty(i) && typeof el.style[i] !== 'undefined') {
                    component._transitionEndEventName = names[i];
                }
            }
        }

        return component._transitionEndEventName;
    },
    "getTriggerComponent":function(element) {
        var htmlCmp = $A.componentService.getRenderingComponentForElement(element);
        var component = htmlCmp ? htmlCmp.getComponentValueProvider().getConcreteComponent() : null;
        while (component && !component.isInstanceOf("ui:popupTrigger")) {
            component = component.getComponentValueProvider().getConcreteComponent();
        }
        return component;
    },
    "position":function(component) {
        var attachToBody = component.get("v.attachToBody");

        if (attachToBody === true) {            
            return this.positionAsBodyChild(component);
        } else {
            var element = component.find("popupTarget").getElement();
            element.classList.remove("positioned");
            window.requestAnimationFrame($A.getCallback(function () {
                if (!component.isValid()) {
                    return;
                }
                if (!component.get("v.manualPosition")) {
                    var elemRect = element.getBoundingClientRect();
                    var viewPort = $A.util.getWindowSize();

                    if (component.get("v.autoPosition") && elemRect.bottom > viewPort.height && elemRect.height) {
                        
                        
                        
                        

                        element.style.top = 0 - elemRect.height + "px";
                    }
                }
                element.classList.add("positioned");
            }));
        }
    },
    "_getScrollableParent":function(elem) {
        if (this._scrollableParent) {
            return this._scrollableParent;
        }

        
        
        var overflow = (getComputedStyle(elem) || elem.style)['overflow-y'];

        if (overflow === 'auto') {
            this._scrollableParent = elem;
            return elem;
        }

        if (elem === document.body) {
            this._scrollableParent = null;
            return null;
        }

        return this._getScrollableParent(elem.parentNode);

    },
    "positionAsBodyChild":function(component) {
        var element = component.find("popupTarget").getElement();
        var target = component.get("v.referenceElement");
        if (target && element) {
            var manualPosition = component.get("v.manualPosition");

            var container = component.getElement();
            
            if (!manualPosition) { 
                container.style.top = "-9999px";
            }
            $A.util.attachToDocumentBody(container);

            if (manualPosition) {
                element.classList.add("positioned");
            } else {
                element.classList.remove("positioned");
                
                
                window.requestAnimationFrame($A.getCallback(function () {
                    if (!component.isValid()) {
                        return;
                    }
                    element.style.opacity = 0;
                    var viewPort = $A.util.getWindowSize();
                    var elemRect = element.getBoundingClientRect();
                    var referenceElemRect = target.getBoundingClientRect();
                    var horizontalCornerAlignment = this.rightCornerFitsInViewport(viewPort, elemRect, referenceElemRect) ? "left" : "right";
                    var verticalCornerAlignment;
                    if (this.topCornerFitsInViewport(elemRect, referenceElemRect)) {
                        verticalCornerAlignment = this.bottomCornerFitsInViewport(viewPort, elemRect, referenceElemRect) ? "top" : "bottom";
                    } else {
                        verticalCornerAlignment = "top";
                    }
                    component._constraint = this.lib.panelPositioning.createRelationship({
                        element: element,
                        target: target,
                        scrollableParentBound: true,
                        align: horizontalCornerAlignment + " " + verticalCornerAlignment,
                        targetAlign: horizontalCornerAlignment + " " + (verticalCornerAlignment === "top" ? "bottom" : "top"),
                        padTop: 2
                    });
                    
                    
                    
                    
                    setTimeout($A.getCallback(function () {
                        this.lib.panelPositioning.reposition(function () {
                            element.classList.add("positioned");
                            element.style.opacity = 1;
                        });
                    }).bind(this),50);
                    
                }.bind(this)));
            }
        }
    },
    "unposition":function(component) {
        var element = component.find("popupTarget").getElement();
        element.classList.remove("positioned");
        if (component._constraint) {
            component._constraint.destroy();
            component._constraint = undefined;
        }
    },
    "rightCornerFitsInViewport":function(viewPort, elemRect, referenceElemRect) {
        return (viewPort.width - referenceElemRect.left) > elemRect.width;

    },
    "bottomCornerFitsInViewport":function(viewPort, elemRect, referenceElemRect) {
        return (viewPort.height - referenceElemRect.bottom) > elemRect.height;

    },
    "topCornerFitsInViewport":function(elemRect, referenceElemRect) {
        return (referenceElemRect.top > elemRect.height);
    },
    "setAriaAttributes":function(component) {
        var elements = this.getElementCache(component);

        if (elements.triggerElement && elements.target) {
            elements.targetElement.setAttribute("aria-labelledby", elements.trigger.getGlobalId());
        }
    },
    "onVisibleChange":function(component) {
        var elements = this.getElementCache(component),
            visible = elements.target.get("v.visible"),
            transitionEndEventName = this.getTransitionEndEventName(component),
            hideFunc;

        if (elements.target.get('v.closeOnClickOutside') || elements.target.get('v.closeOnClickInside')) {
            if (visible === true) {
                this.addDismissEvents(component);
            } else {
                this.removeDismissEvents(component);
            }
        }

        
        
        hideFunc = function () {
            $A.util.addClass(elements.targetElement, component.get('v.preTransitionClass'));
            $A.util.removeOn(elements.targetElement, transitionEndEventName, hideFunc);
        };

        
        
        
        setTimeout(function () {
            if (!elements.target.isValid()) {
                return;
            }
            if (visible === true) {
                $A.util.removeClass(elements.targetElement, component.get('v.preTransitionClass'));
                $A.util.addClass(elements.targetElement, "visible");
                elements.target.get("e.popupExpand").fire();
            } else {
                $A.util.on(elements.targetElement, transitionEndEventName, hideFunc, false);
                $A.util.removeClass(elements.targetElement, "visible");
                elements.target.get("e.popupCollapse").fire();
            }
        }, 0);
    },
    "getOnClickEventProp":function(prop) {
        var cached;

        
        if ($A.util.isUndefined(this.getOnClickEventProp.cache)) {
            this.getOnClickEventProp.cache = {};
        }

        
        cached = this.getOnClickEventProp.cache[prop];

        if (!$A.util.isUndefined(cached)) {
            return cached;
        }

        
        this.getOnClickEventProp.cache["onClickStartEvent"] = "mousedown";
        this.getOnClickEventProp.cache["onClickEndEvent"] = "mouseup";

        return this.getOnClickEventProp.cache[prop];
    },
    "getOnClickStartFunction":function(component) {
        var func;

        if ($A.util.isUndefined(component._onClickStartFunc)) {
            func = function (event) {
                component._onStartX = event.clientX;
                component._onStartY = event.clientY;
            };

            component._onClickStartFunc = func;
        }

        return component._onClickStartFunc;
    },
    "getOnClickEndFunction":function(component) {
        var helper,
            func;

        if ($A.util.isUndefined(component._onClickEndFunc)) {
            helper = this;
            func = function (event) {
                
                var elements = helper.getElementCache(component),
                    doIf = {
                        clickIsInsideTarget: helper.isElementInComponent(elements.target, event.target),
                        clickIsInsideTrigger: helper.isElementInComponent(elements.trigger, event.target),
                        closeOnClickInside: component.get('v.closeOnClickInside'),
                        closeOnClickOutside: component.get('v.closeOnClickOutside'),
                        clickIsInCurtain: $A.util.hasClass(event.target, 'popupCurtain')
                    };

                if (
                    (doIf.clickIsInsideTarget && doIf.closeOnClickInside) 
                    || (!doIf.clickIsInsideTarget && doIf.closeOnClickOutside && !doIf.clickIsInsideTrigger) 
                    || doIf.clickIsInCurtain 
                ) {
                    component.getConcreteComponent().get("e.doClose").fire();
                }
            };

            component._onClickEndFunc = func;
        }

        return component._onClickEndFunc;
    },
    "getWindowBlurHandler":function(component) {
        if ($A.util.isUndefined(component._windowBlurHandlerFunc)) {
            var elements = this.getElementCache(component);

            component._windowBlurHandlerFunc = function () {
                elements.target.set("v.visible", !elements.target.get("v.visible"));
            };
        }

        return component._windowBlurHandlerFunc;
    },
    "getWindowResizeHandler":function(component) {
        if ($A.util.isUndefined(component._windowResizeHandlerFunc)) {
            component._windowResizeHandlerFunc = function () {
                component.getDef().getHelper().position(component);
            };
        }

        return component._windowResizeHandlerFunc;
    },
    "isElementInComponent":function(component, targetElem) {
        var currentNode = targetElem,
            componentElements;

        if (!component || !targetElem) {
            return false;
        }

        componentElements = component.getElements();

        
        
        
        do {
            for (var i = 0, l = componentElements.length; i < l; i++) {
                if (componentElements[i] === currentNode) {
                    return true;
                }
            }

            
            currentNode = currentNode.parentNode;
        } while (currentNode);

        return false;
    },
    "addDismissEvents":function(component) {
        $A.util.on(document.body, this.getOnClickEventProp("onClickStartEvent"), this.getOnClickStartFunction(component));
        $A.util.on(document.body, this.getOnClickEventProp("onClickEndEvent"), this.getOnClickEndFunction(component));
        
        $A.util.on(window, "blur", this.getWindowBlurHandler(component));
        
        if (this.getElementCache(component).target.get("v.attachToBody")) {
            $A.util.on(window, "resize", this.getWindowResizeHandler(component));
        }
    },
    "removeDismissEvents":function(component) {
        $A.util.removeOn(document.body, this.getOnClickEventProp("onClickStartEvent"), this.getOnClickStartFunction(component));
        $A.util.removeOn(document.body, this.getOnClickEventProp("onClickEndEvent"), this.getOnClickEndFunction(component));
        $A.util.removeOn(window, "blur", this.getWindowBlurHandler(component));
        $A.util.removeOn(window, "resize", this.getWindowResizeHandler(component));
    },
    "handleKeyboardEvent":function() {
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        helper.setAriaAttributes(component);

        if (component.get("v.visible")) {
            helper.position(component);
        }

        component.superAfterRender();
    },
    "rerender":function(component, helper) {
        var ret = component.superRerender();

        helper.onVisibleChange(component);
        helper.setAriaAttributes(component);

        return ret;
    },
    "unrender":function(component, helper) {
    	if (component._localElementCache) {
    		
    		
    		component._localElementCache = undefined;
    	}
    	helper.unposition(component);
        helper.removeDismissEvents(component);
        component.superUnrender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:popupTarget",
  "st":{
    "descriptor":"css://ui.popupTarget",
    "cl":"uiPopupTarget"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,false],
    ["closeOnTabKey","aura://Boolean","G",false,true],
    ["autoPosition","aura://Boolean","G",false,true],
    ["curtain","aura://Boolean","G",false,false],
    ["closeOnClickOutside","aura://Boolean","G",false,true],
    ["attachToBody","aura://Boolean","PP",false,false],
    ["manualPosition","aura://Boolean","I",false,false],
    ["smartAttachToBody","aura://Boolean","I",false,false],
    ["referenceElement","aura://Object","I",false,null],
    ["closeOnClickInside","aura://Boolean","I",false,false],
    ["preTransitionClass","aura://String","I",false,""],
    ["showNubbin","aura://Boolean","I",false,false]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:collapse",
      "n":"doClose",
      "xs":"I"
    },
    {
      "ed":"markup://ui:expand",
      "n":"popupExpand",
      "xs":"I"
    },
    {
      "ed":"markup://ui:collapse",
      "n":"popupCollapse",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleKeyboardEvent"
      },
      "n":"popupKeyboardEvent"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleVisibilityChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.visible"
      },
      "n":"change"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:if"
          },
          "attributes":{
            "values":{
              "isTrue":{
                "descriptor":"isTrue",
                "value":{
                  "exprType":"FUNCTION",
                  "code":"function(cmp,fn){return (cmp.get(\"v.attachToBody\")&&cmp.get(\"v.curtain\"));}",
                  "args":[
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:popupTarget",
                      "path":"v.attachToBody"
                    },
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:popupTarget",
                      "path":"v.curtain"
                    }
                  ],
                  "byValue":false
                }
              },
              "else":{
                "descriptor":"else",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"popupTarget",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return fn.add(fn.add(fn.add(cmp.get(\"v.class\"),\" popupTargetContainer \"),cmp.get(\"v.preTransitionClass\")),(fn.eq(cmp.get(\"v.showNubbin\"),true)?\" menu--nubbin-top\":\"\"));}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:popupTarget",
                                  "path":"v.preTransitionClass"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:popupTarget",
                                  "path":"v.class"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:popupTarget",
                                  "path":"v.showNubbin"
                                }
                              ],
                              "byValue":false
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"div"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:popupTarget",
                                      "path":"v.body"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return fn.add(fn.add(cmp.get(\"v.class\"),\" popupCurtain \"),cmp.get(\"v.preTransitionClass\"));}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:popupTarget",
                                  "path":"v.preTransitionClass"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:popupTarget",
                                  "path":"v.class"
                                }
                              ],
                              "byValue":false
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"div"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "localId":"popupTarget",
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":"popupTargetContainer"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"div"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:popupTarget",
                                                "path":"v.body"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:popupTrigger':function(){/*$A.componentService.addComponentClass("markup://ui:popupTrigger",function() {
return {
  "meta":{
    "name":"ui$popupTrigger",
    "extends":"markup://ui:interactive"
  },
  "controller":{
    "focus":function(component) {
    	var concreteCmp = component.getConcreteComponent();
        
        var _helper = concreteCmp.helper;
        _helper.focus(concreteCmp);
    },
    "onClick":function(component, event) {
        var concreteCmp = component.getConcreteComponent();
        
        var _helper = concreteCmp.helper;
        if ($A.util.getBooleanValue(concreteCmp.get("v.stopClickPropagation"))) {
            $A.util.squash(event.getParam("domEvent"), true);
        }
        _helper.handleClick(component, event);
    },
    "triggerInteraction":function(cmp) {
         cmp.get('c.onClick').run();
    },
    "onPopupToggle":function(component, event, helper) {
    	helper.handlePopupToggle(component, event);
    }
  },
  "helper":{
    "addTriggerDomEvents":function(component) {
        var events = ["click", "keydown"];
        for (var i=0, len=events.length; i < len; i++) {
            if (!component.hasEventHandler(events[i])) {
                this.addDomHandler(component, events[i]);
            }           
        }
    },
    "preEventFiring":function(component, event) {
        if (event.type === "keydown") {
            if (event.keyCode === 32) { 
                $A.util.squash(event, true);
                this.firePopupEvent(component, "e.popupTriggerPress");
            } else if (event.keyCode === 39 || event.keyCode === 40 || event.keyCode === 37 || event.keyCode === 38) { 
                $A.util.squash(event, true);
                this.firePopupEvent(component, "e.popupTargetShow", {
                    event : event
                }); 
            } else if (event.keyCode === 9 || event.keyCode === 27) { 
                this.firePopupEvent(component, "e.popupTargetHide", {
                    event: event
                });
            }
            
            this.firePopupEvent(component, "e.popupKeyboardEvent", {
                event : event
            });
        }
    },
    "handleClick":function(component) {
        this.handleTriggerPress(component);
    },
    "handleTriggerPress":function(component) {
        this.firePopupEvent(component, "e.popupTriggerPress");
    },
    "showTarget":function(component) {
        this.firePopupEvent(component, "e.popupTargetShow");
    },
    "hideTarget":function(component) {
        this.firePopupEvent(component, "e.popupTargetHide");
    },
    "handlePopupToggle":function(component, event) {
        var triggerParams = event.getParams(),
            localTriggerDiv = component.find('popupTriggerElement').getElement(),
            eventTriggerDiv = triggerParams.component.getElement();
        
        if (localTriggerDiv == null) {
            return;
        }
        if ($A.util.contains(localTriggerDiv, eventTriggerDiv)) {
            if (triggerParams.show) {
                this.showTarget(component);
            } else {
                this.hideTarget(component);
            }
        }
    },
    "firePopupEvent":function(component, eventName, params) {
        if (component.get("v.disabled")) {
            return;
        }

        var event = component.getConcreteComponent().get(eventName);
        if (params) {
            event.setParams(params);
        }
        event.fire();
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        helper.addTriggerDomEvents(component);
        return component.superAfterRender();
    },
    "rerender":function(component, helper) {
        helper.addTriggerDomEvents(component);
        return component.superRerender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:popupTrigger",
  "st":{
    "descriptor":"css://ui.popupTrigger",
    "cl":"uiPopupTrigger"
  },
  "su":"markup://ui:interactive",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["disableDoubleClicks","aura://Boolean","I",false,false],
    ["disabled","aura://Boolean","G",false,false],
    ["label","aura://String","G",false],
    ["title","aura://String","G",false,""],
    ["trigger","aura://Aura.Component[]","I",false,[]],
    ["stopClickPropagation","aura://Boolean","I",false,false]
  ],
  "med":[
    {
      "name":"ui:triggerInteraction",
      "xs":"I"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetShow",
      "n":"popupTargetShow",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetHide",
      "n":"popupTargetHide",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTriggerPress",
      "n":"popupTriggerPress",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "ed":{
        "descriptor":"markup://ui:popupTargetToggle"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onPopupToggle"
      }
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"popupTrigger",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "id":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:popupTrigger",
                    "path":"globalId"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"FUNCTION",
                            "code":"function(cmp,fn){return (cmp.get(\"v.trigger.length\")>0);}",
                            "args":[
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:popupTrigger",
                                "path":"v.trigger.length"
                              }
                            ],
                            "byValue":false
                          }
                        },
                        "else":{
                          "descriptor":"else",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "localId":"popupTriggerElement",
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:popupTrigger",
                                        "path":"v.class"
                                      },
                                      "aria-disabled":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:popupTrigger",
                                        "path":"v.disabled"
                                      },
                                      "aria-haspopup":"true",
                                      "tabindex":{
                                        "exprType":"FUNCTION",
                                        "code":"function(cmp,fn){return (cmp.get(\"v.disabled\")? -(1):0);}",
                                        "args":[
                                          {
                                            "exprType":"PROPERTY",
                                            "byValue":false,
                                            "target":"ui:popupTrigger",
                                            "path":"v.disabled"
                                          }
                                        ],
                                        "byValue":false
                                      },
                                      "onclick":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:popupTrigger",
                                        "path":"c.onClick"
                                      },
                                      "title":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:popupTrigger",
                                        "path":"v.title"
                                      }
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"a"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:if"
                                        },
                                        "attributes":{
                                          "values":{
                                            "isTrue":{
                                              "descriptor":"isTrue",
                                              "value":{
                                                "exprType":"FUNCTION",
                                                "code":"function(cmp,fn){return fn.ne(cmp.get(\"v.label\"),null);}",
                                                "args":[
                                                  {
                                                    "exprType":"PROPERTY",
                                                    "byValue":false,
                                                    "target":"ui:popupTrigger",
                                                    "path":"v.label"
                                                  }
                                                ],
                                                "byValue":false
                                              }
                                            },
                                            "else":{
                                              "descriptor":"else",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:popupTrigger",
                                                          "path":"v.body"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:popupTrigger",
                                                          "path":"v.label"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"assistiveText"
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"span"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:popupTrigger",
                                                          "path":"v.title"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "localId":"popupTriggerElement",
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{

                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"div"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:popupTrigger",
                                                "path":"v.trigger"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:inputDefaultError':function(){/*$A.componentService.addComponentClass("markup://ui:inputDefaultError",function() {
return {
  "meta":{
    "name":"ui$inputDefaultError",
    "extends":"markup://aura:component"
  },
  "controller":{
    "doInit":function(component) {
        var domId = component.get('v.domId');

		if (!domId) {
            var globalId = component.getGlobalId();
			component.set("v.domId", globalId);
		}
	}
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:inputDefaultError",
  "st":{
    "descriptor":"css://ui.inputDefaultError",
    "cl":"uiInputDefaultError"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://String[]","G",false,[]],
    ["visible","aura://Boolean","I",false,true],
    ["errors","aura://Object[]","PP",false,[]],
    ["domId","aura://String","I",false]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.doInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:if"
          },
          "attributes":{
            "values":{
              "isTrue":{
                "descriptor":"isTrue",
                "value":{
                  "exprType":"FUNCTION",
                  "code":"function(cmp,fn){return (!(fn.empty(cmp.get(\"v.value\")))||!(fn.empty(cmp.get(\"v.errors\"))));}",
                  "args":[
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:inputDefaultError",
                      "path":"v.errors"
                    },
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:inputDefaultError",
                      "path":"v.value"
                    }
                  ],
                  "byValue":false
                }
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return fn.add(cmp.get(\"v.class\"),\" has-error\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:inputDefaultError",
                                  "path":"v.class"
                                }
                              ],
                              "byValue":false
                            },
                            "id":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputDefaultError",
                              "path":"v.domId"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"ul"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:iteration"
                              },
                              "attributes":{
                                "values":{
                                  "var":{
                                    "descriptor":"var",
                                    "value":"message"
                                  },
                                  "items":{
                                    "descriptor":"items",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:inputDefaultError",
                                      "path":"v.value"
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"form-element__help"
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"li"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:inputDefaultError",
                                                          "path":"message"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:iteration"
                              },
                              "attributes":{
                                "values":{
                                  "var":{
                                    "descriptor":"var",
                                    "value":"error"
                                  },
                                  "items":{
                                    "descriptor":"items",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:inputDefaultError",
                                      "path":"v.errors"
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"form-element__help"
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"li"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:inputDefaultError",
                                                          "path":"error.message"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:label':function(){/*$A.componentService.addComponentClass("markup://ui:label",function() {
return {
  "meta":{
    "name":"ui$label",
    "extends":"markup://aura:component"
  },
  "helper":{
    "updateAttribute":function(cmp) {

        var forVal = cmp.get("v.for");
        if (forVal) {
        	var gId;
        	if ($A.util.isString(forVal)) {
                var valueProvider = cmp.getAttributeValueProvider();
                

 				
				var refCmp = valueProvider.find && valueProvider.find(forVal);

                if (refCmp) {
                	
                	refCmp = refCmp.length ? refCmp[0] : refCmp;
                	gId = refCmp.getGlobalId();
                } else {
                	
                	gId = $A.componentService.get(forVal) ? forVal : null;
                }
        	} else if ($A.util.isObject(forVal) && forVal.getGlobalId) {
        		gId = forVal.getGlobalId();
        	}

        	if (!$A.util.isEmpty(gId)) {
        		
                var elm = cmp.getElement();
                if (elm) {
                    elm.setAttribute("for", gId);
                }
            }
        }
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {     
    	component.superAfterRender();
    	
    	
    	helper.updateAttribute(component);    	
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:label",
  "st":{
    "descriptor":"css://ui.label",
    "cl":"uiLabel"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["label","aura://String","PP",false],
    ["title","aura://String","I",false],
    ["class","aura://String","PP",false],
    ["labelDisplay","aura://Boolean","I",false,true],
    ["for","aura://Object","PP",false,null],
    ["requiredIndicator","aura://Aura.Component[]","I",false,[]]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"labelElement",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.join(\" \",cmp.get(\"v.class\"),fn.token(\"uiLabel.label\"),(cmp.get(\"v.labelDisplay\")?null:fn.token(\"uiLabel.assistive\")));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:label",
                        "path":"v.class"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:label",
                        "path":"v.labelDisplay"
                      }
                    ],
                    "byValue":false
                  },
                  "for":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:label",
                    "path":"v.for"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"label"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.labelDisplay\")?null:\"assistiveText\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:label",
                                  "path":"v.labelDisplay"
                                }
                              ],
                              "byValue":false
                            },
                            "title":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:label",
                              "path":"v.title"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"span"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:label",
                                      "path":"v.label"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:label",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:label",
                            "path":"v.requiredIndicator"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:legend':function(){/*$A.componentService.addComponentClass("markup://ui:legend",function() {
return {
  "meta":{
    "name":"ui$legend",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:legend",
  "st":{
    "descriptor":"css://ui.legend",
    "cl":"uiLegend"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["legend","aura://String","I",false],
    ["title","aura://String","I",false],
    ["class","aura://String","I",false],
    ["labelDisplay","aura://Boolean","I",false,true],
    ["requiredIndicator","aura://Aura.Component[]","I",false,[]]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"legendElement",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:legend",
                    "path":"v.class"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"legend"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:legend",
                            "path":"v.requiredIndicator"
                          }
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.labelDisplay\")?null:\"assistiveText\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:legend",
                                  "path":"v.labelDisplay"
                                }
                              ],
                              "byValue":false
                            },
                            "title":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:legend",
                              "path":"v.title"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"span"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:legend",
                                      "path":"v.legend"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:legend",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:menu':function(){/*$A.componentService.addComponentClass("markup://ui:menu",function() {
return {
  "meta":{
    "name":"ui$menu",
    "extends":"markup://ui:popup"
  },
  "controller":{
    "focusTrigger":function(component, event, helper) {
    	var trigger = helper.getTriggerComponent(component);
    	if (trigger) {
    		var action = trigger.get("c.focus");
    		action.runDeprecated();
    	}
    }
  },
  "helper":{
    "handleRefresh":function(component) {
        var menuList = this.getTargetComponent(component);
        if (menuList) {
            menuList.get("e.refresh").fire();
        }
    },
    "setTargetEventHandlers":function(component, targetComponent) {
        this.addCloseHandler(component, targetComponent);

        var focusActionHandler = $A.expressionService.create(component, component.getConcreteComponent().get('c.focusTrigger'));
        targetComponent.set("v.focusTrigger", focusActionHandler);
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
    	var target = helper.getTargetComponent(component);
    	var trigger = helper.getTriggerComponent(component);
    	if (target && trigger) {
            target.set("v.referenceElement", trigger.getElement());
    	}

    	return component.superAfterRender();
	}
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:menu",
  "st":{
    "descriptor":"css://ui.menu",
    "cl":"uiMenu"
  },
  "su":"markup://ui:popup",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetShow",
      "n":"popupTargetShow",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetHide",
      "n":"popupTargetHide",
      "xs":"I"
    },
    {
      "ed":"markup://ui:refresh",
      "n":"refresh",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTriggerPress",
      "n":"popupTriggerPress",
      "xs":"I"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:menu",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:menuList':function(){/*$A.componentService.addComponentClass("markup://ui:menuList",function() {
return {
  "meta":{
    "name":"ui$menuList",
    "extends":"markup://ui:popupTarget"
  },
  "controller":{
    "handleVisibilityChange":function(component) {
        if (!component.get("v.hasMenuOpened") && component.get("v.visible")) {
            component.set("v.hasMenuOpened", true);
        }
    },
    "onMenuItemSelected":function(component, event, helper) {
        helper.onMenuItemSelected(component, event);
    },
    "onKeyboardEvent":function(component, event, helper) {
        var originalEvent = event.getParam("event");

        if (originalEvent.type !== "keydown") {
            return;
        }

        var downArrowKeyCode = 40;
        var upArrowKeyCode = 38;
        var keyCode = originalEvent.keyCode;
        if (keyCode === downArrowKeyCode || keyCode === upArrowKeyCode) {
            originalEvent.preventDefault();
            window.requestAnimationFrame($A.getCallback(function() {
                helper.setMenuItemFocus(component, 0);
            }));
        } else {
            var isPrintableCharacter =
                (keyCode >= 48 && keyCode <= 57)
                || (keyCode >= 65 && keyCode <= 90);
            var isVisible = component.get("v.visible");
            
            var triggerTypeAheadEnabled = component.get("v.triggerTypeAhead") || isVisible;
            if (triggerTypeAheadEnabled && isPrintableCharacter) {
                $A.util.squash(originalEvent, true);
                if (!isVisible) {
                    component.set("v.visible", true);
                }
                window.requestAnimationFrame($A.getCallback(function() {
                    helper.setFocusToTypingChars(component, originalEvent);
                }));
            }
        }
    },
    "update":function(component, event, helper) {
        var _helper = component.getConcreteComponent().getDef().getHelper() || helper;
        _helper.setEventHandlersOnChildren(component);

        if(event.getPhase() !== "default") {
            event.stopPropagation();
        }
    }
  },
  "helper":{
    "setEventHandlersOnChildren":function(component) {
    	var concrete = component.getConcreteComponent();
        var children = [];

        var existingChildren = concrete.get("v.childMenuItems") || [];

        this.setHandlersOnMenuItems(concrete, concrete.get("v.body"), children, existingChildren);

        var items = component.find("item");
        if (items && $A.util.isArray(items)) {
            this.setHandlersOnMenuItems(concrete, items, children, existingChildren);
        }
        concrete.set("v.childMenuItems", children);
    },
    "setHandlersOnMenuItems":function(component, items, children, existingChildren) {
        for (var i = 0; i < items.length; i++) {
            var child = items[i];
            if (child.isInstanceOf("ui:menuItem")) {
                if (existingChildren && existingChildren.indexOf(child) === -1) {
                    child.addHandler("menuSelect", component, "c.onMenuItemSelected");
                }
                children.push(child);
            } else if (child.isInstanceOf("aura:iteration") || child.isInstanceOf("aura:if")) {
                this.setHandlersOnMenuItems(component, child.get("v.body"), children, existingChildren);
            } else if (child.isInstanceOf("ui:menuListProvider")) {
                this.setHandlersOnMenuItems(component, child.getSuper().get("v.body"), children, existingChildren);
            } else if (child.isInstanceOf("aura:expression")) {
                this.setHandlersOnMenuItems(component, child.get("v.value"), children, existingChildren);
            }
        }
    },
    "getMenuItem":function(component, index) {
        var menuItems = component.get("v.childMenuItems");
        if (menuItems) {
            return menuItems[index];
        }
    },
    "handleVisible":function(component) {
        var elements = this.getElementCache(component),
            visible = elements.target.get("v.visible");

        if ($A.util.hasClass(elements.targetElement, "visible") === visible) {
            return;
        }

        if (visible === true) {
            $A.util.addClass(elements.targetElement, "visible");
            elements.target.get("e.menuExpand").fire();
        } else {
            $A.util.removeClass(elements.targetElement, "visible");
            elements.target.get("e.menuCollapse").fire();
        }
    },
    "setMenuItemFocus":function(component, index) {
        var menuItem = this.getMenuItem(component, index);
        if (menuItem && menuItem.isValid() && menuItem.getElement()) {
            
            
            
            setTimeout($A.getCallback(function () {
                menuItem.setFocus();
                this.fireMenuFocusChangeEvent(component, null, menuItem);
            }).bind(this),5);
        }
    },
    "setKeyboardEventHandlers":function(component) {
    	var el = component.find("datalist").getElement();
    	$A.util.on(el, "keydown", this.getKeyboardInteractionHandler(component));
    },
    "removeKeyboardEventHandlers":function(component) {
    	var el = component.find("datalist").getElement();
    	$A.util.removeOn(el, "keydown", this.getKeyboardInteractionHandler(component));
    	delete component._keyboardEventHandler;
    },
    "getKeyboardInteractionHandler":function(component) {
    	var helper = this;
    	if (!component._keyboardEventHandler) {
    		component._keyboardEventHandler = function(event) {
                
                
                
    			var concreteCmp = component.getConcreteComponent();
    			if (event.type === "keydown") {
    				if (event.keyCode === 40) {  
    					event.preventDefault();
    					helper.setFocusToNextItem(concreteCmp, event);
    				} else if (event.keyCode === 38) {  
    					event.preventDefault();
    					helper.setFocusToPreviousItem(concreteCmp, event);
    				} else if (event.keyCode === 27) {  
    					event.stopPropagation();
    					helper.handleEsckeydown(concreteCmp, event);
    				} else if (event.keyCode === 9) {  
    					helper.handleTabkeydown(concreteCmp, event);
    				} else {
    					helper.setFocusToTypingChars(concreteCmp, event);
    				}
    			}
    		};
    	}
    	return component._keyboardEventHandler;
    },
    "handleEsckeydown":function(component) {
        component.getConcreteComponent().get("e.doClose").fire();
        
        this.setFocusToTrigger(component);
    },
    "setFocusToTrigger":function(component) {
    	var action =  component.get("v.focusTrigger");
    	if (action) {
    		action.runDeprecated();
    	}
    },
    "setFocusToNextItem":function(component, event) {
        var nextIndex = 0;

        var menuItems = component.get("v.childMenuItems");

        if (event) {
            var srcComponent = this.getComponentForElement(event.target || event.srcElement);

            for (var i = 0; i < menuItems.length; i++) {
                if (srcComponent === menuItems[i]) {
                    nextIndex = ++i;
                            break;
                        }
                    }
            if (nextIndex >= menuItems.length) {
                nextIndex = 0;
            }
        }

        var nextFocusCmp = menuItems[nextIndex];
        nextFocusCmp.setFocus();

        this.fireMenuFocusChangeEvent(component, srcComponent, nextFocusCmp);
    },
    "setFocusToPreviousItem":function(component, event) {
        var previousIndex = 0;
        var srcComponent = this.getComponentForElement(event.target || event.srcElement);
        var menuItems = component.get("v.childMenuItems");
        for (var i = 0; i < menuItems.length; i++) {
            if (srcComponent === menuItems[i]) {
                previousIndex = --i;
                break;
            }
        }
        if (previousIndex < 0) {
            previousIndex = menuItems.length - 1;
        }
        var previousFocusCmp = menuItems[previousIndex];
        previousFocusCmp.setFocus();

        this.fireMenuFocusChangeEvent(component, srcComponent, previousFocusCmp);
    },
    "fireMenuFocusChangeEvent":function(component, previousItem, currentItem) {
    	var event = component.getEvent("menuFocusChange");
    	event.setParams({
			"previousItem": previousItem,
			"currentItem": currentItem
		});
    	event.fire();
    },
    "handleTabkeydown":function(component) {
		var closeOnTab = component.get('v.closeOnTabKey');
        var concreteComponent = component.getConcreteComponent();
        if (concreteComponent && closeOnTab) {
            if (component.get("v.attachToBody")) {
                this.setFocusToTrigger(component);
            }
            concreteComponent.get("e.doClose").fire();
        }
    },
    "setFocusToTypingChars":function(component, event) {
        
        if (!$A.util.isUndefinedOrNull(component._clearBufferId)) {
            clearTimeout(component._clearBufferId);
        }

        
        var letter = String.fromCharCode(event.keyCode);
        component._keyBuffer = component._keyBuffer || [];
        component._keyBuffer.push(letter);

        
        var srcComponent = this.getComponentForElement(event.target || event.srcElement);
        var matchText = component._keyBuffer.join("").toLowerCase();
        var menuItems = component.get("v.childMenuItems");
        for(var i = 0; i < menuItems.length; i++) {
            var c = menuItems[i];
            var text = c.get("v.label");
            if(text && text.toLowerCase().indexOf(matchText) === 0) {
                c.setFocus();
                this.fireMenuFocusChangeEvent(component, srcComponent, c);
                break;
            }
        }

        component._clearBufferId = setTimeout(function() {
        	component._keyBuffer = [];
        }, 700);
    },
    "deselectSiblings":function(component, selectedItem) {
          var children = component.get("v.childMenuItems");
          for (var i = 0; i < children.length; i++) {
              var c = children[i];
              if (c.isInstanceOf("ui:radioMenuItem") &&
                      $A.util.getBooleanValue(c.get("v.selected")) &&
                      c.getGlobalId() !== selectedItem.getGlobalId()) {
                  c.set("v.selected", false);
                  break;
              }
          }
    },
    "onMenuItemSelected":function(component, event) {
        var concrete = component.getConcreteComponent();

        var deselectSiblings = event.getParam("deselectSiblings");
        if (deselectSiblings === true) {
            this.deselectSiblings(component, event.getSource());
        }

        var hideMenu = event.getParam("hideMenu");
        if (hideMenu === true) {
            concrete.set("v.visible", false);
        }

        var focusTrigger = event.getParam("focusTrigger");
        if (focusTrigger === true) {
            this.setFocusToTrigger(component);
        }

        if (component.isValid()) {
            component.get("e.menuSelect").fire(event.getParams());
        }
    },
    "getComponentForElement":function(element) {
    	var htmlCmp = $A.componentService.getRenderingComponentForElement(element);
    	return htmlCmp ? htmlCmp.getComponentValueProvider().getConcreteComponent() : null;
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        component.superAfterRender();

    	helper.setKeyboardEventHandlers(component);
        helper.setEventHandlersOnChildren(component);

        if (component.get("v.visible")) {
            component.set("v.hasMenuOpened", true);
        }
    },
    "rerender":function(component, helper) {
        if (!component.isDirty("v.childMenuItems")) {
            helper.setEventHandlersOnChildren(component);
        }
        helper.handleVisible(component);
        return component.superRerender();
    },
    "unrender":function(component, helper) {
        try {
            helper.removeKeyboardEventHandlers(component);
        } finally {
            return component.superUnrender();
        }
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:menuList",
  "st":{
    "descriptor":"css://ui.menuList",
    "cl":"uiMenuList"
  },
  "fst":{
    "descriptor":"css://ui.menuList"
  },
  "su":"markup://ui:popupTarget",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false,"menu"],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","G",false,false],
    ["closeOnTabKey","aura://Boolean","G",false,true],
    ["autoPosition","aura://Boolean","G",false,true],
    ["curtain","aura://Boolean","G",false,false],
    ["closeOnClickOutside","aura://Boolean","G",false,true],
    ["attachToBody","aura://Boolean","PP",false,false],
    ["manualPosition","aura://Boolean","I",false,false],
    ["smartAttachToBody","aura://Boolean","I",false,false],
    ["referenceElement","aura://Object","I",false,null],
    ["closeOnClickInside","aura://Boolean","I",false,false],
    ["preTransitionClass","aura://String","I",false,""],
    ["showNubbin","aura://Boolean","I",false,false],
    ["menuItems","aura://List","G",false,[]],
    ["focusItemIndex","aura://Integer","I",false,0],
    ["focusTrigger","aura://Aura.Action","I",false,null],
    ["headerText","aura://String","I",false],
    ["childMenuItems","aura://Aura.Component[]","I",false,[]],
    ["triggerTypeAhead","aura://Boolean","I",false,false],
    ["hasMenuOpened","aura://Boolean","p",false,false]
  ],
  "med":[
    {
      "name":"ui:update",
      "xs":"I",
      "action":"{!c.update}"
    }
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:collapse",
      "n":"doClose",
      "xs":"I"
    },
    {
      "ed":"markup://ui:expand",
      "n":"popupExpand",
      "xs":"I"
    },
    {
      "ed":"markup://ui:collapse",
      "n":"popupCollapse",
      "xs":"I"
    },
    {
      "ed":"markup://ui:expand",
      "n":"menuExpand",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuSelect",
      "n":"menuSelect",
      "xs":"G"
    },
    {
      "ed":"markup://ui:refresh",
      "n":"refresh",
      "xs":"I"
    },
    {
      "ed":"markup://ui:collapse",
      "n":"menuCollapse",
      "xs":"G"
    },
    {
      "ed":"markup://ui:menuFocusChange",
      "n":"menuFocusChange",
      "xs":"G"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onKeyboardEvent"
      },
      "n":"popupKeyboardEvent"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.update"
      },
      "n":"refresh"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.update"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.body"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleVisibilityChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.visible"
      },
      "n":"change"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"menu",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:menuList",
                    "path":"v.class"
                  },
                  "role":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:menuList",
                    "path":"v.role"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"FUNCTION",
                            "code":"function(cmp,fn){return fn.ne(cmp.get(\"v.headerText\"),null);}",
                            "args":[
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:menuList",
                                "path":"v.headerText"
                              }
                            ],
                            "byValue":false
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":"menu__header"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"div"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"text-heading--label"
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"span"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"v.headerText"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"datalist",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"scrollable",
                            "role":"presentation"
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"ul"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:menuList",
                                      "path":"v.hasMenuOpened"
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:iteration"
                                        },
                                        "attributes":{
                                          "values":{
                                            "var":{
                                              "descriptor":"var",
                                              "value":"item"
                                            },
                                            "items":{
                                              "descriptor":"items",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:menuList",
                                                "path":"v.menuItems"
                                              }
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://ui:menuItem"
                                                  },
                                                  "localId":"item",
                                                  "attributes":{
                                                    "values":{
                                                      "class":{
                                                        "descriptor":"class",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.className"
                                                        }
                                                      },
                                                      "label":{
                                                        "descriptor":"label",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.label"
                                                        }
                                                      },
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.value"
                                                        }
                                                      },
                                                      "selected":{
                                                        "descriptor":"selected",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.selected"
                                                        }
                                                      },
                                                      "type":{
                                                        "descriptor":"type",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.type"
                                                        }
                                                      },
                                                      "disabled":{
                                                        "descriptor":"disabled",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.disabled"
                                                        }
                                                      },
                                                      "hideMenuAfterSelected":{
                                                        "descriptor":"hideMenuAfterSelected",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:menuList",
                                                          "path":"item.hideMenuAfterSelected"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:menuList",
                                                "path":"v.body"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "df":"default",
  "dyf":true,
  "css":true
}*/},'markup://ui:menuTriggerLink':function(){/*$A.componentService.addComponentClass("markup://ui:menuTriggerLink",function() {
return {
  "meta":{
    "name":"ui$menuTriggerLink",
    "extends":"markup://ui:popupTrigger"
  },
  "controller":{
    "init":function(component, event, helper) {
        helper.initializeHandlers(component);
    },
    "onblur":function(component) {
        component.get("e.blur").fire();
    },
    "onfocus":function(component) {
        component.get("e.focus").fire();
    },
    "onClick":function(component, event, helper) {
        if (component._recentlyClicked) {
            return false;
        }

        if (event && $A.util.getBooleanValue(component.get("v.stopClickPropagation"))) {
            $A.util.squash(event);
        }

        var concreteCmp = component.getConcreteComponent();
        var concreteHelper = concreteCmp.helper;
        concreteHelper.handleTriggerPress(concreteCmp);
        helper.fireMenuTriggerPress(component);

        if ($A.util.getBooleanValue(component.get("v.disableDoubleClicks"))) {
            component._recentlyClicked = true;
            window.setTimeout($A.getCallback(function() { component._recentlyClicked = false; }), 350);
        }
    },
    "focus":function(component) {
        var concreteCmp = component.getConcreteComponent();
        
        var concreteHelper = concreteCmp.helper;
        if (concreteHelper.focus) {
        	concreteHelper.focus(concreteCmp);
        }
    }
  },
  "helper":{
    "initializeHandlers":function(cmp) {
        var html       = cmp.find('link');
        var htmlAttr   = html.get('v.HTMLAttributes');
        var dispatcher = cmp.getConcreteComponent().getEventDispatcher();

        if (dispatcher.focus && dispatcher.focus["bubble"] && dispatcher.focus["bubble"].length) {
            htmlAttr.onfocus = cmp.getReference('c.onfocus');
        }

        if (dispatcher.blur && dispatcher.blur["bubble"] && dispatcher.blur["bubble"].length) {
            htmlAttr.onblur = cmp.getReference('c.onblur');
        }
    },
    "focus":function(component) {
        var linkCmp = this.getAnchorElement(component);
        var elem = linkCmp ? linkCmp.getElement() : null;
        if (elem && elem.focus) {
            elem.focus();
        }
    },
    "getAnchorElement":function(component) {
        
        var localId = "link",
            cmp =  component.getConcreteComponent();
        var retCmp = null;
        while (cmp) {
            retCmp = cmp.find(localId);
            if (retCmp) {
                break;
            }
            cmp = cmp.getSuper();
        }
        return retCmp;
    },
    "handleClick":function(component) {
        var concreteCmp = component.getConcreteComponent();
        this.handleTriggerPress(concreteCmp);
        this.fireMenuTriggerPress(concreteCmp);
    },
    "fireMenuTriggerPress":function(component) {
        component.get("e.menuTriggerPress").fire();
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:menuTriggerLink",
  "su":"markup://ui:popupTrigger",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["disableDoubleClicks","aura://Boolean","I",false,false],
    ["disabled","aura://Boolean","G",false,false],
    ["label","aura://String","G",false],
    ["title","aura://String","G",false,""],
    ["trigger","aura://Aura.Component[]","I",false,[]],
    ["stopClickPropagation","aura://Boolean","I",false,false],
    ["ariaLabel","aura://String","I",false],
    ["ariaRequired","aura://Boolean","I",false]
  ],
  "med":[
    {
      "name":"ui:triggerInteraction",
      "xs":"I"
    },
    {
      "name":"ui:setFocus",
      "xs":"I",
      "action":"{!c.focus}"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:popupKeyboardEvent",
      "n":"popupKeyboardEvent",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetShow",
      "n":"popupTargetShow",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTargetHide",
      "n":"popupTargetHide",
      "xs":"I"
    },
    {
      "ed":"markup://ui:popupTriggerPress",
      "n":"popupTriggerPress",
      "xs":"I"
    },
    {
      "ed":"markup://ui:menuTriggerPress",
      "n":"menuTriggerPress",
      "xs":"G"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "link":{
      "description":"Menu trigger link",
      "alias":"menu-trigger-link",
      "isPrimitive":true
    }
  },
  "fa":[
    {
      "descriptor":"trigger",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"menuTrigger",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{

                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"link",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "aria-required":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.ariaRequired"
                            },
                            "class":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.class"
                            },
                            "aria-disabled":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.disabled"
                            },
                            "aria-describedby":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.ariaDescribedBy"
                            },
                            "aria-haspopup":"true",
                            "tabindex":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.disabled\")? -(1):0);}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:menuTriggerLink",
                                  "path":"v.disabled"
                                }
                              ],
                              "byValue":false
                            },
                            "role":"button",
                            "onclick":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"c.onClick"
                            },
                            "aria-label":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.ariaLabel"
                            },
                            "title":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:menuTriggerLink",
                              "path":"v.title"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"a"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"FUNCTION",
                                      "code":"function(cmp,fn){return fn.eq(cmp.get(\"v.body.length\"),0);}",
                                      "args":[
                                        {
                                          "exprType":"PROPERTY",
                                          "byValue":false,
                                          "target":"ui:menuTriggerLink",
                                          "path":"v.body.length"
                                        }
                                      ],
                                      "byValue":false
                                    }
                                  },
                                  "else":{
                                    "descriptor":"else",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:menuTriggerLink",
                                                "path":"v.body"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:menuTriggerLink",
                                                "path":"v.label"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:picklistLabel':function(){/*$A.componentService.addComponentClass("markup://ui:picklistLabel",function() {
return {
  "meta":{
    "name":"ui$picklistLabel",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:picklistLabel",
  "st":{
    "descriptor":"css://ui.picklistLabel",
    "cl":"uiPicklistLabel"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["domId","aura://String","I",false],
    ["label","aura://String","I",false],
    ["title","aura://String","I",false],
    ["class","aura://String","I",false],
    ["labelDisplay","aura://Boolean","I",false,true],
    ["requiredIndicator","aura://Aura.Component[]","I",false,[]]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"spanElement",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:picklistLabel",
                    "path":"v.class"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"span"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.labelDisplay\")?null:\"assistiveText\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:picklistLabel",
                                  "path":"v.labelDisplay"
                                }
                              ],
                              "byValue":false
                            },
                            "id":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:picklistLabel",
                              "path":"v.domId"
                            },
                            "title":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:picklistLabel",
                              "path":"v.title"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"span"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:picklistLabel",
                                      "path":"v.label"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:picklistLabel",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:picklistLabel",
                            "path":"v.requiredIndicator"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:button':function(){/*$A.componentService.addComponentClass("markup://ui:button",function() {
return {
  "meta":{
    "name":"ui$button",
    "extends":"markup://aura:component"
  },
  "controller":{
    "init":function(cmp, event, helper) {
        helper.initializeHandlers(cmp);
        helper.validateButtonType(cmp);
    },
    "addHandler":function(cmp, event, helper) {
        var params = event.getParam('arguments');
        helper.addHandler(cmp, params);
    },
    "keydown":function(cmp, event) {
        var keydownEvent = cmp.getEvent("keydown");
        keydownEvent.setParams({"domEvent": event});
        keydownEvent.fire();
    },
    "mouseover":function(cmp, event, helper) {
        helper.catchAndFireEvent(cmp, event, 'mouseover');
    },
    "mouseout":function(cmp, event, helper) {
        helper.catchAndFireEvent(cmp, event, 'mouseout');
    },
    "focus":function(cmp, event, helper) {
        helper.catchAndFireEvent(cmp, event, 'focus');
    },
    "blur":function(cmp, event, helper) {
        helper.catchAndFireEvent(cmp, event, 'blur');
    },
    "press":function(cmp, event, helper) {
        helper.catchAndFireEvent(cmp, event, 'press');
    }
  },
  "helper":{
    "EVENT_DISPATCH":{
      "keydown":"onkeydown",
      "mouseover":"onmouseover",
      "mouseout":"onmouseout",
      "focus":"onfocus",
      "blur":"onblur",
      "press":"onclick"
    },
    "VALID_BUTTON_TYPES":[
      "submit",
      "button",
      "reset"
    ],
    "initializeHandlers":function(cmp) {
        var htmlButton = cmp.find('button');
        var htmlAttr   = htmlButton.get('v.HTMLAttributes');
        var dispatcher = cmp.getConcreteComponent().getEventDispatcher();

        for (var e in this.EVENT_DISPATCH) {
            if (dispatcher[e] && dispatcher[e]["bubble"] && dispatcher[e]["bubble"].length) {
                htmlAttr[this.EVENT_DISPATCH[e]] = cmp.getReference('c.' + e);
            }
        }
    },
    "validateButtonType":function(cmp) {
        var buttonType = cmp.get("v.buttonType");
        if(this.VALID_BUTTON_TYPES.indexOf(buttonType.toLowerCase()) === -1) {
            
            cmp.set("v.buttonType", "submit");
        }
    },
    "addHandler":function(cmp, handlerParams) {
        var eventName = handlerParams.eventName;
        var htmlEventName = this.EVENT_DISPATCH[eventName];
        $A.assert(htmlEventName, 'Type of event not supported');

        var valueProvider = handlerParams.valueProvider;
        var actionExpression = handlerParams.actionExpression;
        var uiButton = cmp;
        while (!(uiButton.getDef().getDescriptor().getQualifiedName() === "markup://ui:button")) {
            uiButton = uiButton.getSuper();
        }
        var htmlButton = uiButton.find('button');
        var originalAddHandler = htmlButton.addHandler;
        var htmlAttr = htmlButton.get('v.HTMLAttributes');

        
        htmlAttr[htmlEventName] = cmp.getReference('c.' + eventName);
        
        htmlButton.set('v.HTMLAttributes', htmlAttr);

        
        originalAddHandler.call(cmp, eventName, valueProvider, actionExpression);

    },
    "catchAndFireEvent":function(cmp, event, eventName) {
        if (eventName === 'press' && $A.util.getBooleanValue(cmp.get("v.stopPropagation"))) {
            $A.util.squash(event);
        }

        if ($A.util.getBooleanValue(cmp.get("v.disabled"))) {
            return event.preventDefault();
        }

        cmp.getEvent(eventName).fire({"domEvent": event});
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://ui:button",
  "st":{
    "descriptor":"css://ui.button",
    "cl":"uiButton"
  },
  "fst":{
    "descriptor":"css://ui.button"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["buttonTitle","aura://String","G",false],
    ["buttonType","aura://String","G",false,"button"],
    ["class","aura://String","G",false,""],
    ["variant","aura://String","PP",false,""],
    ["label","aura://String","G",false],
    ["labelClass","aura://String","G",false,""],
    ["labelDisplay","aura://Boolean","I",false,true],
    ["iconImgSrc","aura://String","I",false,""],
    ["iconClass","aura://String","I",false,""],
    ["selectedClass","aura://String","I",false,"is-selected"],
    ["notSelectedClass","aura://String","I",false,"not-selected"],
    ["classList","aura://String","p",false,""],
    ["disabled","aura://Boolean","G",false,false],
    ["accesskey","aura://String","G",false],
    ["labelDir","aura://String","I",false,"ltr"],
    ["stopPropagation","aura://Boolean","I",false,false],
    ["tabIndex","aura://Integer","I",false],
    ["stateful","aura://Boolean","I",false,false],
    ["selected","aura://Boolean","I",false,false]
  ],
  "med":[
    {
      "name":"ui:addHandler",
      "xs":"I",
      "attributes":[
        ["eventName","aura://String","I",false],
        ["valueProvider","aura://Object","I",false,null],
        ["actionExpression","aura://Aura.Action","I",false,null]
      ]
    }
  ],
  "re":[
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur"
    },
    {
      "ed":"markup://ui:press",
      "n":"press",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "button":{
      "description":"Simple UI button",
      "isPrimitive":true
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"button",
          "flavorable":true,
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.join(\" \",(cmp.get(\"v.variant\")||fn.token(\"uiButton.button\")),(cmp.get(\"v.stateful\")?(cmp.get(\"v.selected\")?fn.add(\"is-selected \",fn.token(\"uiButton.is-selected\")):fn.add(\"not-selected \",fn.token(\"uiButton.not-selected\"))):\"\"),cmp.get(\"v.class\"));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:button",
                        "path":"v.variant"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:button",
                        "path":"v.class"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:button",
                        "path":"v.stateful"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:button",
                        "path":"v.selected"
                      }
                    ],
                    "byValue":false
                  },
                  "accesskey":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:button",
                    "path":"v.accesskey"
                  },
                  "aria-live":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return (cmp.get(\"v.stateful\")?\"assertive\":\"off\");}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:button",
                        "path":"v.stateful"
                      }
                    ],
                    "byValue":false
                  },
                  "type":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:button",
                    "path":"v.buttonType"
                  },
                  "disabled":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:button",
                    "path":"v.disabled"
                  },
                  "tabindex":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:button",
                    "path":"v.tabIndex"
                  },
                  "title":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:button",
                    "path":"v.buttonTitle"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"button"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"FUNCTION",
                            "code":"function(cmp,fn){return (fn.ne(cmp.get(\"v.iconImgSrc\"),\"\")||fn.ne(cmp.get(\"v.iconClass\"),\"\"));}",
                            "args":[
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:button",
                                "path":"v.iconImgSrc"
                              },
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:button",
                                "path":"v.iconClass"
                              }
                            ],
                            "byValue":false
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":{
                                        "exprType":"FUNCTION",
                                        "code":"function(cmp,fn){return fn.add(cmp.get(\"v.iconClass\"),\" icon bLeft\");}",
                                        "args":[
                                          {
                                            "exprType":"PROPERTY",
                                            "byValue":false,
                                            "target":"ui:button",
                                            "path":"v.iconClass"
                                          }
                                        ],
                                        "byValue":false
                                      },
                                      "alt":"",
                                      "src":{
                                        "exprType":"FUNCTION",
                                        "code":"function(cmp,fn){return (fn.ne(cmp.get(\"v.iconImgSrc\"),\"\")?cmp.get(\"v.iconImgSrc\"):\"/auraFW/resources/aura/s.gif\");}",
                                        "args":[
                                          {
                                            "exprType":"PROPERTY",
                                            "byValue":false,
                                            "target":"ui:button",
                                            "path":"v.iconImgSrc"
                                          }
                                        ],
                                        "byValue":false
                                      }
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"img"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"FUNCTION",
                            "code":"function(cmp,fn){return (cmp.get(\"v.labelDisplay\")&&!(fn.empty(cmp.get(\"v.label\"))));}",
                            "args":[
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:button",
                                "path":"v.label"
                              },
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"ui:button",
                                "path":"v.labelDisplay"
                              }
                            ],
                            "byValue":false
                          }
                        },
                        "else":{
                          "descriptor":"else",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"FUNCTION",
                                      "code":"function(cmp,fn){return !(fn.empty(cmp.get(\"v.label\")));}",
                                      "args":[
                                        {
                                          "exprType":"PROPERTY",
                                          "byValue":false,
                                          "target":"ui:button",
                                          "path":"v.label"
                                        }
                                      ],
                                      "byValue":false
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "localId":"hidden",
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"assistiveText"
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"span"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:button",
                                                          "path":"v.label"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "localId":"span",
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":{
                                        "exprType":"FUNCTION",
                                        "code":"function(cmp,fn){return fn.add(cmp.get(\"v.labelClass\"),\" label bBody\");}",
                                        "args":[
                                          {
                                            "exprType":"PROPERTY",
                                            "byValue":false,
                                            "target":"ui:button",
                                            "path":"v.labelClass"
                                          }
                                        ],
                                        "byValue":false
                                      },
                                      "dir":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:button",
                                        "path":"v.labelDir"
                                      }
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"span"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:button",
                                                "path":"v.label"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:button",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "df":"default",
  "fc":true,
  "css":true
}*/},'markup://ui:input':function(){/*$A.componentService.addComponentClass("markup://ui:input",function() {
return {
  "meta":{
    "name":"ui$input",
    "extends":"markup://aura:component",
    "imports":{
      "lib":"markup://ui:eventLib"
    }
  },
  "controller":{
    "init":function(cmp) {
        var indicator = cmp.get('v.requiredIndicator');
        if (indicator && indicator.length > 0) {
            var indicatorCmp = indicator[0];
            if (indicatorCmp && indicatorCmp.isValid && indicatorCmp.isValid()) {
                indicatorCmp.autoDestroy(false);
            }
        }
    },
    "onDestroy":function(cmp) {
        var indicator = cmp.get('v.requiredIndicator');

        if (indicator && indicator.length > 0) {
            var indicatorCmp = indicator[0];
            if (indicatorCmp && indicatorCmp.isValid()) {
                indicatorCmp.destroy();
            }
        }
    },
    "updateError":function(cmp, event, helper) {
        var errors = event.getParam("value");

        var showErrors = cmp.get("v.showErrors");
        if (showErrors) {
            helper.updateError(cmp, errors);
        }

        if ($A.util.isEmpty(errors)) {
            var clearEvent = cmp.getEvent("onClearErrors");
            if (clearEvent) {
                clearEvent.fire();
            }
        } else {
            var errorEvent = cmp.getEvent("onError");
            if (errorEvent) {
                errorEvent.fire({errors: errors});
            }
        }
    },
    "handleLabelChange":function(cmp) {
        var labelComponent = cmp.find("inputLabel");
        if (!$A.util.isUndefinedOrNull(labelComponent)) {
        	var isCompound = cmp.get("v.isCompound");
        	var setAttribute = "v.label";
	        
	        if(isCompound){
	        	setAttribute = "v.legend";
	        }
            labelComponent.set(setAttribute, cmp.get("v.label"));
        }
    },
    "handleLabelPositionChange":function(cmp, evt, helper) {
        
        var labelComponent = cmp.find("inputLabel");
        if (!$A.util.isUndefinedOrNull(labelComponent)) {
            helper.resetLabelPosition(cmp);
        }
    },
    "focus":function(cmp, event, helper) {
        var inputElement = helper.getInputElement(cmp);
        if (inputElement) {
            inputElement.focus();
        }
    },
    "updateRequired":function(cmp) {
        var labelComponent = cmp.find("inputLabel");

        if (labelComponent) {
            var labelDisplay = labelComponent.get("v.labelDisplay");
            var indicator = labelDisplay && cmp.get("v.required") ? cmp.get("v.requiredIndicator") : null;

            labelComponent.set("v.requiredIndicator", indicator);
        }
    }
  },
  "helper":{
    "COMPONENTS_THAT_CREATE_OWN_LABEL":[
      "force:quill"
    ],
    "SUPPORTED_FIELDHELP_COMPONENTS":[
      "ui:tooltip",
      "force:icon"
    ],
    "buildBody":function(component) {
        var labelAttribute = component.get("v.label");
        var isCompound = component.get("v.isCompound");
        var innerBody;
        var body = [];
        var wrapperTag;

        if (this.componentCreatesOwnLabel(component)) {
            return;
        }

        if (!$A.util.isEmpty(labelAttribute) || isCompound) {
            if (isCompound) {
                wrapperTag = 'fieldset';
                innerBody = this.addLegendToBody(component, labelAttribute);
            } else if (component.get("v.useSpanLabel")) {
                wrapperTag = 'div';
                innerBody = this.addSpanLabelToBody(component, labelAttribute);
            } else {
                wrapperTag = 'div';
                innerBody = this.addLabelToBody(component, labelAttribute);
            }

            
            $A.createComponent('aura:html', {
                    body: innerBody,
                    tag: wrapperTag,
                    "class": "form-element"
                },
                function (wrapperComponent) {
                    body.push(wrapperComponent);
                    component.set("v.body", body);
                }
            );
        }
    },
    "addLabelToBody":function(component, labelAttribute) {
        var innerBody = component.get("v.body");

        
        var domId = this.getGlobalId(component);
        var labelPositionAttribute = this.checkValidPosition(component.get("v.labelPosition"));
        var labelClass = component.get("v.labelClass") + " uiLabel-" + labelPositionAttribute + " form-element__label";
        var labelDisplay = labelPositionAttribute !== "hidden";
        var requiredIndicator = labelDisplay && component.get("v.required") ? component.get("v.requiredIndicator") : null;

        
        $A.createComponent("markup://ui:label", {
            "aura:id": 'inputLabel',
            label: labelAttribute,
            "class": labelClass,
            "for": domId,
            labelDisplay: labelDisplay,
            title: component.get("v.labelTitle"),
            requiredIndicator: requiredIndicator
        }, function(labelComponent) {
            
            if (labelPositionAttribute === 'left' || labelPositionAttribute === 'top') {
                innerBody.unshift(labelComponent);
            } else {
                innerBody.push(labelComponent);
            }
        });

        return innerBody;
    },
    "addLegendToBody":function(component, labelAttribute) {
        var innerBody = component.get("v.body");

        
        var labelPositionAttribute = this.checkValidPosition(component.get("v.labelPosition"));
        var labelClass = component.get("v.labelClass") + " uiLegend-" + labelPositionAttribute + " form-element__label";
        var labelDisplay = labelPositionAttribute !== "hidden";
        var requiredIndicator = labelDisplay && component.get("v.required") ? component.get("v.requiredIndicator") : null;

        
        $A.createComponent("markup://ui:legend", {
            "aura:id": "inputLabel",
            legend: labelAttribute,
            "class": labelClass,
            labelDisplay: labelDisplay,
            title: component.get("v.labelTitle"),
            requiredIndicator: requiredIndicator
        }, function(legendComponent) {
            
            if (labelPositionAttribute === "bottom") {
                innerBody.push(legendComponent);
            } else {
                innerBody.unshift(legendComponent);
            }
        });

        return innerBody;
    },
    "addSpanLabelToBody":function(component, labelAttribute) {
        var innerBody = component.get("v.body");

        
        var domId = this.getGlobalId(component);
        var labelPositionAttribute = this.checkValidPosition(component.get("v.labelPosition"));
        var labelClass = component.get("v.labelClass") + " uiPicklistLabel-" + labelPositionAttribute + " form-element__label";
        var labelDisplay = labelPositionAttribute !== "hidden";
        var requiredIndicator = labelDisplay && component.get("v.required") ? component.get("v.requiredIndicator") : null;

        
        $A.createComponent("markup://ui:picklistLabel", {
            domId: domId + "-label",
            "aura:id": "inputLabel",
            label: labelAttribute,
            "class": labelClass,
            labelDisplay: labelDisplay,
            title: component.get("v.labelTitle"),
            requiredIndicator: requiredIndicator
        }, function (picklistLabelComponent) {
            
            if (labelPositionAttribute === "bottom") {
                innerBody.push(picklistLabelComponent);
            } else {
                innerBody.unshift(picklistLabelComponent);
            }
        });

        return innerBody;
    },
    "componentCreatesOwnLabel":function(cmp) {
        for (var i = 0; i < this.COMPONENTS_THAT_CREATE_OWN_LABEL.length; i++) {
            if (cmp.getAttributeValueProvider().isInstanceOf(this.COMPONENTS_THAT_CREATE_OWN_LABEL[i])) {
                return true;
            }
        }
        return false;
    },
    "renderFieldHelpComponent":function(component) {
        var fieldHelpComponent = component.get('v.fieldHelpComponent');
        if ($A.util.isArray(fieldHelpComponent) && !$A.util.isEmpty(fieldHelpComponent)) {
            for (var i = 0; i < this.SUPPORTED_FIELDHELP_COMPONENTS.length; i++) {
                if (fieldHelpComponent[0].isInstanceOf(this.SUPPORTED_FIELDHELP_COMPONENTS[i])) {
                    var labelComponent = component.find('inputLabel');
                    if (!$A.util.isUndefinedOrNull(labelComponent)) {
                        labelComponent.get('v.body').push(fieldHelpComponent[0]);
                    }
                    break;
                }
            }
        }
    },
    "getGlobalId":function(component) {
        return component.get("v.domId") || component.getGlobalId();
    },
    "resetLabelPosition":function(component) {
        var labelPositionAttribute = this.checkValidPosition(component.get("v.labelPosition"));
        if (labelPositionAttribute === 'hidden') {
            var labelComponent = component.find("inputLabel");
            if (!$A.util.isUndefinedOrNull(labelComponent)) {
                labelComponent.set("v.labelDisplay", labelPositionAttribute !== "hidden");
            }
            return;
        }

        var body = component.get("v.body");
        if ($A.util.isArray(body) && body[0].isInstanceOf("aura:html")) {
            var htmlBody = body[0].get("v.body");

            
            var label;
            if ($A.util.isArray(htmlBody)) {
                for (var i = 0; i < htmlBody.length; i++) {
                    if (htmlBody[i].isInstanceOf("ui:label")) {
                        label = htmlBody[i];
                        htmlBody.splice(i, 1);
                    }
                }
            }

            if (label) {
                label.set("v.labelDisplay", labelPositionAttribute !== "hidden");
                if (labelPositionAttribute === 'left' || labelPositionAttribute === 'top') {
                    htmlBody.unshift(label);
                } else if (labelPositionAttribute === 'right' || labelPositionAttribute === 'bottom') {
                    htmlBody.push(label);
                }
                body[0].set("v.body", htmlBody);
            }
        }
    },
    "checkValidPosition":function(passedInPosition) {
        var positionMap = {"top": 1, "right": 1, "bottom": 1, "left": 1, "hidden": 1};
        return positionMap[passedInPosition] ? passedInPosition : "left";
    },
    "addDomHandler":function(component, event) {
        var el = this.getInputElement(component);
        this.lib.interactive.attachDomHandlerToElement(component, el, event);
    },
    "addInputDomEvents":function(component) {
        var events = ["input", "change", "paste", "copy", "cut"];

        for (var i = 0, len = events.length; i < len; i++) {
            if (component.hasEventHandler(events[i])) {
                this.addDomHandler(component, events[i]);
            }
        }

        if (!component.get('v.updateOnDisabled')) {
            var updateOn = this.getUpdateOn(component);
            if (updateOn) {
                var handledEvents = this.lib.interactive.getHandledDOMEvents(component);
                for (var j = 0, lenj = updateOn.length; j < lenj; j++) {
                    if (handledEvents[updateOn[j]] !== true) {
                        this.addDomHandler(component, updateOn[j]);
                    }
                }
            }
        }
    },
    "getUpdateOn":function(component) {
        var ret = [];
        var updateOn = component.get("v.updateOn");

        if (!updateOn) {
            return ret;
        }

        updateOn = updateOn.toLowerCase().split(/[\W,]+/); 

        var domEvents = this.lib.interactive.getDomEvents(component);
        for (var i = 0, len = domEvents.length; i < len; i++) {
            for (var j = 0, lenj = updateOn.length; j < lenj; j++) {
                if (domEvents[i].toLowerCase() === updateOn[j]) {
                    ret.push(updateOn[j]);
                }
            }
        }
        
        return (ret.length > 0) ? ret : component.getDef().getAttributeDefs().getDef("updateOn").getDefault();
    },
    "getDomElementValue":function(element) {
        return element.value;
    },
    "getHandledDOMEvents":function(component) {
        return this.lib.interactive.getHandledDOMEvents(component);
    },
    "doUpdate":function(component, value) {
        component.set("v.value", value);
    },
    "preEventFiring":function(component, event) {
        this.handleUpdate(component, event);
    },
    "fireEvent":function(component, event, helper) {
        this.lib.interactive.fireEvent(component, event, helper);
    },
    "handleUpdate":function(component, event) {
        var helper = component.getDef().getHelper();
        var updateOn = helper.getUpdateOn(component);

        
        if (updateOn.indexOf(event.type) > -1) {
            helper.doUpdate(component, helper.getDomElementValue(this.getInputElement(component)));
        }
    },
    "setEventParams":function(e, DOMEvent) {
        this.lib.interactive.setEventParams(e, DOMEvent);
    },
    "getInputElement":function(component) {
        return this.lib.interactive.getInputElement(component.getElement());
    },
    "updateError":function(cmp, errors) {
        var helper = cmp.getConcreteComponent().getDef().getHelper();
        
        if (!helper.shouldShowError(cmp)) {
            return;
        }

        if (this._thereIsErrorComponent(cmp)) {
            this._updateErrorComponent(cmp, errors);

        } else {
            
            if ($A.util.isEmpty(errors)) {
                return;
            }
            this._createDefaultErrorComponent(cmp, errors);
        }
    },
    "_thereIsErrorComponent":function(cmp) {
        return cmp.get('v.errorComponent').length > 0;
    },
    "_updateErrorComponent":function(cmp, errors) {
        var errorCmp = cmp.get('v.errorComponent')[0];

        errorCmp.set("v.errors", errors);
        var concreteHelper = cmp.getConcreteComponent().getDef().getHelper();
        concreteHelper.updateAriaDescribedBy(cmp, errorCmp.getGlobalId());
    },
    "_createDefaultErrorComponent":function(cmp, errors) {
        $A.createComponent(
            "ui:inputDefaultError",
            {
                "errors": errors
            },
            function (errorCmp, status) {
                if (status === "SUCCESS") {
                    cmp.set("v.errorComponent", errorCmp);
                    var concreteCmpHelper = cmp.getConcreteComponent().getDef().getHelper();
                    concreteCmpHelper.updateAriaDescribedBy(cmp, errorCmp.getGlobalId());
                }
            }
        );
    },
    "updateAriaDescribedBy":function(component, errorCmpId) {
        var ariaDesc = component.get("v.ariaDescribedBy");
        var errors = component.get("v.errors");
        if (!$A.util.isEmpty(errors)) {
            ariaDesc = this.addTokenToString(ariaDesc, errorCmpId);
        } else {
            ariaDesc = this.removeTokenFromString(ariaDesc, errorCmpId);
        }
        component.set("v.ariaDescribedBy", ariaDesc);
    },
    "updateErrorElement":function(component) {
        var errors = component.get("v.errors");
        var hasError = !$A.util.isEmpty(errors);

        if (this.hasLabel(component)) {
            $A.util.toggleClass(component.getElement(), "has-error", hasError);
        } else {
            $A.util.toggleClass(component, "has-error", hasError);
        }
    },
    "addClass":function(component, className) {
        $A.util.addClass(component, className);
    },
    "removeClass":function(component, className) {
        $A.util.removeClass(component, className);
    },
    "isHTML5Input":function(type) {
        
        if ($A.util.isUndefined(this.isHTML5Input.cache)) {
            this.isHTML5Input.cache = {};
        }

        
        var cached = this.isHTML5Input.cache[type];
        if (!$A.util.isUndefined(cached)) {
            return cached;
        }

        
        var test = document.createElement("input");
        test.setAttribute("type", type);

        var isSameType = (test.type === type);
        this.isHTML5Input.cache[type] = isSameType;
        return isSameType;
    },
    "isEventSupported":function(eventName) {
        
        if ($A.util.isUndefined(this.isEventSupported.cache)) {
            this.isEventSupported.cache = {};
        }

        
        var cached = this.isEventSupported.cache[eventName];
        if (!$A.util.isUndefined(cached)) {
            return cached;
        }

        var el = document.createElement('input');
        var _eventName = 'on' + eventName;
        var isSupported = (_eventName in el);
        if (!isSupported) {
            el.setAttribute(_eventName, 'return;');
            isSupported = typeof el[_eventName] === 'function';
        }
        $A.util.removeElement(el);
        this.isEventSupported.cache[eventName] = isSupported;
        return isSupported;
    },
    "setAttribute":function(cmp, attr) {
        cmp.set("v." + attr.key, attr.value, attr.commit);
    },
    "addTokenToString":function(str, token) {
        token = $A.util.trim(token);
        str = $A.util.trim(str);
        if (str > '') {
            if ((' ' + str + ' ').indexOf(' ' + token + ' ') === -1) {
                str += ' ' + token;
            }
        } else {
            str = token;
        }
        return str;
    },
    "removeTokenFromString":function(str, token) {
        token = $A.util.trim(token);
        str = $A.util.trim(str);
        if (str > '') {
            var start = (' ' + str + ' ').indexOf(' ' + token + ' ');
            if (start > -1) {
                str = str.substr(0, start) + str.substr(start + token.length + 1);
            }
        }
        return str;
    },
    "hasLabel":function(cmp) {
        var label = cmp.get('v.label');
        return !!(label && label.length > 0);
    },
    "setDisabled":function(component, disabled, disabledCss) {
        this.lib.interactive.setEventParams(component, disabled, disabledCss);
    },
    "getDomEvents":function(component) {
        return this.lib.interactive.getDomEvents(component);
    },
    "domEventHandler":function(event) {
        this.lib.interactive.domEventHandler(event);
    },
    "updateAriaRequired":function(component) {
        if (!component.get("v.isCompound") && component.get("v.required")) {
            var inputElement = this.getInputElement(component);
            if (!$A.util.isUndefinedOrNull(inputElement)) {
                inputElement.setAttribute("aria-required", true);
            }
        }
    },
    "shouldShowError":function(component) {
        
        
        return !$A.util.getBooleanValue(component.get("v.isCompound"));
    }
  },
  "renderer":{
    "render":function(component, helper) {
    	
		if (!component._hasBuiltBody) {
			helper.buildBody(component);
			component._hasBuiltBody = true;
		}
		
        var domId = component.get('v.domId');
		if (!domId) {
            var globalId = component.getGlobalId();
			helper.setAttribute(component, {key: 'domId', value: globalId});
		}
		helper.renderFieldHelpComponent(component);

		return component.superRender();
	},
    "afterRender":function(component, helper) {
        helper.lib.interactive.addDomEvents(component);
        component.superAfterRender();

        
        var concreteCmp = component.getConcreteComponent();
        var concreteHelper = concreteCmp.getDef().getHelper();

        concreteHelper.addInputDomEvents(component);
        concreteHelper.updateErrorElement(component);
        concreteHelper.updateAriaRequired(component);
    },
    "rerender":function(component) {
        
        var concreteCmp = component.getConcreteComponent();
        var concreteHelper = concreteCmp.getDef().getHelper();

        concreteHelper.addInputDomEvents(component);
        concreteHelper.updateErrorElement(component);
        concreteHelper.updateAriaRequired(component);

        component.superRerender();
    },
    "unrender":function(component, helper) {
        helper.lib.interactive.removeDomEventsFromMap(component);
        component.superUnrender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:input",
  "st":{
    "descriptor":"css://ui.input",
    "cl":"uiInput"
  },
  "fst":{
    "descriptor":"css://ui.input"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://String","G",false],
    ["visible","aura://Boolean","I",false,true],
    ["disableDoubleClicks","aura://Boolean","I",false,false],
    ["showErrors","aura://Boolean","PP",false,true],
    ["errors","aura://Object[]","G",false,[]],
    ["errorComponent","aura://Aura.Component[]","I",false,[]],
    ["fieldHelpComponent","aura://Aura.Component[]","I",false,[]],
    ["type","aura://String","PP",false],
    ["isCompound","aura://Boolean","I",false,false],
    ["required","aura://Boolean","G",false,false],
    ["updateOn","aura://String","G",false,"change"],
    ["updateOnDisabled","aura://Boolean","I",false,false],
    ["label","aura://String","G",false],
    ["labelClass","aura://String","G",false,""],
    ["labelPosition","aura://String","PP",false,"left"],
    ["labelTitle","aura://String","I",false],
    ["useSpanLabel","aura://Boolean","I",false,false],
    ["requiredIndicatorClass","aura://String","G",false,""],
    ["disabled","aura://Boolean","G",false,false],
    ["domId","aura://String","PP",false],
    ["requiredIndicator","aura://Aura.Component[]","I",false,[
      {
        "componentDef":{
          "descriptor":"markup://aura:html"
        },
        "attributes":{
          "values":{
            "HTMLAttributes":{
              "descriptor":"HTMLAttributes",
              "value":{
                "class":{
                  "exprType":"FUNCTION",
                  "code":"function(cmp,fn){return fn.add(\"required \",cmp.get(\"v.requiredIndicatorClass\"));}",
                  "args":[
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:input",
                      "path":"v.requiredIndicatorClass"
                    }
                  ],
                  "byValue":false
                }
              }
            },
            "tag":{
              "descriptor":"tag",
              "value":"span"
            },
            "body":{
              "descriptor":"body",
              "value":[
                {
                  "componentDef":{
                    "descriptor":"markup://aura:text"
                  },
                  "attributes":{
                    "values":{
                      "value":{
                        "descriptor":"value",
                        "value":"*"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]]
  ],
  "med":[
    {
      "name":"ui:focus",
      "xs":"I"
    }
  ],
  "i":[
    "markup://ui:uiEvents",
    "markup://ui:visible",
    "markup://ui:doubleClicks"
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:inputEvent",
      "n":"input",
      "xs":"I"
    },
    {
      "ed":"markup://ui:cut",
      "n":"cut",
      "xs":"G"
    },
    {
      "ed":"markup://ui:validationError",
      "n":"onError",
      "xs":"G"
    },
    {
      "ed":"markup://ui:clearErrors",
      "n":"onClearErrors",
      "xs":"G"
    },
    {
      "ed":"markup://ui:change",
      "n":"change",
      "xs":"G"
    },
    {
      "ed":"markup://ui:copy",
      "n":"copy",
      "xs":"G"
    },
    {
      "ed":"markup://ui:paste",
      "n":"paste",
      "xs":"G"
    },
    {
      "ed":"markup://ui:updateError",
      "n":"updateError",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateError"
      },
      "n":"updateError"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateError"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.errors"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleLabelChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.label"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleLabelPositionChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.labelPosition"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateRequired"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.required"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onDestroy"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"destroy"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:input",
                  "path":"v.body"
                }
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:input",
                  "path":"v.errorComponent"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "ab":true,
  "df":"default",
  "dyf":true,
  "css":true
}*/},'markup://ui:resizeObserver':function(){/*$A.componentService.addComponentClass("markup://ui:resizeObserver",function() {
return {
  "meta":{
    "name":"ui$resizeObserver",
    "extends":"markup://aura:component"
  },
  "controller":{
    "update":function(component, event, helper) {
        helper.update(component);
    },
    "updateSize":function(component, event, helper) {
        if (component.isValid()) {
            helper.updateSize(component);
        }
    }
  },
  "helper":{
    "getResizer":function() {
        
        if ($A.util.isUndefined($A._resizerSingleton)) {
            $A._resizerSingleton = {};
        }

        return $A._resizerSingleton;
    },
    "init":function(component) {
        var resizer = this.getResizer();
        if ($A.util.isUndefined(resizer._resizer)) {
            
            
            resizer._resizerComponentSet = {};
            resizer._resizing = false;

            resizer._resizer = $A.getCallback(function() {
                if (!resizer._resizing) {
                    resizer._resizing = true;
                    setTimeout(function() {
                        try {
                            if (resizer._resizerComponentSet) {
                                for (var n in resizer._resizerComponentSet) {
                                    var c = resizer._resizerComponentSet[n];
                                    if (c.isValid()) {
                                        c.update();
                                    }
                                }
                            }
                        } catch (e) {
                            return;
                        } finally {
                            resizer._resizing = false;
                        }
                    }, 0);
                }
            });

            $A.util.on(window, "resize", resizer._resizer, false, 400);
        }

        resizer._resizerComponentSet[component.getGlobalId()] = component;
    },
    "update":function(component) {
        if (component.isValid()) {
            
            var onresizeAction = component.get("v.onresize");
            if (onresizeAction) {
                onresizeAction.runDeprecated();
            }
        }
    },
    "remove":function(component) {
        
        var resizer = this.getResizer();
        if (!$A.util.isUndefined(resizer._resizerComponentSet)) {
            var id = component.getGlobalId();
            if (!(delete resizer._resizerComponentSet[id])) {
                throw new Error("os:resizeObserver.remove() called with unregistered component " + id);
            }
        }
    },
    "updateSize":function(component) {
        var resizer = this.getResizer();
        var n;
        if (component.isValid() && resizer._resizer) {
            var id = component.getGlobalId();
            if (!resizer._resizerComponentSet || $A.util.isUndefined(resizer._resizerComponentSet[id])) {
                return;
            }

            if (!resizer._resizing) {
                resizer._resizing = true;

                
                resizer._pendingUpdates = {};
                for (n in resizer._resizerComponentSet) {
                    var c = resizer._resizerComponentSet[n];
                    if (c.isValid()) {
                        resizer._pendingUpdates[n] = c;
                    }
                }
            }

            
            if (resizer._pendingUpdates) {                
                delete resizer._pendingUpdates[id];

                
                
                if (Object.keys(resizer._pendingUpdates).length > 0) {
                    return;
                }
            }

            resizer._resizing = false;
            resizer._resizer();
        }
    }
  },
  "renderer":{
    "render":function(component, helper) {
        helper.init(component);

        return component.superRender();
    },
    "afterRender":function(component, helper) {
        helper.update(component);

        component.superAfterRender();
    },
    "unrender":function(component, helper) {
        helper.remove(component);

        component.superUnrender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:resizeObserver",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["onresize","aura://Aura.Action","PP",false,null]
  ],
  "med":[
    {
      "name":"ui:update",
      "xs":"PP"
    }
  ],
  "hd":[
    {
      "ed":{
        "descriptor":"markup://ui:updateSize"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateSize"
      }
    }
  ],
  "css":true
}*/},'markup://ui:tabItem':function(){/*$A.componentService.addComponentClass("markup://ui:tabItem",function() {
return {
  "meta":{
    "name":"ui$tabItem",
    "extends":"markup://aura:component"
  },
  "controller":{
    "addHandler":function(cmp, event, helper) {
        var params = event.getParam('arguments');
        helper.addHandler(cmp, params);
    },
    "setActive":function(cmp, evt, helper) {
        var params = evt.getParam('arguments');
        helper.setActive(cmp, params.active, params.focus);
    },
    "press":function(cmp) {
        if($A.util.getBooleanValue("v.active")) {
            cmp.get('e.onActivate').fire();
        }
    },
    "close":function(cmp, evt) {
        cmp.get("e.onClose").fire();
        $A.util.squash(evt, true);
    },
    "onTabHover":function(cmp, evt, helper) {
        helper.handleHoverEvent(cmp, 'onTabHover');
    },
    "onTabUnhover":function(cmp, evt, helper) {
        helper.handleHoverEvent(cmp, 'onTabUnhover');
    }
  },
  "helper":{
    "EVENT_DISPATCH":{
      "onTabHover":[
        "onfocus",
        "onmouseover"
      ],
      "onTabUnhover":[
        "onblur",
        "onmouseout"
      ]
    },
    "initializeHandlers":function(cmp) {
        var htmlItem   = cmp.find('tabItemAnchor');
        var htmlAttr   = htmlItem.get('v.HTMLAttributes');
        var dispatcher = cmp.getConcreteComponent().getEventDispatcher();

        for (var e in this.EVENT_DISPATCH) {
            if (dispatcher[e] && dispatcher[e]["bubble"] && dispatcher[e]["bubble"].length) {
                var events = this.EVENT_DISPATCH[e];
                for (var i in events) {
                    htmlAttr[events[i]] = cmp.getReference('c.' + e);
                }
            }
        }
    },
    "addHandler":function(cmp, handlerParams) {
        var eventName = handlerParams.eventName;
        var htmlEventNames = this.EVENT_DISPATCH[eventName];
        $A.assert(htmlEventNames, 'Type of event not supported');

        var valueProvider = handlerParams.valueProvider;
        var actionExpression = handlerParams.actionExpression;

        var tmp = cmp;
        while (!(tmp.getDef().getDescriptor().getQualifiedName() === "markup://ui:tabItem")) {
            tmp = tmp.getSuper();
        }

        var htmlAnchor = tmp.find('tabItemAnchor');
        var originalAddHandler = htmlAnchor.addHandler;
        var htmlAttr = htmlAnchor.get('v.HTMLAttributes');

        for (var i in htmlEventNames) {
            htmlAttr[htmlEventNames[i]] = cmp.getReference('c.' + eventName);
        }
        
        htmlAnchor.set('v.HTMLAttributes', htmlAttr);

        
        originalAddHandler.call(cmp, eventName, valueProvider, actionExpression);

    },
    "setActive":function(cmp, active, focus) {
        cmp.set("v.active", active);

        if (active) {
            var itemEl = this.getTabItemElement(cmp);
            if (itemEl && focus) {
                itemEl.focus();
            }
        }
    },
    "getTabItemElement":function(cmp) {
        var p = cmp;
        var id = 'tabItemAnchor';
        var container = cmp.find(id);
        while (!container && p.isInstanceOf("ui:tabItem")) {
            p = p.getSuper();
            container = p.find(id);
        }
        return container ? container.getElement() : null;
    },
    "handleHoverEvent":function(cmp, eventName) {
        cmp.getEvent(eventName)
        .setParams({ tabComponent: cmp })
        .fire();
    },
    "initWidth":function(cmp) {
        var el = cmp.getElement();
        
        var style = (el instanceof Element) ? window.getComputedStyle(el, '') : null;
        if (style) {
            var width = parseFloat(style.marginLeft) + parseFloat(style.marginRight) + el.offsetWidth;
            $A.util.setDataAttribute(el, "original-width", width);
        }
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        helper.initializeHandlers(cmp);
        return cmp.superRender();
    },
    "afterRender":function(cmp, helper) {
        cmp.superAfterRender();
        helper.initWidth(cmp);
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:tabItem",
  "st":{
    "descriptor":"css://ui.tabItem",
    "cl":"uiTabItem"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","I",false],
    ["title","aura://String","I",false],
    ["name","aura://String","I",false],
    ["icon","aura://Aura.Component[]","I",false,[]],
    ["active","aura://Boolean","I",false],
    ["hidden","aura://Boolean","I",false],
    ["iconClass","aura://String","I",false],
    ["closable","aura://Boolean","I",false,false],
    ["ariaControlId","aura://String","I",false]
  ],
  "med":[
    {
      "name":"ui:setActive",
      "xs":"I",
      "action":"{!c.setActive}",
      "attributes":[
        ["active","aura://Boolean","I",false],
        ["focus","aura://Boolean","I",false],
        ["callback","aura://Object","I",false,null]
      ]
    }
  ],
  "re":[
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onClose",
      "xs":"I"
    },
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabHover",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onActivate",
      "xs":"I"
    },
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabUnhover",
      "xs":"I"
    }
  ],
  "ld":{
    "tabItemAnchor":{
      "description":"Tab",
      "context":{
        "devNameOrId":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:tabItem",
          "path":"v.name"
        }
      },
      "alias":"tab",
      "isPrimitive":true
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"li",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.add(fn.add(fn.add(cmp.get(\"v.class\"),\" tabs__item\"),(cmp.get(\"v.active\")?\" active\":\"\")),(cmp.get(\"v.hidden\")?\" hidden\":\"\"));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tabItem",
                        "path":"v.hidden"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tabItem",
                        "path":"v.active"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tabItem",
                        "path":"v.class"
                      }
                    ],
                    "byValue":false
                  },
                  "role":"presentation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"tabItemAnchor",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"tabHeader",
                            "aria-selected":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.active\")?\"true\":\"false\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:tabItem",
                                  "path":"v.active"
                                }
                              ],
                              "byValue":false
                            },
                            "data-tab-name":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.name\")||cmp.get(\"v.title\"));}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:tabItem",
                                  "path":"v.name"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:tabItem",
                                  "path":"v.title"
                                }
                              ],
                              "byValue":false
                            },
                            "tabindex":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return (cmp.get(\"v.active\")?0: -(1));}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:tabItem",
                                  "path":"v.active"
                                }
                              ],
                              "byValue":false
                            },
                            "role":"tab",
                            "onclick":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:tabItem",
                              "path":"c.press"
                            },
                            "aria-controls":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:tabItem",
                              "path":"v.ariaControlId"
                            },
                            "title":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:tabItem",
                              "path":"v.title"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"a"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":{
                                        "exprType":"PROPERTY",
                                        "byValue":false,
                                        "target":"ui:tabItem",
                                        "path":"v.iconClass"
                                      }
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"span"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabItem",
                                                "path":"v.icon"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":"title"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"span"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabItem",
                                                "path":"v.title"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:tabItem",
                                      "path":"v.closable"
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "localId":"close",
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":"close",
                                                "tabindex":{
                                                  "exprType":"FUNCTION",
                                                  "code":"function(cmp,fn){return (cmp.get(\"v.active\")?0: -(1));}",
                                                  "args":[
                                                    {
                                                      "exprType":"PROPERTY",
                                                      "byValue":false,
                                                      "target":"ui:tabItem",
                                                      "path":"v.active"
                                                    }
                                                  ],
                                                  "byValue":false
                                                },
                                                "onclick":{
                                                  "exprType":"PROPERTY",
                                                  "byValue":false,
                                                  "target":"ui:tabItem",
                                                  "path":"c.close"
                                                }
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"a"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:text"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":"×\n                    "
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:html"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "HTMLAttributes":{
                                                        "descriptor":"HTMLAttributes",
                                                        "value":{
                                                          "class":"assistiveText"
                                                        }
                                                      },
                                                      "tag":{
                                                        "descriptor":"tag",
                                                        "value":"span"
                                                      },
                                                      "body":{
                                                        "descriptor":"body",
                                                        "value":[
                                                          {
                                                            "componentDef":{
                                                              "descriptor":"markup://aura:text"
                                                            },
                                                            "attributes":{
                                                              "values":{
                                                                "value":{
                                                                  "descriptor":"value",
                                                                  "value":"Close"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:tabOverflowMenuItem':function(){/*$A.componentService.addComponentClass("markup://ui:tabOverflowMenuItem",function() {
return {
  "meta":{
    "name":"ui$tabOverflowMenuItem",
    "extends":"markup://aura:component"
  },
  "controller":{
    "focus":function(cmp) {
		cmp.find("overflowTrigger").setFocus();
	},
    "tabSelected":function(cmp, evt, helper) {
		var focusedItemName = evt.getParam("selectedItem").get("v.id");
		helper.triggerTab(cmp, focusedItemName, null, false);
	},
    "onMenuSelection":function(cmp, evt, helper) {
		var source = evt.getSource();
		helper.triggerTab(cmp, source.get("v.id"), null, true);
	},
    "updateMenuItems":function(cmp, evt, helper) {
		helper.updateMenuItems(cmp);
	},
    "handleDestroy":function(cmp, evt, helper) {
		helper.handleDestroy(cmp);
	}
  },
  "helper":{
    "updateMenuItems":function(cmp) {
		var self = this,
			menuItems = [],
			newMenuItems = cmp.get("v.menuItems"),
			count = newMenuItems.length,
			menuItemCache = this.getMenuItemCache(cmp);

		var callback = function(newMenuItem, status) {
			if (!cmp.isValid()) {
				return;
			}
			if (status === "SUCCESS") {
				count--;
				newMenuItem.autoDestroy(false);
				newMenuItem.addHandler("click", cmp, "c.onMenuSelection");
				newMenuItem.addHandler("mouseover", cmp, "c.onHover");

				menuItems.push(newMenuItem);
				menuItemCache[newMenuItem.get("v.id")] = newMenuItem;

				if (count === 0) {
					self.updateMenuList(cmp, menuItems);
				}
			}
		};

		
		
		for (var i = 0; i < newMenuItems.length; i++) {
			var id = newMenuItems[i].id,
				title = newMenuItems[i].label;

			if (!menuItemCache[id]) {
				$A.createComponent("ui:actionMenuItem", {
					"label"   : title || id,
					"id"      : id,
					"aura:id" : "overflow-item"
				}, callback);
			} else {
				menuItems.push(menuItemCache[id]);
				count--;
			}
		}

		if (count === 0) {
			this.updateMenuList(cmp, menuItems);
		}

		cmp.set("v.menuItemCache", menuItemCache, true);
	},
    "getMenuItemCache":function(cmp) {
		return cmp.get("v.menuItemCache") || {};
	},
    "updateMenuList":function(cmp, menuItems) {
		if (cmp.isValid()) {
			cmp.find('menuList').set("v.body", menuItems);
			cmp.find('menuList').get("e.refresh").fire();
		}
	},
    "handleDestroy":function(cmp) {
		var items = this.getMenuItemCache(cmp);
		for (var item in items) {
			if (items.hasOwnProperty(item)) {
				items[item].destroy();
			}
		}
	},
    "triggerTab":function(cmp, name, index, focus) {
		var params = {
			name : name,
			index : index,
			focus : focus
		};

		cmp.get("e.onTabSelection").setParams(params).fire();
	}
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:tabOverflowMenuItem",
  "st":{
    "descriptor":"css://ui.tabOverflowMenuItem",
    "cl":"uiTabOverflowMenuItem"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","I",false],
    ["title","aura://String","PP",false],
    ["icon","aura://Aura.Component[]","I",false,[]],
    ["active","aura://Boolean","I",false],
    ["iconClass","aura://String","I",false],
    ["ariaControlId","aura://String","I",false],
    ["menuItems","aura://Object[]","PP",false,[]],
    ["menuItemCache","aura://Object","p",false,null]
  ],
  "med":[
    {
      "name":"ui:focus",
      "xs":"I"
    }
  ],
  "re":[
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabHover",
      "xs":"I"
    },
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabUnhover",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onTabSelection",
      "xs":"PP"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleDestroy"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"destroy"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateMenuItems"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.menuItems"
      },
      "n":"change"
    }
  ],
  "ld":{
    "overflow-item":{
      "description":"Tab Item from overflow"
    },
    "overflowTrigger":{
      "description":"Tab Overflow Menu Trigger",
      "alias":"overflow"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"li",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.add(cmp.get(\"v.class\"),\" tabs__item\");}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tabOverflowMenuItem",
                        "path":"v.class"
                      }
                    ],
                    "byValue":false
                  },
                  "role":"presentation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"li"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:menu"
                    },
                    "localId":"menu",
                    "attributes":{
                      "values":{
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://ui:menuTriggerLink"
                              },
                              "localId":"overflowTrigger",
                              "attributes":{
                                "values":{
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabOverflowMenuItem",
                                                "path":"v.title"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://ui:menuList"
                              },
                              "localId":"menuList",
                              "flavor":"right, default",
                              "attributes":{
                                "values":{
                                  "autoPosition":{
                                    "descriptor":"autoPosition",
                                    "value":false
                                  },
                                  "menuSelect":{
                                    "descriptor":"menuSelect",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:tabOverflowMenuItem",
                                      "path":"c.tabSelected"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:inputSearch':function(){/*$A.componentService.addComponentClass("markup://ui:inputSearch",function() {
return {
  "meta":{
    "name":"ui$inputSearch",
    "extends":"markup://ui:input"
  },
  "controller":{
    "clearSearchTerm":function(component, event, helper) {
        var searchCmp = component.find("search");
        var el = searchCmp.getElement();
        if (el) {
            el.value = "";
            component.set("v.value", "");
            helper.toggleClearButton(component);
            component.focus();
        }
        var e = component.getEvent("search");
        e.setParams({
            searchTerm: ""
        });
        e.fire();
    },
    "input":function(component, event, helper) {
        helper.toggleClearButton(component);
    }
  },
  "helper":{
    "addEventHandler":function(component) {
        if (this.isEventSupported("search")) {
            this.addDomHandler(component, "search");
        } else { 
            if (!component.hasEventHandler("keyup")) {
                this.addDomHandler(component, "keyup");
            }
        }
    },
    "preEventFiring":function(component, event) {
        if (!this.isEventSupported("search") && event.type === "keyup" && event.keyCode === 13) {
            
        	this.handleUpdate(component, {type: "search"});
            var element = component.find("search").getElement();
            
            
            var e = component.getEvent("search");
            e.setParams({
                searchTerm: element.value
            });
            e.fire();
        }
        this.handleUpdate(component, event);
    },
    "fireEvent":function(component, event) {
        var e = component.getEvent(event.type);
        this.setEventParams(e, event);
        if (event.type === "search") {
            var params = e.getParams();
            params["searchTerm"] = component.find("search").getElement().value;
            e.setParams(params);
        }
        e.fire();
    },
    "toggleClearButton":function(component) {
        var clearButton = component.find("clearSearchTermButton");
        if (clearButton) {
            var clearButtonElem = clearButton.getElement();
            var searchCmp = component.find("search");
            var elem = searchCmp.getElement();
            if ($A.util.isEmpty(elem.value)) {
                $A.util.addClass(clearButtonElem, "hide");
            } else {
                $A.util.removeClass(clearButtonElem, "hide");
            }
        }
    }
  },
  "renderer":{
    "afterRender":function(component, helper) {
        helper.addEventHandler(component, "search");
        return component.superAfterRender();
    },
    "rerender":function(component, helper) {
        helper.addEventHandler(component, "search");
        return component.superRerender();
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:inputSearch",
  "st":{
    "descriptor":"css://ui.inputSearch",
    "cl":"uiInputSearch"
  },
  "su":"markup://ui:input",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://String","G",false],
    ["visible","aura://Boolean","I",false,true],
    ["disableDoubleClicks","aura://Boolean","I",false,false],
    ["showErrors","aura://Boolean","PP",false,true],
    ["errors","aura://Object[]","G",false,[]],
    ["errorComponent","aura://Aura.Component[]","I",false,[]],
    ["fieldHelpComponent","aura://Aura.Component[]","I",false,[]],
    ["type","aura://String","I",false,"search"],
    ["isCompound","aura://Boolean","I",false,false],
    ["required","aura://Boolean","G",false,false],
    ["updateOn","aura://String","I",false,"search,change,input"],
    ["updateOnDisabled","aura://Boolean","I",false,false],
    ["label","aura://String","G",false],
    ["labelClass","aura://String","G",false,""],
    ["labelPosition","aura://String","PP",false,"left"],
    ["labelTitle","aura://String","I",false],
    ["useSpanLabel","aura://Boolean","I",false,false],
    ["requiredIndicatorClass","aura://String","G",false,""],
    ["disabled","aura://Boolean","G",false,false],
    ["domId","aura://String","PP",false],
    ["requiredIndicator","aura://Aura.Component[]","I",false,[
      {
        "componentDef":{
          "descriptor":"markup://aura:html"
        },
        "attributes":{
          "values":{
            "HTMLAttributes":{
              "descriptor":"HTMLAttributes",
              "value":{
                "class":{
                  "exprType":"FUNCTION",
                  "code":"function(cmp,fn){return fn.add(\"required \",cmp.get(\"v.requiredIndicatorClass\"));}",
                  "args":[
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:input",
                      "path":"v.requiredIndicatorClass"
                    }
                  ],
                  "byValue":false
                }
              }
            },
            "tag":{
              "descriptor":"tag",
              "value":"span"
            },
            "body":{
              "descriptor":"body",
              "value":[
                {
                  "componentDef":{
                    "descriptor":"markup://aura:text"
                  },
                  "attributes":{
                    "values":{
                      "value":{
                        "descriptor":"value",
                        "value":"*"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]],
    ["placeholder","aura://String","I",false,"Search"],
    ["maxlength","aura://Integer","G",false],
    ["size","aura://Integer","G",false],
    ["showClear","aura://Boolean","I",false,false]
  ],
  "med":[
    {
      "name":"ui:focus",
      "xs":"I"
    }
  ],
  "i":[
    "markup://ui:inputTextComponent"
  ],
  "re":[
    {
      "ed":"markup://ui:select",
      "n":"select",
      "xs":"G"
    },
    {
      "ed":"markup://ui:blur",
      "n":"blur",
      "xs":"G"
    },
    {
      "ed":"markup://ui:focus",
      "n":"focus",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keypress",
      "n":"keypress",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keyup",
      "n":"keyup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:keydown",
      "n":"keydown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:inputEvent",
      "n":"input",
      "xs":"I"
    },
    {
      "ed":"markup://ui:cut",
      "n":"cut",
      "xs":"G"
    },
    {
      "ed":"markup://ui:validationError",
      "n":"onError",
      "xs":"G"
    },
    {
      "ed":"markup://ui:clearErrors",
      "n":"onClearErrors",
      "xs":"G"
    },
    {
      "ed":"markup://ui:change",
      "n":"change",
      "xs":"G"
    },
    {
      "ed":"markup://ui:copy",
      "n":"copy",
      "xs":"G"
    },
    {
      "ed":"markup://ui:paste",
      "n":"paste",
      "xs":"G"
    },
    {
      "ed":"markup://ui:updateError",
      "n":"updateError",
      "xs":"I"
    },
    {
      "ed":"markup://ui:searchEvent",
      "n":"search",
      "xs":"I"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{

                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"search",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return fn.add(cmp.get(\"v.class\"),\" input\");}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:inputSearch",
                                  "path":"v.class"
                                }
                              ],
                              "byValue":false
                            },
                            "size":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.size"
                            },
                            "value":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.value"
                            },
                            "oninput":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"c.input"
                            },
                            "maxlength":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.maxlength"
                            },
                            "type":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.type"
                            },
                            "aria-describedby":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.ariaDescribedBy"
                            },
                            "disabled":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.disabled"
                            },
                            "placeholder":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.placeholder"
                            },
                            "required":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.required"
                            },
                            "id":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:inputSearch",
                              "path":"v.domId"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"input"
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:inputSearch",
                            "path":"v.showClear"
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://ui:button"
                              },
                              "localId":"clearSearchTermButton",
                              "attributes":{
                                "values":{
                                  "class":{
                                    "descriptor":"class",
                                    "value":{
                                      "exprType":"FUNCTION",
                                      "code":"function(cmp,fn){return (cmp.get(\"v.value\")?\"clear\":\"hide clear\");}",
                                      "args":[
                                        {
                                          "exprType":"PROPERTY",
                                          "byValue":false,
                                          "target":"ui:inputSearch",
                                          "path":"v.value"
                                        }
                                      ],
                                      "byValue":false
                                    }
                                  },
                                  "labelDisplay":{
                                    "descriptor":"labelDisplay",
                                    "value":false
                                  },
                                  "press":{
                                    "descriptor":"press",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:inputSearch",
                                      "path":"c.clearSearchTerm"
                                    }
                                  },
                                  "label":{
                                    "descriptor":"label",
                                    "value":"clear"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "df":"default, input",
  "css":true
}*/},'markup://ui:stamp':function(){/*$A.componentService.addComponentClass("markup://ui:stamp",function() {
return {
  "meta":{
    "name":"ui$stamp",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:stamp",
  "st":{
    "descriptor":"css://ui.stamp",
    "cl":"uiStamp"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","G",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["severity","aura://String","I",false],
    ["title","aura://String","I",false],
    ["onclick","aura://Aura.Action","I",false,null]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    }
  ],
  "ld":{
    "uiStamp":{
      "description":"Decorated Stamp Label",
      "alias":"stamp-label"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"uiStamp",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.add(fn.add(fn.add(\"stamp-\",cmp.get(\"v.severity\")),\" \"),cmp.get(\"v.class\"));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:stamp",
                        "path":"v.severity"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:stamp",
                        "path":"v.class"
                      }
                    ],
                    "byValue":false
                  },
                  "onclick":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:stamp",
                    "path":"v.onclick"
                  },
                  "title":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:stamp",
                    "path":"v.title"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"a"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:stamp",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:tab':function(){/*$A.componentService.addComponentClass("markup://ui:tab",function() {
return {
  "meta":{
    "name":"ui$tab",
    "extends":"markup://aura:component"
  },
  "controller":{
    "setActive":function(cmp, evt) {
        var active = $A.util.getBooleanValue(evt.getParam("active"));

        cmp.set("v.active", active);

        if (active) {
            cmp.get("e.onActivated").setParams({"tab": cmp}).fire();
        }
    }
  },
  "renderer":{
    "afterRender":function(cmp) {
        
        var tabBodyCmp = cmp.find("tabBody");
        if (tabBodyCmp && tabBodyCmp.isValid()) {  
            var element = tabBodyCmp.getElement();
            if (element) {
                element.setAttribute("id", cmp.getGlobalId());
            }
        }

        cmp.superAfterRender();
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:tab",
  "st":{
    "descriptor":"css://ui.tab",
    "cl":"uiTab"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","I",false],
    ["title","aura://String","PP",false],
    ["name","aura://String","PP",false],
    ["icon","aura://Aura.Component[]","I",false,[]],
    ["scroll","aura://Boolean","I",false,false],
    ["active","aura://Boolean","I",false],
    ["hidden","aura://Boolean","I",false],
    ["iconClass","aura://String","I",false],
    ["closable","aura://Boolean","I",false],
    ["ariaControlId","aura://String","I",false]
  ],
  "re":[
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"setActive",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"beforeActivate",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onActivated",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.setActive"
      },
      "n":"setActive"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"tabBody",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.add(fn.add(fn.add(cmp.get(\"v.class\"),\" tabs__content\"),(cmp.get(\"v.scroll\")?\" scrolling\":\"\")),(cmp.get(\"v.active\")?\" active\":\"\"));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tab",
                        "path":"v.scroll"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tab",
                        "path":"v.active"
                      },
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tab",
                        "path":"v.class"
                      }
                    ],
                    "byValue":false
                  },
                  "aria-expanded":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return (cmp.get(\"v.active\")?\"true\":\"false\");}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"ui:tab",
                        "path":"v.active"
                      }
                    ],
                    "byValue":false
                  },
                  "role":"tabpanel"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"section"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tab",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:tabBar':function(){/*$A.componentService.addComponentClass("markup://ui:tabBar",function() {
return {
  "meta":{
    "name":"ui$tabBar",
    "extends":"markup://aura:component"
  },
  "controller":{
    "onInit":function(cmp, evt, helper) {
        if (cmp.get("v.useOverflowMenu")) {
            helper.initializeOverflowData(cmp);
        }
    },
    "setActive":function(cmp, evt, helper) {
		var active = evt.getParam("active");
		
		var index = parseInt(evt.getParam("index"));
		if (active) {
			helper.activateTab(cmp, index, evt.getParam("focus"));
		} else {
			var tab = cmp.get("v.tabHeaders")[index];
			if (cmp._activeTab === tab) {
				
				tab.setActive(false);
				cmp._activeTab = null;
				cmp._activeTabIndex = -1;
			}
		}
	},
    "addTab":function(cmp, evt, helper) {
		helper.addTab(cmp, evt.getParam("index"), evt.getParam("tab"), evt.getParam("callback"), evt.getParam("name"));
	},
    "closeTab":function(cmp, evt, helper) {
		var succeed = helper.closeTab(cmp, evt.getParam("index"), evt.getParam("tab"));
		var callback = evt.getParam("callback");
		if (typeof callback === "function") {
			callback(succeed);
		}
	},
    "updateTab":function(cmp, evt, helper) {
		helper.updateTab(cmp, evt.getParam("index"), evt.getParam("tab"), evt.getParam("callback"), evt.getParam("name"));
	},
    "onOverflowSelection":function(cmp, evt, helper) {
		var overflowData = helper.getOverflowData(cmp),
			index = evt.getParam("index"),
			oldTab = cmp._activeTab && cmp._activeTab.isValid() ? cmp._activeTab : null,
			e = cmp.get('e.onTabActivated');

		
		
		if ($A.util.isUndefinedOrNull(index)) {
			index = overflowData.tabCache[evt.getParam("name").toLowerCase()];
		} else if (index === -1) {
			var visibleTabs = overflowData.visibleTabs;
			index = visibleTabs[visibleTabs.length - 1].index;
		}
		e.setParams({"index": index, "oldTab": oldTab, "focus": evt.getParam("focus")}).fire();
	},
    "onKeyDown":function(cmp, evt, helper) {
		helper.onKeyDown(cmp, evt);
	},
    "onTabActivated":function(cmp, evt) {
		var tab = evt.getSource();
		var	index = cmp.get("v.tabHeaders").indexOf(tab);
		if (index !== cmp._activeTabIndex) {
			var oldTab = cmp._activeTab && cmp._activeTab.isValid() ? cmp._activeTab : null;
			cmp.get("e.onTabActivated").setParams({"index": index, "oldTab": oldTab}).fire();
			cmp._activeTabIndex = index;
		}
	},
    "onTabClosed":function(cmp, evt, helper) {
		var tabItems = cmp.get("v.tabHeaders"), item = evt.getSource(),
			index = tabItems.indexOf(item);

		helper.closeTab(cmp, index);
		cmp.get("e.onTabClosed").setParams({"index": index}).fire();
	},
    "onTabHover":function(cmp, evt) {
		cmp.getEvent("onTabHover").setParams(evt.getParams()).fire();
	},
    "onTabUnhover":function(cmp, evt) {
		cmp.getEvent("onTabUnhover").setParams(evt.getParams()).fire();
	},
    "onResize":function(cmp, evt, helper) {
		helper.onResize(cmp);
	}
  },
  "helper":{
    "activateTab":function(cmp, index, focus) {
        var tabItems = cmp.get("v.tabHeaders");
        if ($A.util.isNumber(index) && tabItems[index]) {
            var tabItem = tabItems[index];
            if (cmp.get("v.useOverflowMenu") && this.isInOverflow(cmp, this.getTabName(tabItem))
                && focus !== false) {
                this.updateOverflowTab(cmp, index);
            }

            this.deactivateTab(cmp, tabItem);
            tabItem.setActive(true, focus);
            cmp._activeTabIndex = index;
            cmp._activeTab = tabItem;
        }
    },
    "closeTab":function(cmp, index) {
        var closed = false;
        var tabItems = cmp.get("v.tabHeaders");
        if ($A.util.isNumber(index) && index >= 0 && index < tabItems.length) {
            tabItems.splice(index, 1);
            cmp.set("v.tabHeaders",tabItems);
            closed = true;
        }
        return closed;
    },
    "addTab":function(cmp, index, tab, callback) {
        var self = this, items = cmp.get("v.tabHeaders");
        if ($A.util.isNumber(index) && index >= 0 && index <= items.length) {
            tab.localId = "tabItem";
            var tabValues = [tab];
            this.createComponents(cmp, tabValues, function (newItems) {
                items.splice.apply(items, [index, 0].concat(newItems));
                cmp.set("v.tabHeaders", items);
                if (newItems[0].get("v.active")) {
                    self.activateTab(cmp, index);
                }
                if (typeof callback === "function") {
                    callback(newItems[0]);
                }
            });
        }
    },
    "updateTab":function(cmp, index, tab, callback, name) {

        var tabs = cmp.get("v.tabHeaders"),
            existingTab;

        
        if(name) {
            existingTab = tabs.filter(function(tabHeader) {
                return tabHeader.get("v.name") === name;
            })[0];
        } else if($A.util.isNumber(index) && index >= 0 && index < tabs.length) {
            existingTab = tabs[index];
        }

        if(existingTab) {
            tab.title && existingTab.set("v.title", tab.title);

            if(tab.icon) {
                var icon = $A.createComponentFromConfig(tab.icon);
                existingTab.set("v.icon", icon);
                if (typeof callback === "function") {
                    callback(existingTab);
                }
            } else if (typeof callback === "function") {
                callback(existingTab);
            }
        }
    },
    "deactivateTab":function(cmp, activeTab) {
        if (cmp._activeTab === activeTab) {
            return;
        }
        if (cmp._activeTab && cmp._activeTab.isValid()) {
            cmp._activeTab.setActive(false);
        }
    },
    "onKeyDown":function(cmp, domEvent) {
        var srcElement = domEvent.srcElement || domEvent.target, keyCode = domEvent.keyCode;

        if (srcElement.hasAttribute("aria-selected") && keyCode >= 37 && keyCode <= 40) {
            var useOverflow = cmp.get("v.useOverflowMenu");
            var overflowData = this.getOverflowData(cmp);
            var visibleTabs = overflowData.visibleTabs;
            var activateOverflowMenu = false;

            var tabItems = cmp.get("v.tabHeaders"), len = tabItems.length;
            var srcIndex = this.getTabIndex(cmp, srcElement);
            var visibleElementIndex = this.getTabIndex(cmp, srcElement, true);

            if (srcIndex < 0 || srcIndex >= len) {
                return;
            }

            var oldTab = srcIndex;
            if (keyCode === 37 || keyCode === 38) {
                
                if (useOverflow && overflowData.hasOverflow) {
                    if (visibleElementIndex === 0) {
                        activateOverflowMenu = true;
                    } else {
                        srcIndex = overflowData.visibleTabs[--visibleElementIndex].index;
                    }
                } else if (srcIndex === 0) {
                    srcIndex = len - 1;
                } else {
                    srcIndex--;
                }
            } else if (keyCode === 39 || keyCode === 40) {
                
                if (useOverflow && overflowData.hasOverflow) {
                    if (visibleElementIndex === visibleTabs.length - 1) {
                        activateOverflowMenu = true;
                    } else {
                        srcIndex = visibleTabs[++visibleElementIndex].index;
                    }
                } else if (srcIndex === len - 1) {
                    srcIndex = 0;
                } else {
                    srcIndex++;
                }
            }

            if (activateOverflowMenu) {
                
                cmp.find("overflowMenu").focus();
            } else {
                cmp.get('e.onTabActivated').setParams({"index": srcIndex, "oldTab": oldTab}).fire();
            }
            $A.util.squash(domEvent, true);
        }
    },
    "getTabIndex":function(cmp, element, visible) {
        var index = -1, container = cmp.find("tabItemsContainer").getElement();
        var el = element;
        var children;
        while (el.parentNode) {
            if (el.parentNode === container) {
                children = visible ? container.querySelectorAll("li.uiTabItem:not([class*='hidden'])") : container.children;
                index = Array.prototype.indexOf.call(children, el);
                break;
            }
            el = el.parentNode;
        }
        return index;
    },
    "setTabItems":function(cmp) {
        this.createComponents(cmp, cmp.get("v.tabs"), function (items) {
            cmp.set("v.tabHeaders", items);
        });
    },
    "createComponents":function(cmp, tabValues, callback) {
        var items = [];
        var len = tabValues.length;
        var counter = len;

        var fn = function (newCmp) {
            counter--;
            items.push(newCmp);
            
            if(newCmp.get("v.active")) {
                cmp._activeTabIndex = items.length-1;
                cmp._activeTab = newCmp;
            }
            
            if (counter === 0 && callback) {
                callback(items);
            }
        };

        for (var i = 0; i < len; i++) {
            var config = tabValues.get ? tabValues.get(i) : tabValues[i];

            var attributes = config.attributes.values || config.attributes;
            attributes["onActivate"] = cmp.getReference("c.onTabActivated");
            attributes["onClose"] = cmp.getReference("c.onTabClosed");
            attributes["onTabHover"] = cmp.getReference("c.onTabHover");
            attributes["onTabUnhover"] = cmp.getReference("c.onTabUnhover");

            attributes["aura:id"] = config.localId;

            var descriptor = config.descriptor || config.componentDef.descriptor;
            $A.createComponent(descriptor, attributes, fn);
        }
        
    },
    "calculateMaxTabs":function(cmp) {
        var overflowData = this.getOverflowData(cmp);
        var barWidth = this.getBarWidth(cmp);
        var tabItems = cmp.get("v.tabHeaders");
        var tabsFitting = 0;
        var mustShowTabs = this.getMustShowTabs(cmp) ;
        var mustShowTabIndices = mustShowTabs.indices;
        var visibleTabWidths = [];

        overflowData.barWidth = barWidth;
        barWidth -= mustShowTabs.totalWidth;
        tabsFitting += mustShowTabs.indices.length;

        if (barWidth > 0) {
            var tabItem, width, totalTabs = tabItems.length;
            for (var i = 0; i < totalTabs; i++) {
                tabItem = tabItems[i];
                if (!tabItem.isRendered() || mustShowTabIndices.indexOf(i) >= 0) {
                    continue;
                }
                width = this.getOuterWidth(tabItem.getElement());
                if (width > 0) {
                    if (barWidth > width) {
                        barWidth -= width;
                        tabsFitting++;
                        visibleTabWidths.push(width);
                    } else {
                        break;
                    }
                }
            }
            if (visibleTabWidths.length > 0 && tabsFitting < totalTabs) {
                var tabWidth = visibleTabWidths.pop();
                var menuWidth = this.getOverflowMenuWidth(cmp);
                if (tabWidth && barWidth < menuWidth) {
                    barWidth = barWidth + tabWidth - menuWidth;
                    tabsFitting--;
                }
            }
        }
        overflowData.extraWidth = barWidth;

        return tabsFitting;
    },
    "getMustShowTabs":function(cmp) {
        var totalWidth = 0;
        var numberOfTabs = 0;
        var indices = [];
        if (cmp._activeTab && cmp._activeTab.isValid()) {
            
            totalWidth = this.getActiveTabWidth(cmp);
            numberOfTabs++;
            indices.push(cmp._activeTabIndex);
        }
        return {numberOfTabs: numberOfTabs, totalWidth: totalWidth, indices: indices};
    },
    "getActiveTabWidth":function(cmp) {
        var tab = cmp._activeTab;
        return tab && tab.isValid() && tab.isRendered() ? this.getOuterWidth(tab.getElement()) : 0;
    },
    "getOverflowMenuWidth":function(cmp) {
        var overflowMenu = cmp.find("overflowMenu").getElement();
        return overflowMenu ? this.getOuterWidth(overflowMenu) : 0;
    },
    "initializeOverflowData":function(cmp) {
        var overflowData = this.getOverflowData(cmp);

        overflowData.barWidth = 0;
        overflowData.extraWidth = 0;
        overflowData.hasOverflow = false;
        overflowData.tabCache = [];
        overflowData.visibleTabs = [];
    },
    "getBarWidth":function(cmp) {
        var element = cmp.find("tabItemsContainer").getElement();
        return (element && element.getBoundingClientRect().width) || 0;
    },
    "getOuterWidth":function(el) {
        var dataAttr = "original-width";
        var width = $A.util.getDataAttribute(el, dataAttr);
        if ($A.util.isUndefinedOrNull(width)) {
            var style = window.getComputedStyle(el, '') || el.style;
            width = parseFloat(style["marginLeft"]) + parseFloat(style["marginRight"]) + el.offsetWidth;
            $A.util.setDataAttribute(el, "original-width", width);
        } else {
            width = parseFloat(width);
        }

        return $A.util.isUndefinedOrNull(width) ? 0 : width;
    },
    "adjustOverflow":function(cmp) {
        var tabCache = {};
        var overflowData = this.getOverflowData(cmp);
        var maxTabs = this.calculateMaxTabs(cmp);
        var tabItems = cmp.get("v.tabHeaders");
        var startIndex = cmp._activeTab && cmp._activeTabIndex >= maxTabs ? maxTabs - 1 : maxTabs;
        
        
        if(tabItems.length === 0){
        	this.toggleOverflowMenu(cmp, false);
            overflowData.hasOverflow = false;
        }
        
        if (maxTabs === overflowData.visibleTabs.length) {
            return;
        }

        this.updateVisibleTabs(overflowData, tabItems, startIndex);
        if (maxTabs >= tabItems.length) {
            
            this.toggleOverflowMenu(cmp, false);
            overflowData.hasOverflow = false;
        } else {
            var tabItem, menuItems = [], title, key;

            this.toggleOverflowMenu(cmp, true);
            overflowData.hasOverflow = true;

            for (var i = startIndex; i < tabItems.length; i++) {
                tabItem = tabItems[i];
                key = this.getTabName(tabItem);
                if (!tabItem.get("v.active")) {
                    
                    title = tabItem.get("v.title");
                    tabCache[key] = i;
                    tabItem.set("v.hidden", true);
                    menuItems.push(this.createMenuItem(key, title, i));
                } else {
                    overflowData.visibleTabs.push({key: key, index: i});
                }
            }

            if (menuItems.length > 0) {
                cmp.find("overflowMenu").set("v.menuItems", menuItems);
            }
        }

        overflowData.tabCache = tabCache;
    },
    "onResize":function(cmp) {
        var overflowData = this.getOverflowData(cmp);
        var barWidth = this.getBarWidth(cmp);
        if (barWidth > 0 && overflowData.barWidth !== barWidth) {
            var helper = this;
            requestAnimationFrame($A.getCallback(function () {
                if (cmp.isValid()) {
                    helper.adjustOverflow(cmp);
                }
            }));
        } else if (barWidth === 0 && overflowData.barWidth === 0) {
            
            this.toggleOverflowMenu(cmp, false);
        }
    },
    "updateVisibleTabs":function(overflowData, tabItems, startIndex) {
        var visibleTabs = [];
        var tabItem, key;
        for (var i = 0; i < startIndex; i++) {
            tabItem = tabItems[i];
            key = this.getTabName(tabItem);
            visibleTabs.push({key: key, index: i});

            if (tabItem.get("v.hidden")) {
                tabItem.set("v.hidden", false);
            }
        }
        overflowData.visibleTabs = visibleTabs;
    },
    "toggleOverflowMenu":function(cmp, visible) {
        var overflowMenu = cmp.find("overflowMenu");
        $A.util[visible ? 'removeClass' : 'addClass'](overflowMenu.getElement(), "hidden");
    },
    "updateOverflowTab":function(cmp, index) {
        var overflowData = this.getOverflowData(cmp),
            tabItems = cmp.get("v.tabHeaders"),
            tabCache = overflowData.tabCache,
            visibleTabs = overflowData.visibleTabs,
            targetIndex = visibleTabs[visibleTabs.length - 1].index,
            targetTab = tabItems[targetIndex],
            sourceTab = tabItems[index];

        if (index !== targetIndex) {
            var overflowMenu = cmp.find("overflowMenu");
            var menuList = overflowMenu.get("v.menuItems");
            var sourceTabName = this.getTabName(sourceTab);
            
            menuList = menuList.filter(function(menuItem) {
                return menuItem.id !== sourceTabName;
            });
            delete tabCache[sourceTabName];

            var tabs = this.findVisibleTabsToReplace(cmp, overflowData, sourceTab, targetTab);
            var tab;
            for (var i = 0; i < tabs.length; i++) {
                tab = tabs[i].tab;
                this.toggleTab(tab, true);
                this.insertMenuItem(cmp, tab, menuList);
                tabCache[this.getTabName(tab)] = tabs[i].index;
                visibleTabs.pop();
            }

            overflowMenu.set("v.menuItems", menuList);
            
            this.toggleTab(sourceTab, false);
            visibleTabs.push({key: this.getTabName(sourceTab), index: index});
        }
    },
    "findVisibleTabsToReplace":function(cmp, overflowData, sourceTab, targetTab) {
        var visibleTabs = overflowData.visibleTabs;
        var tabItems = cmp.get("v.tabHeaders");
        var availableWidth = this.getOuterWidth(targetTab.getElement()) + overflowData.extraWidth;
        var sourceWidth = this.getOuterWidth(sourceTab.getElement());
        var tabs = [];
        var targetTabIndex = visibleTabs.length - 1;
        var nextTab, index;

        tabs.push({tab: targetTab, index: visibleTabs[targetTabIndex].index});
        while (sourceWidth > availableWidth && targetTabIndex-- > 0) {
            index = visibleTabs[targetTabIndex].index;
            nextTab = tabItems[index];
            availableWidth += this.getOuterWidth(nextTab.getElement());
            tabs.push({tab: nextTab, index: index});
        }
        overflowData.extraWidth = availableWidth - sourceWidth;
        return tabs;
    },
    "insertMenuItem":function(cmp, tabItem, menuList) {
        
        var tabIndex = this.getTabIndex(cmp, tabItem.getElement());
        var insertIndex = 0;
        var len = menuList.length;
        while (insertIndex < len) {
            var index = menuList[insertIndex].value;
            if (index > tabIndex) {
                break;
            }
            insertIndex++;
        }

        menuList.splice(insertIndex, 0, this.createMenuItemFromTab(tabItem, tabIndex));
    },
    "toggleTab":function(tab, condition) {
        if (condition === undefined) {
            condition = !tab.get("v.hidden");
        }

        tab.set("v.hidden", condition);
        $A.util.toggleClass(tab, "hidden", condition);
    },
    "isInOverflow":function(cmp, key) {
        var overflowData = this.getOverflowData(cmp);
        return overflowData.tabCache[key] >= 0;
    },
    "getTabName":function(tab) {
        return (tab.get("v.name") || tab.get("v.title")|| "").toLowerCase();
    },
    "getOverflowData":function(cmp) {
        var data = cmp.get("v.overflowData");
        if(!data) {
            data = {};
            cmp.set("v.overflowData", data);
        }
        return data;
    },
    "createMenuItemFromTab":function(tab, tabIndex) {
        var name = this.getTabName(tab);
        return this.createMenuItem(name, tab.get("v.title") || name, tabIndex);
    },
    "createMenuItem":function(id, label, value) {
        return {id : id, label : label, value: value};
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        
        
        if ($A.util.isEmpty(cmp.get("v.tabHeaders"))) {
            helper.setTabItems(cmp);
        }
        return cmp.superRender();
    },
    "rerender":function(cmp, helper) {
        if (cmp.isDirty("v.tabs")) {
            helper.setTabItems(cmp);
        }

        return cmp.superRerender();
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:tabBar",
  "st":{
    "descriptor":"css://ui.tabBar",
    "cl":"uiTabBar"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["tabs","aura://List","I",false,[]],
    ["class","aura://String","I",false],
    ["useOverflowMenu","aura://Boolean","I",false,false],
    ["overflowLabel","aura://String","I",false,"More"],
    ["overflowIcon","aura://Aura.Component[]","I",false,[]],
    ["name","aura://String","I",false],
    ["overflowData","aura://Map","p",false,null],
    ["tabHeaders","aura://Aura.Component[]","p",false,[]],
    ["ariaLabel","aura://String","I",false]
  ],
  "re":[
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"addTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabHover",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"setActive",
      "xs":"I"
    },
    {
      "ed":"markup://ui:onTabHover",
      "n":"onTabUnhover",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onTabActivated",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"updateTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"closeTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onTabClosed",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.setActive"
      },
      "n":"setActive"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.addTab"
      },
      "n":"addTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.closeTab"
      },
      "n":"closeTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateTab"
      },
      "n":"updateTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "ld":{
    "*":{
      "description":"Content inside tabs",
      "context":{
        "tab-name":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:tabBar",
          "path":"v.name"
        }
      },
      "alias":"tab-bar-content"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:if"
          },
          "attributes":{
            "values":{
              "isTrue":{
                "descriptor":"isTrue",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"ui:tabBar",
                  "path":"v.useOverflowMenu"
                }
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:resizeObserver"
                    },
                    "attributes":{
                      "values":{
                        "onresize":{
                          "descriptor":"onresize",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabBar",
                            "path":"c.onResize"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"div",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:tabBar",
                    "path":"v.class"
                  },
                  "role":"tablist",
                  "aria-label":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:tabBar",
                    "path":"v.ariaLabel"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"tabItemsContainer",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"tabs__nav",
                            "onkeydown":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:tabBar",
                              "path":"c.onKeyDown"
                            },
                            "role":"presentation"
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"ul"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:tabBar",
                                      "path":"v.tabHeaders"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:tabBar",
                                      "path":"v.useOverflowMenu"
                                    }
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://ui:tabOverflowMenuItem"
                                        },
                                        "localId":"overflowMenu",
                                        "attributes":{
                                          "values":{
                                            "onTabSelection":{
                                              "descriptor":"onTabSelection",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabBar",
                                                "path":"c.onOverflowSelection"
                                              }
                                            },
                                            "icon":{
                                              "descriptor":"icon",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabBar",
                                                "path":"v.overflowIcon"
                                              }
                                            },
                                            "title":{
                                              "descriptor":"title",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:tabBar",
                                                "path":"v.overflowLabel"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:treeNode':function(){/*$A.componentService.addComponentClass("markup://ui:treeNode",function() {
return {
  "meta":{
    "name":"ui$treeNode",
    "extends":"markup://aura:component"
  },
  "controller":{
    "handleInputChange":function(cmp, event) {
        cmp.set('v.expanded', event.target.checked);
    },
    "makeVisitor":function(cmp, event, helper) {
        var visitor;
        var visitorParam = event.getParam('visitor');
        if ($A.util.isUndefinedOrNull(visitorParam)) {
            visitor = null;
        } else {
            visitor = helper["init" + visitorParam]();
        }

        
        var traverser = helper["init" + event.getParam("traverser")]();
        var callback = event.getParam("callback");
        callback({
            'visitor' : visitor,
            'traverser' : traverser
        });
    },
    "traverse":function(cmp, event) {
        var visitor = event.getParam("visitor");
        var traverser = event.getParam("traverser");
        traverser.visitor = visitor;
        traverser.traverse(cmp);
    },
    "getChildren":function(cmp, event, helper) {
        var ret = helper.getChildren(cmp);
        event.getParam('callback')(ret);
    }
  },
  "helper":{
    "getChildren":function(node) {
        
        var ret = [].concat(node.find('modelNode') || []);
        var children = node.get("v.body") || [];
        for (var i = 0, n = children.length; i < n; i++) {
            var child = children[i];
            
            
            if (child.isInstanceOf("ui:treeNode")) {
                ret.push(child);
            }
        }
        
        return ret;
    },
    "initPostOrderTraverser":function() {
        var helper = this;
        if (!helper.PostOrderTraverser) {

            

            helper.PostOrderTraverser = function() {
                this.visitor = null;
            };

            helper.PostOrderTraverser.prototype.traverse = function(node) {
                
                if (!this.visitor.visit(node)) {
                    return;
                }

                
                var children = helper.getChildren(node);
                for ( var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    child.getEvent("traverse").setParams({
                        "traverser" : this,
                        "visitor" : this.visitor
                    }).setComponentEvent().fire();
                }

                
                this.visitor.accept(node);
                this.visitor.endVisit(node);
            };
        }
        return new helper.PostOrderTraverser();
    },
    "initPreOrderTraverser":function() {
        var helper = this;
        if (!helper.PreOrderTraverser) {
            helper.PreOrderTraverser = function() {
                this.visitor = null;
            };

            

            helper.PreOrderTraverser.prototype.traverse = function(node) {
                
                if (!this.visitor.visit(node)) {
                    return;
                }

                
                this.visitor.accept(node);

                
                var children = helper.getChildren(node);
                for (var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    child.getEvent("traverse").setParams({
                        "traverser" : this,
                        "visitor" : this.visitor
                    }).setComponentEvent().fire();
                }

                this.visitor.endVisit(node);
            };
        }
        return new helper.PreOrderTraverser();
    },
    "initPrintVisitor":function() {
        var helper = this;
        if (!helper.PrintVisitor) {
            

            helper.PrintVisitor = function() {
                this.level = 0;
            };

            helper.PrintVisitor.prototype.accept = function(node) {
            	

                console.log(node.get('v.title') + " - " + this.level);
            };

            helper.PrintVisitor.prototype.visit = function() {
                this.level += 1;
                return true;
            };

            helper.PrintVisitor.prototype.endVisit = function() {
                this.level -= 1;
            };
        }

        return new helper.PrintVisitor();
    },
    "initApplyVisitor":function(funcToApply) {
        var helper = this;
        if (!helper.ApplyVisitor) {

            

            helper.ApplyVisitor = function(functionToApply) {
                this.funcToApply = functionToApply;
            };

            helper.ApplyVisitor.prototype.visit = function() {
                return true;
            };

            helper.ApplyVisitor.prototype.accept = function(node) {
                this.funcToApply(node);
            };

            helper.ApplyVisitor.prototype.endVisit = function() {
            };
        }
        return new helper.ApplyVisitor(funcToApply);
    },
    "initCollapseVisitor":function() {
        var helper = this;
        if (!helper.CollapseVisitor) {
            

            helper.CollapseVisitor = function() {
            };

            helper.CollapseVisitor.prototype.visit = function(node) {
                var expanded = node.get('v.expanded');
                
                return expanded;
            };

            helper.CollapseVisitor.prototype.accept = function(node) {
                node.set("v.expanded", false);
            };

            helper.CollapseVisitor.prototype.endVisit = function() {
            };
        }
        return new helper.CollapseVisitor();
    }
  },
  "renderer":{
    "afterRender":function(cmp) {
        var active = cmp.get('v.active');
        if (active) {
            cmp.getElement().setAttribute('active', 'true');
        }

        return cmp.superAfterRender(cmp);
    },
    "rerender":function(cmp) {
        if (cmp.isDirty("v.active")) {
            var active = $A.util.getBooleanValue(cmp.get("v.active"));
            var elem = cmp.getElement();
            if (active) {
                elem.setAttribute('active', 'true');
                if(elem.scrollIntoViewIfNeeded){
	                elem.scrollIntoViewIfNeeded();
                }
                else{
					elem.scrollIntoView(false);
                }
            } else {
                elem.removeAttribute('active');
            }
        }
        return cmp.superRerender(cmp);
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:treeNode",
  "st":{
    "descriptor":"css://ui.treeNode",
    "cl":"uiTreeNode"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["href","aura://String","I",false],
    ["title","aura://String","I",false],
    ["leafClass","aura://String","I",false],
    ["class","aura://String","I",false],
    ["expanded","aura://Boolean","I",false,false],
    ["active","aura://Boolean","I",false],
    ["hidden","aura://Boolean","I",false,false],
    ["item","java://org.auraframework.components.ui.TreeNode","I",false,null]
  ],
  "i":[
    "markup://ui:visitable"
  ],
  "re":[
    {
      "ed":"markup://ui:traverseEvent",
      "n":"traverse",
      "xs":"I"
    },
    {
      "ed":"markup://ui:makeVisitor",
      "n":"makeVisitor",
      "xs":"I"
    },
    {
      "ed":"markup://ui:getChildren",
      "n":"getChildren",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.traverse"
      },
      "n":"traverse"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.makeVisitor"
      },
      "n":"makeVisitor"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.getChildren"
      },
      "n":"getChildren"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:if"
          },
          "attributes":{
            "values":{
              "isTrue":{
                "descriptor":"isTrue",
                "value":{
                  "exprType":"FUNCTION",
                  "code":"function(cmp,fn){return !(cmp.get(\"v.hidden\"));}",
                  "args":[
                    {
                      "exprType":"PROPERTY",
                      "byValue":false,
                      "target":"ui:treeNode",
                      "path":"v.hidden"
                    }
                  ],
                  "byValue":false
                }
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":{
                              "exprType":"FUNCTION",
                              "code":"function(cmp,fn){return fn.add(fn.add(((fn.ne(cmp.get(\"v.item.href\"),null)||fn.ne(cmp.get(\"v.href\"),null))?\"file\":\"folder\"),\" \"),cmp.get(\"v.class\"));}",
                              "args":[
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:treeNode",
                                  "path":"v.href"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:treeNode",
                                  "path":"v.item.href"
                                },
                                {
                                  "exprType":"PROPERTY",
                                  "byValue":false,
                                  "target":"ui:treeNode",
                                  "path":"v.class"
                                }
                              ],
                              "byValue":false
                            },
                            "expanded":{
                              "exprType":"PROPERTY",
                              "byValue":false,
                              "target":"ui:treeNode",
                              "path":"v.expanded"
                            }
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"li"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:if"
                              },
                              "attributes":{
                                "values":{
                                  "isTrue":{
                                    "descriptor":"isTrue",
                                    "value":{
                                      "exprType":"FUNCTION",
                                      "code":"function(cmp,fn){return (fn.ne(cmp.get(\"v.item.href\"),null)||fn.ne(cmp.get(\"v.href\"),null));}",
                                      "args":[
                                        {
                                          "exprType":"PROPERTY",
                                          "byValue":false,
                                          "target":"ui:treeNode",
                                          "path":"v.href"
                                        },
                                        {
                                          "exprType":"PROPERTY",
                                          "byValue":false,
                                          "target":"ui:treeNode",
                                          "path":"v.item.href"
                                        }
                                      ],
                                      "byValue":false
                                    }
                                  },
                                  "else":{
                                    "descriptor":"else",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "for":{
                                                  "exprType":"FUNCTION",
                                                  "code":"function(cmp,fn){return fn.add(\"node_\",cmp.get(\"globalId\"));}",
                                                  "args":[
                                                    {
                                                      "exprType":"PROPERTY",
                                                      "byValue":false,
                                                      "target":"ui:treeNode",
                                                      "path":"globalId"
                                                    }
                                                  ],
                                                  "byValue":false
                                                }
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"label"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"FUNCTION",
                                                          "code":"function(cmp,fn){return fn.add(cmp.get(\"v.item.title\"),cmp.get(\"v.title\"));}",
                                                          "args":[
                                                            {
                                                              "exprType":"PROPERTY",
                                                              "byValue":false,
                                                              "target":"ui:treeNode",
                                                              "path":"v.item.title"
                                                            },
                                                            {
                                                              "exprType":"PROPERTY",
                                                              "byValue":false,
                                                              "target":"ui:treeNode",
                                                              "path":"v.title"
                                                            }
                                                          ],
                                                          "byValue":false
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "onchange":{
                                                  "exprType":"PROPERTY",
                                                  "byValue":false,
                                                  "target":"ui:treeNode",
                                                  "path":"c.handleInputChange"
                                                },
                                                "type":"checkbox",
                                                "checked":{
                                                  "exprType":"PROPERTY",
                                                  "byValue":false,
                                                  "target":"ui:treeNode",
                                                  "path":"v.expanded"
                                                },
                                                "id":{
                                                  "exprType":"FUNCTION",
                                                  "code":"function(cmp,fn){return fn.add(\"node_\",cmp.get(\"globalId\"));}",
                                                  "args":[
                                                    {
                                                      "exprType":"PROPERTY",
                                                      "byValue":false,
                                                      "target":"ui:treeNode",
                                                      "path":"globalId"
                                                    }
                                                  ],
                                                  "byValue":false
                                                }
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"input"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{
                                                "class":{
                                                  "exprType":"PROPERTY",
                                                  "byValue":false,
                                                  "target":"ui:treeNode",
                                                  "path":"v.leafClass"
                                                },
                                                "href":{
                                                  "exprType":"FUNCTION",
                                                  "code":"function(cmp,fn){return fn.add(cmp.get(\"v.item.href\"),cmp.get(\"v.href\"));}",
                                                  "args":[
                                                    {
                                                      "exprType":"PROPERTY",
                                                      "byValue":false,
                                                      "target":"ui:treeNode",
                                                      "path":"v.href"
                                                    },
                                                    {
                                                      "exprType":"PROPERTY",
                                                      "byValue":false,
                                                      "target":"ui:treeNode",
                                                      "path":"v.item.href"
                                                    }
                                                  ],
                                                  "byValue":false
                                                }
                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"a"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:expression"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":{
                                                          "exprType":"FUNCTION",
                                                          "code":"function(cmp,fn){return fn.add(cmp.get(\"v.item.title\"),cmp.get(\"v.title\"));}",
                                                          "args":[
                                                            {
                                                              "exprType":"PROPERTY",
                                                              "byValue":false,
                                                              "target":"ui:treeNode",
                                                              "path":"v.item.title"
                                                            },
                                                            {
                                                              "exprType":"PROPERTY",
                                                              "byValue":false,
                                                              "target":"ui:treeNode",
                                                              "path":"v.title"
                                                            }
                                                          ],
                                                          "byValue":false
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{

                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"ol"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:iteration"
                                        },
                                        "attributes":{
                                          "values":{
                                            "var":{
                                              "descriptor":"var",
                                              "value":"child"
                                            },
                                            "items":{
                                              "descriptor":"items",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:treeNode",
                                                "path":"v.item.children"
                                              }
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://ui:treeNode"
                                                  },
                                                  "localId":"modelNode",
                                                  "attributes":{
                                                    "values":{
                                                      "item":{
                                                        "descriptor":"item",
                                                        "value":{
                                                          "exprType":"PROPERTY",
                                                          "byValue":false,
                                                          "target":"ui:treeNode",
                                                          "path":"child"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:expression"
                                        },
                                        "attributes":{
                                          "values":{
                                            "value":{
                                              "descriptor":"value",
                                              "value":{
                                                "exprType":"PROPERTY",
                                                "byValue":false,
                                                "target":"ui:treeNode",
                                                "path":"v.body"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auradocs:navLink':function(){/*$A.componentService.addComponentClass("markup://auradocs:navLink",function() {
return {
  "meta":{
    "name":"auradocs$navLink",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:navLink",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["location","aura://String","I",true]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "href":{
                    "exprType":"FUNCTION",
                    "code":"function(cmp,fn){return fn.add(\"#\",cmp.get(\"v.location\"));}",
                    "args":[
                      {
                        "exprType":"PROPERTY",
                        "byValue":false,
                        "target":"auradocs:navLink",
                        "path":"v.location"
                      }
                    ],
                    "byValue":false
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"a"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"auradocs:navLink",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auradocs:openTopicTree':function(){/*$A.componentService.addComponentClass("markup://auradocs:openTopicTree",function() {
return {
  "meta":{
    "name":"auradocs$openTopicTree",
    "extends":"markup://aura:component"
  },
  "controller":{
    "doInit":function(cmp, evt, helper) {
        if (helper.preprocessTree(cmp, evt)) {
            helper.doUpdate(cmp);
        }
    },
    "treeChange":function(cmp, evt, helper) {
        if (helper.preprocessTree(cmp, evt)) {
            helper.doUpdate(cmp);
        }
    },
    "handleLocationChange":function(cmp, event, helper) {
        var token = event.getParam('token');
        if (token === cmp.get('v.layoutToken')) {
            
            helper.doUpdate(cmp);
        }
    }
  },
  "helper":{
    "initActiveTopicVisitor":function(topicMap, parentMap) {
        var helper = this;
        if (!helper.ActiveTopicVisitor) {
            

            helper.ActiveTopicVisitor = function(topicMapInside, parentMapInside) {
                
                this.stack = [];
                this.topicMap = topicMapInside;
                this.parentMap = parentMapInside;
            };

            

            helper.ActiveTopicVisitor.prototype.visit = function(node) {
                this.stack.push(node);
                return true;
            };

            

            helper.ActiveTopicVisitor.prototype.accept = function(node) {
                
                var href = null;
                if (node.get('v.item')) {
                    href = node.get('v.item.href');
                } else {
                    href = node.get('v.href');
                }
              
                if (href) {
                    if (this.topicMap[href]) {
                        throw new Error("auradocs:openTopicTree got a topic collision at " + href);
                    } 
                    this.topicMap[href] = node;
                }
                
                
                var parentIndex = this.stack.length - 2;
                $A.assert(parentIndex >= -1);
                if (parentIndex > -1) {
                    this.parentMap[node.getGlobalId()] = this.stack[parentIndex];
                }
            };

            helper.ActiveTopicVisitor.prototype.endVisit = function() {
                this.stack.pop();
            };
        }
        return new helper.ActiveTopicVisitor(topicMap, parentMap);
    },
    "preprocessTree":function(cmp) {
        cmp._topicMap = {};
        cmp._parentMap = {};
        cmp._activeCmp = null;
        
        var helper = this;
        
        
        var tree = cmp.get('v.tree');
        if (!$A.util.isComponent(tree)) {
            return false;
        }
        $A.assert(tree.isInstanceOf("ui:tree"), "Tree must be a ui:tree");
     
        tree.getEvent('getChildren').setParams({'callback' : function (nodes) {
            for (var i = 0, n = nodes.length; i < n; i++) {
                var root = nodes[i];
                root.getEvent("makeVisitor").setParams({
                    "traverser" : "PostOrderTraverser",
                    "callback" : function(args) {
                        args.visitor = helper.initActiveTopicVisitor(cmp._topicMap, cmp._parentMap);
                        root.getEvent("traverse").setParams(args).fire();
                    }
                }).fire(); 
            }
        }}).fire(); 
        
        return true;
    },
    "expandActiveAncestry":function(cmp) {
        var toExpand = cmp._parentMap[cmp._activeCmp.getGlobalId()];
        
        while (toExpand) {
            toExpand.set('v.expanded', true);
            toExpand = cmp._parentMap[toExpand.getGlobalId()];
        }
    },
    "highlightActive":function(cmp) {
        cmp._activeCmp.set('v.active', true);
    },
    "setActive":function(cmp) {        
        
        if (cmp._activeCmp && cmp._activeCmp.getElement()) {
            cmp._activeCmp.getElement().setAttribute('active', false);
        }

        
        var newLocation = window.location.hash;
        cmp._activeCmp = cmp._topicMap[newLocation];
        if (!cmp._activeCmp) {
            
            cmp._activeCmp = cmp._topicMap[cmp.get("v.catchAllHref")];
        }
        $A.assert(!$A.util.isUndefinedOrNull(cmp._activeCmp), "no activeCmp");
    },
    "doUpdate":function(cmp) {
        this.setActive(cmp);
        this.expandActiveAncestry(cmp);
        this.highlightActive(cmp);
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:openTopicTree",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["layoutToken","aura://String","I",false],
    ["catchAllHref","aura://String","I",false],
    ["tree","aura://Aura.Component","I",false,null]
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.treeChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.tree"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.doInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "ed":{
        "descriptor":"markup://auradocs:locationChange"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleLocationChange"
      }
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"auradocs:openTopicTree",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auradocs:searchFilterTree':function(){/*$A.componentService.addComponentClass("markup://auradocs:searchFilterTree",function() {
return {
  "meta":{
    "name":"auradocs$searchFilterTree",
    "extends":"markup://aura:component"
  },
  "controller":{
    "handleSearch":function(cmp, event, helper) {
        var tree = cmp.get('v.tree');
        $A.assert(tree.isInstanceOf("ui:tree"), "Tree must be a ui:tree");
        
        tree.getEvent('getChildren').setParams({'callback' : function(nodes) {
            
            
            var searchTerm = event.getParam('searchTerm') || event.getSource().getElement().value;
            
            for (var i = 0, n = nodes.length; i < n; i++) {
                
                
                var root = nodes[i];
                var searchVisitor = helper.initSearchFilterVisitor(searchTerm);
                
                if (searchTerm !== '') {
                    var callback = function(args) {
                        args.visitor = searchVisitor;
                        var evt = root.getEvent("traverse");
                        evt.setParams(args);
                        evt.fire();
                    };
                    root.getEvent("makeVisitor").setParams({
                        "visitor" : null,
                        "traverser" : "PostOrderTraverser",
                        "callback" : callback 
                    }).fire();
                } else {
                    
                    
                    
                    
                    root.getEvent("makeVisitor").setParams({
                        "visitor" : "ApplyVisitor",
                        "traverser" : "PostOrderTraverser",
                        "callback" : function(args) {
                            args.visitor.funcToApply = function(node) {
                                node.set('v.hidden', false);
                            };
                            root.getEvent("traverse").setParams(args).fire();
                        }
                    }).fire();
                }
            }
        }}).fire();
    }
  },
  "helper":{
    "initSearchFilterVisitor":function(query) {
        var helper = this;
        if (!helper.SearchFilterVisitor) {
            

            helper.SearchFilterVisitor = function(qry) {
            	this.query = qry;
                this.queryRe = new RegExp(qry, "i");
                
                
                this.stack = [];
            };

            

            helper.SearchFilterVisitor.prototype.accept = function(node) {
                var title = node.get('v.item.title') || '' + node.get('v.title') || '';
                
                if (this.queryRe.test(title)) {
                    
                    var record = this.stack[this.stack.length - 1];
                    record.match = true;
                }
            };

            

            helper.SearchFilterVisitor.prototype.visit = function(node) {
                
                this.stack.push({
                    "node" : node,
                    "match" : false
                });
                return true;
            };

            

            helper.SearchFilterVisitor.prototype.endVisit = function(node) {
                var record = this.stack.pop();
                
                
                $A.assert(node === record.node, "endVisit got an unexpected node");

                if (!record.match) {
                    
                    node.set('v.expanded', false);
                } else {
                    var title = node.get('v.item.title') || '' + node.get('v.title') || '';
                    

                    console.log(title);
                    
                    node.set('v.expanded', true);
                    
                    node.set('v.hidden', false);

                    
                    
                    
                    var parentIndex = this.stack.length - 1;
                    if (parentIndex >= 0) {
                        var parentRecord = this.stack[parentIndex];
                        parentRecord.match = true;
                    }
                }
            };
        }

        return new helper.SearchFilterVisitor(query);
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:searchFilterTree",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["tree","aura://Aura.Component","I",false,null]
  ],
  "re":[
    {
      "ed":"markup://ui:searchEvent",
      "n":"search",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleSearch"
      },
      "n":"search"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "id":"searchDiv"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:inputSearch"
                    },
                    "localId":"searchBox",
                    "attributes":{
                      "values":{
                        "class":{
                          "descriptor":"class",
                          "value":"searchBox"
                        },
                        "placeholder":{
                          "descriptor":"placeholder",
                          "value":"Search"
                        },
                        "search":{
                          "descriptor":"search",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"auradocs:searchFilterTree",
                            "path":"c.handleSearch"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"auradocs:searchFilterTree",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auradocs:sidebar':function(){/*$A.componentService.addComponentClass("markup://auradocs:sidebar",function() {
return {
  "meta":{
    "name":"auradocs$sidebar",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:sidebar",
  "st":{
    "descriptor":"css://auradocs.sidebar",
    "cl":"auradocsSidebar"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["toolbar","aura://Aura.Component[]","I",false,[]]
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:expression"
          },
          "attributes":{
            "values":{
              "value":{
                "descriptor":"value",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"auradocs:sidebar",
                  "path":"v.body"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auraStorage:fuelGauge':function(){/*$A.componentService.addComponentClass("markup://auraStorage:fuelGauge",function() {
return {
  "meta":{
    "name":"auraStorage$fuelGauge",
    "extends":"markup://aura:component"
  },
  "controller":{
    "init":function(cmp, event, helper) {
        var enabled = helper.isEnabled(cmp);
        cmp.set("v.enabled", enabled);
        if (enabled) {
            $A.eventService.addHandler({
                "event": "markup://auraStorage:modified",
                "globalId": cmp.getGlobalId(),
                "handler": $A.getCallback(function(e) {
                    if (!cmp.isValid()) {
                        return;
                    }
                    var eventStorageName = e.getParam("name");
                    var storageName = cmp.get("v.storageName");
                    if (eventStorageName !== storageName) {
                        return;
                    }
                    helper.update(cmp);
                })
            });
        }
    },
    "destroy":function(cmp) {
        if (cmp.get("v.enabled")) {
            $A.eventService.removeHandler({
                "event": "markup://auraStorage:modified",
                "globalId": cmp.getGlobalId()
            });
        }
    },
    "showStats":function(cmp) {
        var storage = $A.storageService.getStorage(cmp.get("v.storageName"));

        storage.getSize().then(
            undefined,
            function() { return "unknown"; }
        ).then($A.getCallback(function(size) {
            var message = $A.util.format("Storage name: {0}\nAdapter: {1}\nSize: {2} of {3} KB\n\nPress OK to clear ALL storages or cancel to abort.",
                cmp.get("v.storageName"),
                storage.getName(),
                size.toFixed ? size.toFixed(0) : size,
                storage.getMaxSize()
            );
            var confirmed = confirm(message); 
            if (confirmed) {
                $A.log("Asynchronously clearing all storages");
                var storages = $A.storageService.getStorages();
                var promises = [];
                for (var name in storages) {
                    promises.push(storages[name].clear());
                }
                Promise.all(promises).then(function() {
                    $A.log("All storages cleared");
                }, function(e) {
                    $A.warning("Error while clearing storages: ", e);
                });
            }
        }));
    }
  },
  "helper":{
    "getStorage":function(cmp) {
        if (!cmp.isValid()) {
            return undefined;
        }
        return $A.storageService.getStorage(cmp.get("v.storageName"));
    },
    "isEnabled":function(cmp) {
        var mode = $A.getContext().getMode();
        return !$A.util.isUndefinedOrNull(this.getStorage(cmp)) && (mode !== "PROD");
    },
    "update":function(cmp) {
        var storage = this.getStorage(cmp);
        var maxSize = storage.getMaxSize();

        storage.getSize().then($A.getCallback(function(size) {
            var severity;
            if (size < maxSize / 2) {
                severity = "success";
            } else if (size < maxSize) {
                severity = "warning";
            } else {
                severity = "important";
            }

            var stamp = cmp.find("stamp");
            stamp.set("v.severity", severity);
            cmp.set("v.value", Math.round(size * 100) / 100);
        }));
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auraStorage:fuelGauge",
  "st":{
    "descriptor":"css://auraStorage.fuelGauge",
    "cl":"auraStorageFuelGauge"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["storageName","aura://String","I",true],
    ["value","aura://Decimal","I",false,0],
    ["enabled","aura://Boolean","I",false]
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.destroy"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"destroy"
    }
  ],
  "ld":{
    "stamp":{
      "description":"Fuel Gauge",
      "alias":"fuel-gauge"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:if"
          },
          "attributes":{
            "values":{
              "isTrue":{
                "descriptor":"isTrue",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"auraStorage:fuelGauge",
                  "path":"v.enabled"
                }
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:stamp"
                    },
                    "localId":"stamp",
                    "attributes":{
                      "values":{
                        "onclick":{
                          "descriptor":"onclick",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"auraStorage:fuelGauge",
                            "path":"c.showStats"
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:expression"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"auraStorage:fuelGauge",
                                      "path":"v.value"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:text"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":" KB"
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "severity":{
                          "descriptor":"severity",
                          "value":"success"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auraStorage:init':function(){/*$A.componentService.addComponentClass("markup://auraStorage:init",function() {
return {
  "meta":{
    "name":"auraStorage$init",
    "extends":"markup://aura:component"
  },
  "controller":{
    "init":function(cmp, event, helper) {
        helper.init(cmp);
    },
    "connectionLost":function(cmp, event, helper) {
        var storage = helper.getStorage(cmp);
        if (storage) {
            storage.suspendSweeping();
        }
    },
    "connectionResumed":function(cmp, event, helper) {
        var storage = helper.getStorage(cmp);
        if (storage) {
            storage.resumeSweeping();
        }
    }
  },
  "helper":{
    "getStorage":function(cmp) {
        return $A.storageService.getStorage(cmp.get("v.name"));
    },
    "init":function(cmp) {
        var debugLoggingEnabled = $A.util.getBooleanValue(cmp.get("v.debugLoggingEnabled"));
        var name = cmp.get("v.name");
        var defaultExpiration = parseInt(cmp.get("v.defaultExpiration"),10);
        var defaultAutoRefreshInterval = parseInt(cmp.get("v.defaultAutoRefreshInterval"),10);
        var maxSize = cmp.get("v.maxSize") * 1024.0; 
        var clearStorageOnInit = $A.util.getBooleanValue(cmp.get("v.clearStorageOnInit"));
        var persistent = $A.util.getBooleanValue(cmp.get("v.persistent"));
        var secure = $A.util.getBooleanValue(cmp.get("v.secure"));
        var version = cmp.get("v.version");

        $A.storageService.initStorage({
            "name":                name,
            "persistent":          persistent,
            "secure":              secure,
            "maxSize":             maxSize,
            "expiration":          defaultExpiration,
            "debugLogging":        debugLoggingEnabled,
            "clearOnInit":         clearStorageOnInit,
            "version":             version,
            "autoRefreshInterval": defaultAutoRefreshInterval
        });

    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://auraStorage:init",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["name","aura://String","G",true],
    ["persistent","aura://Boolean","G",false,false],
    ["secure","aura://Boolean","G",false,false],
    ["clearStorageOnInit","aura://Boolean","G",false,true],
    ["defaultExpiration","aura://Integer","G",false,10],
    ["defaultAutoRefreshInterval","aura://Integer","G",false,30],
    ["maxSize","aura://Integer","G",false,1000],
    ["debugLoggingEnabled","aura://Boolean","G",false,false],
    ["version","aura://String","G",false,""]
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "ed":{
        "descriptor":"markup://aura:connectionLost"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.connectionLost"
      }
    },
    {
      "ed":{
        "descriptor":"markup://aura:connectionResumed"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.connectionResumed"
      }
    }
  ],
  "hs":true,
  "css":true
}*/},'markup://ui:image':function(){/*$A.componentService.addComponentClass("markup://ui:image",function() {
return {
  "meta":{
    "name":"ui$image",
    "extends":"markup://aura:component"
  },
  "controller":{
    "init":function(component) {
    	var cmp = component.getConcreteComponent();
        var imageType = cmp.get('v.imageType'),
            altText = cmp.get('v.alt') || '',
            id = cmp.getLocalId() || cmp.getGlobalId() || '';

        if (imageType === 'informational' && altText.length === 0) {
            $A.warning('component: ' + id + ' "alt" attribute should not be empty for informational image');
        } else if (imageType === 'decorative' && altText.length > 0) {
            $A.warning('component: ' + id + ': "alt" attribute should be empty for decorative image');
        }
    }
  },
  "helper":{
    "getImageElement":function(cmp) {
        var imageElement = cmp.find("body").getElement().firstChild;

        if (this.isAnchorImage(cmp)) {
            imageElement = imageElement.children[0];
        }
        return imageElement;
    },
    "isAnchorImage":function(cmp) {
        return !$A.util.isEmpty(cmp.get("v.href"));
    },
    "buildBody":function(cmp) {
        var body = cmp.find("body");

        if (body) {
            var bodyElement = body.getElement();

            $A.util.clearNode(bodyElement);

            var image = this.buildImageElement(cmp);

            var href = this.sanitizeUrl(cmp.get("v.href"));

            if (!$A.util.isEmpty(href)) {
                var link = $A.util.createHtmlElement("a", {
                    "href": href,
                    "class": cmp.get("v.linkClass"),
                    "target": cmp.get("v.target")
                });

                link.appendChild(image);
                bodyElement.appendChild(link);
            } else {
                bodyElement.appendChild(image);
            }
        }

    },
    "buildImageElement":function(cmp) {
        var image = $A.util.createHtmlElement("img", {
            "data-aura-rendered-by": cmp.getGlobalId(),
            "src": this.sanitizeUrl(cmp.get("v.src")),
            "class": cmp.get("v.class"),
            "alt": cmp.get("v.alt"),
            "title": cmp.get("v.title")
        });

        image["onerror"] = $A.getCallback(function () {
            if (cmp.isValid()) {
                cmp.get("e.onerror").fire();
            }
        });

        image["onload"] = $A.getCallback(function () {
            if (cmp.isValid()) {
                cmp.get("e.onload").setParams({"value": image}).fire();
            }
        });

        return image;
    },
    "sanitizeUrl":function(url) {
        var regex = /^\s*javascript:/;
        if (regex.test(url)) {
            return '';
        }
        return url;
    }
  },
  "renderer":{
    "render":function(cmp, helper) {
        var ret = cmp.superRender();

        helper.buildBody(cmp);

        return ret;
    },
    "rerender":function(cmp, helper) {

        cmp.superRerender();

        helper.buildBody(cmp);

    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:image",
  "st":{
    "descriptor":"css://ui.image",
    "cl":"uiImage"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["title","aura://String","I",false],
    ["imageType","aura://String","I",false,"informational"],
    ["src","aura://String","I",false,"/auraFW/resources/aura/s.gif"],
    ["class","aura://String","I",false],
    ["href","aura://String","I",false],
    ["linkClass","aura://String","I",false],
    ["alt","aura://String","I",false,""],
    ["target","aura://String","I",false,"_self"]
  ],
  "re":[
    {
      "ed":"markup://ui:response",
      "n":"onerror",
      "xs":"I"
    },
    {
      "ed":"markup://ui:response",
      "n":"onload",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.init"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"body",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{

                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"span"
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://ui:tabset':function(){/*$A.componentService.addComponentClass("markup://ui:tabset",function() {
return {
  "meta":{
    "name":"ui$tabset",
    "extends":"markup://aura:component"
  },
  "controller":{
    "onInit":function(cmp, evt, helper) {
    	helper.initTabs(cmp);
    },
    "handleDestroy":function(cmp, evt, helper) {
        helper.handleDestroy(cmp);
    },
    "closeTab":function(cmp, evt, helper) {
    	helper.closeTab(cmp, helper.getTabIndexFromEvent(cmp, evt));
    },
    "removeTab":function(cmp, evt, helper) {
        helper.removeTab(cmp, helper.getTabIndexFromEvent(cmp, evt));
    },
    "addTab":function(cmp, evt, helper) {
       	helper.addTab(cmp, evt.getParam("index"), evt.getParam("tab"), evt.getParam("callback"), evt.getParam("name"));
    },
    "updateTab":function(cmp, evt, helper) {
        helper.updateTab(cmp, evt.getParam("index"), evt.getParam("tab"), evt.getParam("callback"), evt.getParam("name"));
    },
    "getActiveTab":function(cmp, evt, helper) {
    	var callback = evt.getParam("callback");
    	if (typeof callback === "function") {
    	    var tab = helper.getActiveTab(cmp);
    	    var index = cmp._tabCollection.getTabIndex({"tab": tab});
    	    callback({"index": index, "tab": tab});
    	}
    },
    "activateTab":function(cmp, evt, helper) {
        var index = helper.getTabIndexFromEvent(cmp, evt);
        var params = evt.getParams();
        params.index = index;
        if (helper.fireBeforeActiveEvent(cmp, params)) {
            helper.setActive(cmp, {"index": index});
        }
    },
    "onTabActivated":function(cmp, evt, helper) {
        var index = evt.getParam("index"),
        	focus = evt.getParam("focus");
        
        if (helper.fireBeforeActiveEvent(cmp, evt.getParams())) {
            helper.setActive(cmp, {"index": index, "focus": $A.util.isUndefinedOrNull(focus) || focus});
        }
    },
    "onTabClosed":function(cmp, evt, helper) {
    	helper.removeTabBody(cmp, evt.getParam("index"));
    },
    "clearTabs":function(cmp, evt, helper) {
        var size = cmp._tabCollection.getSize();
        for(var c=size-1;c>=0;c--) {
            helper.removeTab(cmp, c);
        }

    }
  },
  "helper":{
    "setActive":function(cmp, option) {
        var active = option.active;
        var index = option.index;
        var tab = option.tab;
        if (typeof active === "undefined") {
            
            active = true;
        }
        if (!tab) {
            tab = cmp._tabCollection.getTab(index);
        }
        if (tab && this.fireBeforeActiveEvent(cmp, {"tab": tab, "oldTab": this.getActiveTab(cmp)}, tab)) {
            
            cmp.find("tabBar").get("e.setActive").setComponentEvent().fire({
                "index": index,
                "active": active,
                "focus": option.focus
            });
            
            this.setActiveTabBody(cmp, {"index": index, "active": active, "tab": tab});
            
            cmp.get("e.onActivate").setComponentEvent().fire({"tab": tab, "index": option.index});
        }
    },
    "addTab":function(cmp, index, tab, callback, name) {
        var size = cmp._tabCollection.getSize();
        if ($A.util.isUndefined(index) || index < 0 || index > size) {
            index = size;
        }
        this.createTabComponent(cmp, tab, function (newTab) {
            
            cmp._tabCollection.insertTab(index, newTab);
            
            var active = newTab.get("v.active");
            var e = cmp.find("tabBar").get("e.addTab");
            e.setParams({
                "index": index,
                "active": active,
                "name": name,
                "tab": this.getTabItemConfig(cmp, newTab)
            }).setComponentEvent().fire();
            if (newTab.get("v.active")) {
                this.setActiveTabBody(cmp, {"index": index, "tab": newTab, "active": true});
            }
            if ($A.util.isFunction(callback)) {
                callback({"tab": newTab});
            }
        }.bind(this));
    },
    "updateTab":function(cmp, index, tab, callback, name) {
        var e = cmp.find("tabBar").get("e.updateTab");
        e.setParams({
            "index": index,
            "name": name,
            "tab": tab
        }).setComponentEvent().fire();

        
        var tabIndex = name ? cmp._tabCollection.getTabIndex({name: name}) : index,
            existingTab = cmp._tabCollection.getTab(tabIndex);

        if(existingTab && tab.body) {
            existingTab.set("v.body", tab.body);
        }

        if($A.util.isFunction(callback)) {
            callback({"tab": existingTab});
        }
    },
    "removeTab":function(cmp, index) {
        var self = this, e = cmp.find('tabBar').get('e.closeTab');
        var callback = function (succeed) {
            if (succeed) {
                self.removeTabBody(cmp, index);
            }
        };
        e.setParams({"index": index, "callback": callback}).setComponentEvent().fire();
    },
    "getActiveTab":function(cmp) {
        return cmp._activeTab;
    },
    "fireBeforeActiveEvent":function(cmp, params, target) {
        var activate = true;
        target = target || cmp;
        var callback = function (doActivate) {
            activate = doActivate;
        };
        var tab = typeof params.index === "number" ? cmp._tabCollection.getTab(params.index) : params.tab;
        var oldTab = typeof params.oldTab === "number" ? cmp._tabCollection.getTab(params.oldTab) : params.oldTab;

        target.get("e.beforeActivate").setComponentEvent().fire({"tab": tab, "oldTab": oldTab, "callback": callback});

        return activate;
    },
    "getTabIndexFromEvent":function(cmp, evt) {
        var index = evt.getParam("index"), name = evt.getParam("name"), tab = evt.getParam("tab");
        
        if ($A.util.isString(index)) {
            index = parseInt(index);
        } else if (!$A.util.isNumber(index)) {
            index = cmp._tabCollection.getTabIndex({"name": name, "tab": tab});
        }
        return index;
    },
    "setActiveTabBody":function(cmp, option) {
        var tab = option.tab;

        var isActiveTab = cmp._activeTab === tab;

        if (option.active && !isActiveTab) {
            
            if (cmp._activeTab && cmp._activeTab.isValid()) {
                cmp._activeTab.get("e.setActive").setComponentEvent().fire({"active": false});
            }

            
            tab.get("e.setActive").setComponentEvent().fire({"active": true});

            if (!tab.isRendered()) {
                var renderedTabs = cmp.get("v.body");
                renderedTabs.push(tab);
                cmp.set("v.body", renderedTabs);
            }

            
            cmp._activeTab = tab;
        } else if (option.active === false && isActiveTab) {
            
            tab.get("e.setActive").setComponentEvent().fire({"active": false});
            cmp._activeTab = null;
        }
    },
    "removeTabBody":function(cmp, index) {
        var tabToRemove = cmp._tabCollection.getTab(index);
        var tabName = tabToRemove&&tabToRemove.get("v.name");
        var activeIndex = cmp._tabCollection.getTabIndex({"tab": cmp._activeTab});
        cmp._tabCollection.removeTab(index);
        var size = cmp._tabCollection.getSize();
        if (size > 0 && index === activeIndex) {
            
            index = (index === size) ? --index : index % size;
            this.setActive(cmp, {"index": index});
        }
        
        if (tabToRemove) {
            var attrs = { "index": index };
            if (tabName) {
                attrs["name"] = tabName;
            }
            cmp.get("e.onRemove").setComponentEvent().fire(attrs);
        }
    },
    "initTabs":function(cmp) {
        var tabConfigs = cmp.get("v.tabs");
        cmp._tabCollection = this.createTabCollection();
        if (tabConfigs && tabConfigs.length > 0) {
            this.createTabsFromAttribute(cmp, tabConfigs);
        } else {
            this.getTabsFromBody(cmp);
        }
        if ($A.util.getBooleanValue(cmp.get("v.lazyRenderTabs"))) {
            cmp.set("v.body", []);
        }
    },
    "finishInit":function(cmp, result) {
        cmp._activeTabIndex = result.activeIndex;
        cmp._tabCollection.init(result.tabs, result.tabIds, result.tabNames);
        cmp.set('v.tabItems', result.tabItemConfigs, true);
    },
    "createTabsFromAttribute":function(cmp, tabConfigs) {
        
        var tabComponents = [], tabIds = [], tabItems = [], tabNames = [], activeIndex = 0,
            lazyRendering = $A.util.getBooleanValue(cmp.get("v.lazyRenderTabs")),
            count = 0, total = tabConfigs.length - 1;

        var callback = function (newTab) {
            var id = newTab.getGlobalId(),
                name = newTab.get("v.name");

            tabIds.push(id);
            tabComponents[id] = newTab;
            tabItems.push(this.getTabItemConfig(cmp, newTab));
            if (name) {
                tabNames[name] = {"tabId": id};
            }
            if (newTab.get("v.active")) {
                activeIndex = count;
            }
            if (count === total) {
                cmp._activeTabIndex = activeIndex;
                cmp._tabCollection.init(tabComponents, tabIds, tabNames);
                cmp.set('v.tabItems', tabItems);
                if (!lazyRendering) {
                    cmp.set('v.body', tabComponents);
                }
            }
            count++;
        }.bind(this);
        for (var i = 0; i < tabConfigs.length; i++) {
            this.createTabComponent(cmp, tabConfigs[i], callback);
        }
    },
    "getTabsFromBody":function(cmp) {
        var tabs = [], tabIds = [], tabItemConfigs = [], tabNames = [],
        
            activeTab = 0;
        var i, len;

        
        var body = cmp.getConcreteComponent().get('v.body');
        for (i = 0; i < body.length; i++) {
            if (body[i].isInstanceOf("aura:iteration")) {
                if (!$A.util.getBooleanValue(body[i].get("v.loaded"))) {
                    body[i].addHandler("iterationComplete", cmp, "{!c.onInit}");
                    return;
                }
            }
        }
        var tabCmps = this.getTabComponents(body);
        for (i = 0, len = tabCmps.length; i < len; i++) {
            var tab = tabCmps[i],
                id = tab.getGlobalId(),
                name = tab.get("v.name");

            if (tab.get('v.active')) {
                activeTab = i;
            }
            if (name) {
                tabNames[name] = {"tabId": id, "index": i};
            }
            tabIds.push(id);
            tabItemConfigs.push(this.getTabItemConfig(cmp, tab));
            tabs[id] = tab;
        }

        this.finishInit(cmp, {
            "tabs": tabs,
            "tabIds": tabIds,
            "activeIndex": activeTab,
            "tabItemConfigs": tabItemConfigs,
            "tabNames": tabNames
        });
    },
    "createTabComponent":function(cmp, tabConfig, callback) {
        var cd, config;
        if (!$A.util.isObject(tabConfig)) {
            return;
        }
        if (tabConfig.componentDef || tabConfig.descriptor) {
            cd = tabConfig.componentDef || tabConfig.descriptor;
        } else {
            cd = this.CONSTANTS.TAB_DEF;
        }
        if (!tabConfig.body) {
            tabConfig.body = [];
        }
        config = {"descriptor": cd, attributes: tabConfig};
        var tab = $A.createComponentFromConfig(config);
        callback(tab);
    },
    "getTabItemConfig":function(cmp, tab) {
        var config = {}, values = {},
            compService = $A.componentService,
            tabItemDef = this.CONSTANTS.TAB_ITEM_DEF;

        
        var attrDefs = compService.getDef(tabItemDef).getAttributeDefs();
        attrDefs.each(function (def) {
            var name = def.getDescriptor().getName();
            
            if (name !== "body") {
                values[name] = tab.getReference("v." + name);
            }
        });

        if (!tab.get("v.ariaControlId")){
            tab.set("v.ariaControlId",tab.getGlobalId());
        }

        config.localId = "tabItem";
        config.attributes = values;
        config.descriptor = tabItemDef;
        config.valueProvider = cmp;

        return config;
    },
    "getTabComponents":function(body) {
        var type = "ui:tab";
        var ret = [];
        if (!body) {
            return ret;
        }
        for (var i = 0; i < body.length; i++) {
            var c = body[i];
            var inst = this._getTabComponent(c, type);
            if (inst) {
                ret.push(inst);
            } else {
                ret = ret.concat(this.getTabComponents(this._getSuperest(c).get('v.body')));
            }
        }
        return ret;
    },
    "_getTabComponent":function(cmp, type) {
        if (cmp.isInstanceOf(type)) {
            return cmp;
        } else {
            var s = cmp.getSuper();
            if (s) {
                return this._getTabComponent(s, type);
            } else {
                return null;
            }
        }
    },
    "_getSuperest":function(cmp) {
        var s = cmp.getSuper();
        if (s) {
            var ancestor = this._getSuperest(s);
            if (ancestor) {
                return ancestor;
            }
            return s;
        } else {
            return cmp;
        }
    },
    "handleDestroy":function(cmp) {
        cmp._tabCollection.destroy();
        cmp._tabCollection = [];
    },
    "createTabCollection":function() {
        var TabCollection = function () {
            this.tabComponents = [];
            this.tabIds = [];
            this.tabNames = [];
        };
        TabCollection.prototype = {
            init: function (tabs, tabIds, tabNames) {
                this.tabComponents = tabs;
                this.tabIds = tabIds;
                this.tabNames = tabNames;
            },
            getTabIndex: function (option) {
                var index = -1;
                if (option.name) {
                    var name = this.tabNames[option.name];
                    if (name) {
                        index = this.tabIds.indexOf(name.tabId);
                    }
                } else if ($A.util.isComponent(option.tab)) {
                    var gId = option.tab.getGlobalId();
                    index = this.tabIds.indexOf(gId);
                }
                return index;
            },
            getTab: function (index) {
                var tab = null;
                if (index >= 0 && index < this.getSize()) {
                    tab = this.tabComponents[this.tabIds[index]];
                }
                return tab;
            },
            removeTab: function (index) {
                if ($A.util.isNumber(index) && index >= 0 && index < this.tabIds.length) {
                    var id = this.tabIds.splice(index, 1);
                    this.tabComponents[id[0]].destroy();
                    delete this.tabComponents[id[0]];
                }
            },
            insertTab: function (index, tab) {
                if ($A.util.isComponent(tab)) {
                    var id = tab.getGlobalId(),
                        name = tab.get("v.name");

                    if (name) {
                        this.tabNames[name] = {"tabId": id};
                    }
                    this.tabIds.splice(index, 0, id);
                    this.tabComponents[id] = tab;
                }
            },
            getSize: function () {
                return this.tabIds.length;
            },
            destroy: function () {
                var tabs = this.tabComponents;
                for (var id in tabs) {
                    if (tabs.hasOwnProperty(id)) {
                        tabs[id].destroy();
                    }
                }
                this.tabIds = null;
                this.tabComponents = null;
            }
        };
        return new TabCollection();
    },
    "CONSTANTS":{
      "TAB_DEF":"markup://ui:tab",
      "TAB_ITEM_DEF":"markup://ui:tabItem"
    }
  },
  "renderer":{
    "afterRender":function(cmp, helper) {
        cmp.superAfterRender();
        helper.setActive(cmp, {"index": cmp._activeTabIndex});
    }
  }
};
});
return {
  "xs":"PP",
  "descriptor":"markup://ui:tabset",
  "st":{
    "descriptor":"css://ui.tabset",
    "cl":"uiTabset"
  },
  "fst":{
    "descriptor":"css://ui.tabset"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["class","aura://String","PP",false],
    ["dir","aura://String","I",false,"ltr"],
    ["namespaceOverride","aura://String","I",false],
    ["actionable","aura://Boolean","I",false,true],
    ["role","aura://String","I",false],
    ["ariaDescribedBy","aura://String","PP",false,""],
    ["value","aura://Object","PP",false,null],
    ["visible","aura://Boolean","I",false,true],
    ["tabs","aura://List","I",false,[]],
    ["tabItems","aura://List","p",false,[]],
    ["name","aura://String","I",false],
    ["lazyRenderTabs","aura://Boolean","I",false,false],
    ["ariaLabel","aura://String","I",false],
    ["useOverflowMenu","aura://Boolean","I",false,false],
    ["overflowLabel","aura://String","I",false,"More"]
  ],
  "i":[
    "markup://ui:visible"
  ],
  "re":[
    {
      "ed":"markup://ui:dblclick",
      "n":"dblclick",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseover",
      "n":"mouseover",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseout",
      "n":"mouseout",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mouseup",
      "n":"mouseup",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousemove",
      "n":"mousemove",
      "xs":"G"
    },
    {
      "ed":"markup://ui:click",
      "n":"click",
      "xs":"G"
    },
    {
      "ed":"markup://ui:mousedown",
      "n":"mousedown",
      "xs":"G"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"addTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"activateTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"clearTabs",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"getActiveTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"beforeActivate",
      "xs":"PP"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onActivate",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"onRemove",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"updateTab",
      "xs":"I"
    },
    {
      "ed":"markup://ui:tabsetEvent",
      "n":"removeTab",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleDestroy"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"destroy"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.addTab"
      },
      "n":"addTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.removeTab"
      },
      "n":"removeTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.updateTab"
      },
      "n":"updateTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.activateTab"
      },
      "n":"activateTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.getActiveTab"
      },
      "n":"getActiveTab"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.clearTabs"
      },
      "n":"clearTabs"
    }
  ],
  "ld":{
    "tabBar":{
      "description":"UI Tab bar",
      "context":{
        "tab-name":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:tabset",
          "path":"v.name"
        }
      },
      "alias":"tab-bar"
    },
    "tabItem":{
      "description":"Tab Set component",
      "context":{
        "tab-name":{
          "exprType":"PROPERTY",
          "byValue":false,
          "target":"ui:tabset",
          "path":"v.name"
        }
      },
      "alias":"tab-set"
    }
  },
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"tabContainer",
          "flavorable":true,
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:tabset",
                    "path":"v.class"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:tabBar"
                    },
                    "localId":"tabBar",
                    "attributes":{
                      "values":{
                        "overflowLabel":{
                          "descriptor":"overflowLabel",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.overflowLabel"
                          }
                        },
                        "name":{
                          "descriptor":"name",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.name"
                          }
                        },
                        "tabs":{
                          "descriptor":"tabs",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.tabItems"
                          }
                        },
                        "ariaLabel":{
                          "descriptor":"ariaLabel",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.ariaLabel"
                          }
                        },
                        "onTabActivated":{
                          "descriptor":"onTabActivated",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"c.onTabActivated"
                          }
                        },
                        "useOverflowMenu":{
                          "descriptor":"useOverflowMenu",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.useOverflowMenu"
                          }
                        },
                        "onTabClosed":{
                          "descriptor":"onTabClosed",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"c.onTabClosed"
                          }
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tabset",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "df":"default",
  "fc":true,
  "css":true
}*/},'markup://ui:tree':function(){/*$A.componentService.addComponentClass("markup://ui:tree",function() {
return {
  "meta":{
    "name":"ui$tree",
    "extends":"markup://aura:component"
  },
  "controller":{
    "getChildren":function(cmp, event) {
        var body = cmp.get("v.body") || [];

        var treeNodes = [];
        for (var n = 0; n < body.length; n++) {
        	var child = body[n];
        	
        	if (child.isInstanceOf("ui:treeNode")) {
        		treeNodes.push(child);
        	}
        }
        
        
        var modelNodes = cmp.find("modelNode");
        if ($A.util.isUndefinedOrNull(modelNodes)) {
            modelNodes = [];
        } else if (!$A.util.isArray(modelNodes)) {
            modelNodes = [modelNodes];
        }
        
        
        event.getParam("callback")(modelNodes.concat(treeNodes));
    },
    "onActiveNodeChange":function(cmp) {
        var activeNode = cmp.get("v.activeNode");
        $A.assert(activeNode.isInstanceOf("ui:treeNode"));
        
        
        if (cmp._activeNode) {
            cmp._activeNode.set("v.active", false);
        }
        
        cmp._activeNode = activeNode;
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://ui:tree",
  "st":{
    "descriptor":"css://ui.tree",
    "cl":"uiTree"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["nodes","java://List<aura.components.ui.TreeNode>","I",false,null],
    ["class","aura://String","I",false,""],
    ["activeNode","aura://Aura.Component","I",false,null]
  ],
  "re":[
    {
      "ed":"markup://ui:getChildren",
      "n":"getChildren",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.onActiveNodeChange"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"v.activeNode"
      },
      "n":"change"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.getChildren"
      },
      "n":"getChildren"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":{
                    "exprType":"PROPERTY",
                    "byValue":false,
                    "target":"ui:tree",
                    "path":"v.class"
                  }
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"ol"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:iteration"
                    },
                    "attributes":{
                      "values":{
                        "var":{
                          "descriptor":"var",
                          "value":"node"
                        },
                        "items":{
                          "descriptor":"items",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tree",
                            "path":"v.nodes"
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://ui:treeNode"
                              },
                              "localId":"modelNode",
                              "attributes":{
                                "values":{
                                  "hidden":{
                                    "descriptor":"hidden",
                                    "value":false
                                  },
                                  "item":{
                                    "descriptor":"item",
                                    "value":{
                                      "exprType":"PROPERTY",
                                      "byValue":false,
                                      "target":"ui:tree",
                                      "path":"node"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:expression"
                    },
                    "attributes":{
                      "values":{
                        "value":{
                          "descriptor":"value",
                          "value":{
                            "exprType":"PROPERTY",
                            "byValue":false,
                            "target":"ui:tree",
                            "path":"v.body"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://aura:application':function(){/*$A.componentService.addComponentClass("markup://aura:application",function() {
return {
  "meta":{
    "name":"aura$application"
  },
  "renderer":{
    "render":function(component) {
        var rendering = component.getRendering();
        return rendering||$A.renderingService.renderFacet(component,component.get("v.body"));
    },
    "afterRender":function(component) {
        var body = component.get("v.body");
        $A.afterRender(body);
    },
    "rerender":function(component) {
        var body = component.get("v.body");
        return $A.renderingService.rerenderFacet(component,body);
    },
    "unrender":function(component) {
        var body = component.get("v.body");
        $A.renderingService.unrenderFacet(component,body);
    }
  }
};
});
return {
  "descriptor":"markup://aura:application",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]]
  ],
  "i":[
    "markup://aura:rootComponent"
  ],
  "ab":true,
  "lc":{
    "descriptor":"markup://aura:locationChange"
  },
  "css":true
}*/},'markup://auradocs:nav':function(){/*$A.componentService.addComponentClass("markup://auradocs:nav",function() {
return {
  "meta":{
    "name":"auradocs$nav",
    "extends":"markup://aura:component"
  },
  "controller":{
    "handleLocationChange":function(cmp, event) {
        if ($A.util.isUndefinedOrNull(cmp._activeCmp)) {
            
            
            
            cmp._activeCmp = cmp.find('help');
        }
        
        
        if (cmp._activeCmp && cmp._activeCmp.getElement()) {
            cmp._activeCmp.getElement().setAttribute('active', false);
        }
        
        
        var token = event.getParam('token');
        var newLocationComp = cmp.find(token);
        if ($A.util.isUndefinedOrNull(newLocationComp)) {
            newLocationComp = cmp.find('help');
        }
        
        
        
        cmp._activeCmp = newLocationComp;
        if (cmp._activeCmp && cmp._activeCmp.getElement()) {
            cmp._activeCmp.getElement().setAttribute('active', true);
        }
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:nav",
  "st":{
    "descriptor":"css://auradocs.nav",
    "cl":"auradocsNav"
  },
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["referenceOnly","aura://Boolean","I",false,false]
  ],
  "hd":[
    {
      "ed":{
        "descriptor":"markup://auradocs:locationChange"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.handleLocationChange"
      }
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":"navbar",
                  "role":"navigation"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"nav"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"logo"
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"div"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "href":"#"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"a"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://ui:image"
                                        },
                                        "attributes":{
                                          "values":{
                                            "alt":{
                                              "descriptor":"alt",
                                              "value":"Aura"
                                            },
                                            "src":{
                                              "descriptor":"src",
                                              "value":"/auraFW/resources/aura/images/logo.png"
                                            },
                                            "imageType":{
                                              "descriptor":"imageType",
                                              "value":"informational"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:if"
                    },
                    "attributes":{
                      "values":{
                        "isTrue":{
                          "descriptor":"isTrue",
                          "value":{
                            "exprType":"FUNCTION",
                            "code":"function(cmp,fn){return fn.ne(cmp.get(\"v.referenceOnly\"),true);}",
                            "args":[
                              {
                                "exprType":"PROPERTY",
                                "byValue":false,
                                "target":"auradocs:nav",
                                "path":"v.referenceOnly"
                              }
                            ],
                            "byValue":false
                          }
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":"navList"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"ul"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "localId":"help",
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{

                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"li"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://auradocs:navLink"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "location":{
                                                        "descriptor":"location",
                                                        "value":"help"
                                                      },
                                                      "body":{
                                                        "descriptor":"body",
                                                        "value":[
                                                          {
                                                            "componentDef":{
                                                              "descriptor":"markup://aura:text"
                                                            },
                                                            "attributes":{
                                                              "values":{
                                                                "value":{
                                                                  "descriptor":"value",
                                                                  "value":"Help"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "localId":"reference",
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{

                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"li"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://auradocs:navLink"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "location":{
                                                        "descriptor":"location",
                                                        "value":"reference"
                                                      },
                                                      "body":{
                                                        "descriptor":"body",
                                                        "value":[
                                                          {
                                                            "componentDef":{
                                                              "descriptor":"markup://aura:text"
                                                            },
                                                            "attributes":{
                                                              "values":{
                                                                "value":{
                                                                  "descriptor":"value",
                                                                  "value":"Reference"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{
                                      "class":"fuelGauge"
                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"div"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://auraStorage:fuelGauge"
                                        },
                                        "attributes":{
                                          "values":{
                                            "storageName":{
                                              "descriptor":"storageName",
                                              "value":"actions"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:image"
                    },
                    "attributes":{
                      "values":{
                        "class":{
                          "descriptor":"class",
                          "value":"spinner"
                        },
                        "imageType":{
                          "descriptor":"imageType",
                          "value":"decorative"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "css":true
}*/},'markup://auradocs:referenceTree':function(){/*$A.componentService.addComponentClass("markup://auradocs:referenceTree",function() {
return {
  "meta":{
    "name":"auradocs$referenceTree",
    "extends":"markup://auradocs:sidebar"
  },
  "controller":{
    "doInit":function(cmp) {
        var tree = cmp.find('tree');
        cmp.find('topicTree').set('v.tree', tree);
        cmp.find('searchTree').set('v.tree', tree);
    }
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auradocs:referenceTree",
  "st":{
    "descriptor":"css://auradocs.referenceTree",
    "cl":"auradocsReferenceTree"
  },
  "md":{
    "descriptor":"java://org.auraframework.docs.ReferenceTreeModel",
    "members":[
      {
        "name":"tree",
        "type":"java://java.util.List"
      }
    ]
  },
  "su":"markup://auradocs:sidebar",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["toolbar","aura://Aura.Component[]","I",false,[]]
  ],
  "hd":[
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.doInit"
      },
      "v":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"this"
      },
      "n":"init"
    }
  ],
  "fa":[
    {
      "descriptor":"toolbar",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://ui:tabset"
          },
          "attributes":{
            "values":{
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:tab"
                    },
                    "attributes":{
                      "values":{
                        "title":{
                          "descriptor":"title",
                          "value":"Namespace"
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://ui:tab"
                    },
                    "attributes":{
                      "values":{
                        "title":{
                          "descriptor":"title",
                          "value":"Category"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{

                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"ul"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{

                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"li"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:text"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":"\n\t\t\t\tShow only:\n\t\t\t\t"
                                  }
                                }
                              }
                            },
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:html"
                              },
                              "attributes":{
                                "values":{
                                  "HTMLAttributes":{
                                    "descriptor":"HTMLAttributes",
                                    "value":{

                                    }
                                  },
                                  "tag":{
                                    "descriptor":"tag",
                                    "value":"select"
                                  },
                                  "body":{
                                    "descriptor":"body",
                                    "value":[
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{

                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"option"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:text"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":"PROTO"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{

                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"option"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:text"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":"BETA"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "componentDef":{
                                          "descriptor":"markup://aura:html"
                                        },
                                        "attributes":{
                                          "values":{
                                            "HTMLAttributes":{
                                              "descriptor":"HTMLAttributes",
                                              "value":{

                                              }
                                            },
                                            "tag":{
                                              "descriptor":"tag",
                                              "value":"option"
                                            },
                                            "body":{
                                              "descriptor":"body",
                                              "value":[
                                                {
                                                  "componentDef":{
                                                    "descriptor":"markup://aura:text"
                                                  },
                                                  "attributes":{
                                                    "values":{
                                                      "value":{
                                                        "descriptor":"value",
                                                        "value":"GA"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":"search",
                  "type":"search",
                  "placeholder":"Search for..."
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"input"
              }
            }
          }
        }
      ]
    },
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://auradocs:openTopicTree"
          },
          "localId":"topicTree",
          "attributes":{
            "values":{
              "layoutToken":{
                "descriptor":"layoutToken",
                "value":"reference"
              },
              "catchAllHref":{
                "descriptor":"catchAllHref",
                "value":"#reference"
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://auradocs:searchFilterTree"
          },
          "localId":"searchTree"
        },
        {
          "componentDef":{
            "descriptor":"markup://ui:tree"
          },
          "localId":"tree",
          "attributes":{
            "values":{
              "nodes":{
                "descriptor":"nodes",
                "value":{
                  "exprType":"PROPERTY",
                  "byValue":false,
                  "target":"auradocs:referenceTree",
                  "path":"m.tree"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "hs":true,
  "css":true
}*/},'markup://auraStorage:crypto':function(){/*$A.componentService.addComponentClass("markup://auraStorage:crypto",function() {
return {
  "meta":{
    "name":"auraStorage$crypto",
    "extends":"markup://aura:component"
  }
};
});
return {
  "xs":"I",
  "descriptor":"markup://auraStorage:crypto",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["debugLoggingEnabled","aura://Boolean","I",false,false]
  ],
  "hs":true,
  "css":true
}*/},'markup://auradocs:docs':function(){/*$A.componentService.addComponentClass("markup://auradocs:docs",function() {
return {
  "meta":{
    "name":"auradocs$docs",
    "extends":"markup://aura:application"
  },
  "controller":{
    "updateAuraAssist":function(cmp) {
        var a = cmp.get("c.updateAuraAssistServer");

        a.setCallback(cmp, function(action){
        	var state = action.getState();
            if (state === "SUCCESS") {
            	

               alert('Done! Content written to:'+ action.getReturnValue());
            } else if(state === "INCOMPLETE" || state === "ERROR") {
            	

               alert('Ooops! Something went wrong check your console.');
            }
        });

        $A.enqueueAction(a);
    },
    "waiting":function(cmp, event, helper) {
        helper.showWaiting(cmp);
    },
    "doneWaiting":function(cmp, event, helper) {
        helper.hideWaiting(cmp);
    },
    "refreshBegin":function(cmp, event, helper) {
        helper.showRefreshing(cmp);
    },
    "refreshEnd":function(cmp, event, helper) {
        helper.hideRefreshing(cmp);
    },
    "locationChange":function(cmp, event, helper) {
        var token = event.getParam("token");
        var layout = token === "reference" ? "reference" : "help";

        helper.setLayout(cmp, layout, event.getParams());
    }
  },
  "helper":{
    "showWaiting":function(cmp) {
        var count = cmp.get("v.waitingCount") + 1;
        cmp.set("v.waitingCount", count);
        if (count === 1) { 
            $A.util.addClass(cmp.find('navbar').getElement(), "waiting");
        }
    },
    "hideWaiting":function(cmp) {
        var count = cmp.get("v.waitingCount") - 1;
        cmp.set("v.waitingCount", count);
        if (cmp.get("v.waitingCount") === 0) { 
            $A.util.removeClass(cmp.find('navbar').getElement(), "waiting");
        }
    },
    "showRefreshing":function(cmp) {
        $A.util.addClass(cmp.find('navbar').getElement(), "refreshing");
    },
    "hideRefreshing":function(cmp) {
        $A.util.removeClass(cmp.find('navbar').getElement(), "refreshing");
    },
    "setLayout":function(cmp, layout, parameters) {
        var action = layout == "reference" ? cmp.get("c.getReference") : cmp.get("c.getTopic");
        action.setStorable();
        action.setParams(parameters);

        action.setCallback(this, function(action) {
            var state = action.getState();
            if (state === "SUCCESS") {
                var ret = action.getReturnValue();
                if(ret) {
                    var content = cmp.find("content");
                    var newComponents = $A.createComponentFromConfig(ret);

                    content.set("v.body", newComponents);

                    if(layout === "reference") {
                        var sidebar = cmp.find("sidebar");
                        if(sidebar.get("v.body").length === 0) {
                            $A.createComponent("markup://auradocs:referenceTree", {}, function(referenceTree, status, messages) {
                            	if (status === "SUCCESS") {
                            		sidebar.set("v.body", referenceTree);
                            	}
                            });
                        }
                    }
                    

                }
            } else if(state === "INCOMPLETE" || state === "ERROR") {

                
                
                throw new Error("Layout Failed for the docs app.");
            }
        });

        $A.enqueueAction(action);
    }
  }
};
});
return {
  "xs":"G",
  "descriptor":"markup://auradocs:docs",
  "st":{
    "descriptor":"css://auradocs.docs",
    "cl":"auradocsDocs"
  },
  "cd":{
    "descriptor":"compound://auradocs.docs",
    "ac":[
      {
        "n":"getDemo",
        "descriptor":"java://org.auraframework.docs.DocsController/ACTION$getDemo",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "ag":"docs",
        "pa":[
          {
            "name":"demo",
            "type":"java://java.lang.String"
          }
        ]
      },
      {
        "n":"getReference",
        "descriptor":"java://org.auraframework.docs.DocsController/ACTION$getReference",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "ag":"docs",
        "pa":[
          {
            "name":"topic",
            "type":"java://java.lang.String"
          },
          {
            "name":"descriptor",
            "type":"java://java.lang.String"
          },
          {
            "name":"defType",
            "type":"java://java.lang.String"
          }
        ]
      },
      {
        "n":"getTopic",
        "descriptor":"java://org.auraframework.docs.DocsController/ACTION$getTopic",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "ag":"docs",
        "pa":[
          {
            "name":"topic",
            "type":"java://java.lang.String"
          }
        ]
      }
    ]
  },
  "su":"markup://aura:application",
  "ad":[
    ["body","aura://Aura.Component[]","G",false,[]],
    ["waitingCount","aura://Integer","p",false,0]
  ],
  "i":[
    "markup://auraStorage:refreshObserver"
  ],
  "re":[
    {
      "ed":"markup://auraStorage:refreshStatusChange",
      "n":"refreshEnd",
      "xs":"I"
    },
    {
      "ed":"markup://auraStorage:refreshStatusChange",
      "n":"refreshBegin",
      "xs":"I"
    }
  ],
  "hd":[
    {
      "ed":{
        "descriptor":"markup://aura:waiting"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.waiting"
      }
    },
    {
      "ed":{
        "descriptor":"markup://aura:doneWaiting"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.doneWaiting"
      }
    },
    {
      "ed":{
        "descriptor":"markup://auradocs:locationChange"
      },
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.locationChange"
      }
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.refreshBegin"
      },
      "n":"refreshBegin"
    },
    {
      "x":{
        "exprType":"PROPERTY",
        "byValue":false,
        "path":"c.refreshEnd"
      },
      "n":"refreshEnd"
    }
  ],
  "fa":[
    {
      "descriptor":"body",
      "value":[
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{

                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"header"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://auradocs:nav"
                    },
                    "localId":"navbar"
                  }
                ]
              }
            }
          }
        },
        {
          "componentDef":{
            "descriptor":"markup://aura:html"
          },
          "localId":"container",
          "attributes":{
            "values":{
              "HTMLAttributes":{
                "descriptor":"HTMLAttributes",
                "value":{
                  "class":"container"
                }
              },
              "tag":{
                "descriptor":"tag",
                "value":"div"
              },
              "body":{
                "descriptor":"body",
                "value":[
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"sidebar",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"sidebar"
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"aside"
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "localId":"content",
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{
                            "class":"content"
                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"article"
                        }
                      }
                    }
                  },
                  {
                    "componentDef":{
                      "descriptor":"markup://aura:html"
                    },
                    "attributes":{
                      "values":{
                        "HTMLAttributes":{
                          "descriptor":"HTMLAttributes",
                          "value":{

                          }
                        },
                        "tag":{
                          "descriptor":"tag",
                          "value":"footer"
                        },
                        "body":{
                          "descriptor":"body",
                          "value":[
                            {
                              "componentDef":{
                                "descriptor":"markup://aura:text"
                              },
                              "attributes":{
                                "values":{
                                  "value":{
                                    "descriptor":"value",
                                    "value":"Copyright © 2015 salesforce.com, inc."
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "lc":{
    "descriptor":"markup://auradocs:locationChange"
  },
  "css":true
}*/}});
,$A.componentService.initEventDefs([
  {
    "descriptor":"markup://aura:applicationEvent",
    "t":"APPLICATION",
    "xs":"G"
  },
  {
    "descriptor":"markup://aura:componentEvent",
    "t":"COMPONENT",
    "xs":"G"
  },
  {
    "descriptor":"markup://aura:valueEvent",
    "t":"VALUE",
    "xs":"G"
  },
  {
    "descriptor":"markup://aura:applicationRefreshed",
    "t":"APPLICATION",
    "xs":"I"
  },
  {
    "descriptor":"markup://aura:clientOutOfSync",
    "t":"APPLICATION",
    "xs":"I"
  },
  {
    "descriptor":"markup://aura:clientRedirect",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "url":["url","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://aura:connectionLost",
    "t":"APPLICATION",
    "xs":"I"
  },
  {
    "descriptor":"markup://aura:connectionResumed",
    "t":"APPLICATION",
    "xs":"I"
  },
  {
    "descriptor":"markup://aura:customerError",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "message":["message","aura://String","I",false],
      "error":["error","aura://String","I",false],
      "auraError":["auraError","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://aura:debugLog",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "type":["type","aura://String","I",false],
      "message":["message","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://aura:doneRendering",
    "t":"APPLICATION",
    "xs":"G"
  },
  {
    "descriptor":"markup://aura:doneWaiting",
    "t":"APPLICATION",
    "xs":"G"
  },
  {
    "descriptor":"markup://aura:initialized",
    "t":"APPLICATION",
    "xs":"I"
  },
  {
    "descriptor":"markup://aura:invalidSession",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "newToken":["newToken","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://aura:locationChange",
    "t":"APPLICATION",
    "xs":"G",
    "a":{
      "token":["token","aura://String","G",false],
      "querystring":["querystring","aura://String","G",false]
    }
  },
  {
    "descriptor":"markup://aura:methodCall",
    "t":"COMPONENT",
    "xs":"G",
    "a":{
      "name":["name","aura://String","G",false],
      "arguments":["arguments","aura://List","G",false,[]]
    }
  },
  {
    "descriptor":"markup://aura:noAccess",
    "t":"APPLICATION",
    "xs":"G",
    "a":{
      "redirectURL":["redirectURL","aura://String","G",false]
    }
  },
  {
    "descriptor":"markup://aura:operationComplete",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "operation":["operation","aura://String","I",false],
      "result":["result","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://aura:systemError",
    "t":"APPLICATION",
    "xs":"G",
    "a":{
      "message":["message","aura://String","G",false],
      "error":["error","aura://String","G",false],
      "auraError":["auraError","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://aura:valueChange",
    "t":"VALUE",
    "xs":"G",
    "su":"markup://aura:valueEvent",
    "a":{
      "expression":["expression","aura://String","G",false],
      "oldValue":["oldValue","aura://Object","G",false,null],
      "value":["value","aura://Object","G",false,null],
      "index":["index","aura://String","G",false]
    }
  },
  {
    "descriptor":"markup://aura:valueDestroy",
    "t":"VALUE",
    "xs":"G",
    "su":"markup://aura:valueEvent",
    "a":{
      "value":["value","aura://Object","G",false,null]
    }
  },
  {
    "descriptor":"markup://aura:valueInit",
    "t":"VALUE",
    "xs":"G",
    "su":"markup://aura:valueEvent",
    "a":{
      "value":["value","aura://Object","G",false,null]
    }
  },
  {
    "descriptor":"markup://aura:valueRender",
    "t":"VALUE",
    "xs":"G",
    "su":"markup://aura:valueEvent",
    "a":{
      "value":["value","aura://Object","G",false,null]
    }
  },
  {
    "descriptor":"markup://aura:waiting",
    "t":"APPLICATION",
    "xs":"G"
  },
  {
    "descriptor":"markup://ui:baseDOMEvent",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:baseMouseEvent",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:baseKeyboardEvent",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "ctrlKey":["ctrlKey","aura://Boolean","I",false],
      "domEvent":["domEvent","aura://Object","I",false,null],
      "shiftKey":["shiftKey","aura://Boolean","I",false],
      "keyCode":["keyCode","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:click",
    "t":"COMPONENT",
    "xs":"PP",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:dblclick",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:mousedown",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:mousemove",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:mouseout",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:mouseover",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:mouseup",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:blur",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:command",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "parameters":["parameters","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:focus",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:keydown",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseKeyboardEvent",
    "a":{
      "ctrlKey":["ctrlKey","aura://Boolean","I",false],
      "domEvent":["domEvent","aura://Object","I",false,null],
      "shiftKey":["shiftKey","aura://Boolean","I",false],
      "keyCode":["keyCode","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:keypress",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseKeyboardEvent",
    "a":{
      "ctrlKey":["ctrlKey","aura://Boolean","I",false],
      "domEvent":["domEvent","aura://Object","I",false,null],
      "shiftKey":["shiftKey","aura://Boolean","I",false],
      "keyCode":["keyCode","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:keyup",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseKeyboardEvent",
    "a":{
      "ctrlKey":["ctrlKey","aura://Boolean","I",false],
      "domEvent":["domEvent","aura://Object","I",false,null],
      "shiftKey":["shiftKey","aura://Boolean","I",false],
      "keyCode":["keyCode","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:select",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:collapse",
    "t":"COMPONENT",
    "xs":"G"
  },
  {
    "descriptor":"markup://ui:expand",
    "t":"COMPONENT",
    "xs":"G"
  },
  {
    "descriptor":"markup://ui:menuSelect",
    "t":"COMPONENT",
    "xs":"G",
    "a":{
      "selectedItem":["selectedItem","aura://Aura.Component[]","G",false,[]],
      "hideMenu":["hideMenu","aura://Boolean","G",false],
      "deselectSiblings":["deselectSiblings","aura://Boolean","G",false],
      "focusTrigger":["focusTrigger","aura://Boolean","G",false]
    }
  },
  {
    "descriptor":"markup://ui:popupKeyboardEvent",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "event":["event","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:popupTargetHide",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "event":["event","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:popupTargetShow",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "event":["event","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:popupTargetToggle",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "component":["component","aura://Aura.Component[]","I",false,[]],
      "show":["show","aura://Boolean","I",false]
    }
  },
  {
    "descriptor":"markup://ui:popupTriggerPress",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:refresh",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:command",
    "a":{
      "parameters":["parameters","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:menuFocusChange",
    "t":"COMPONENT",
    "xs":"G",
    "a":{
      "previousItem":["previousItem","aura://Aura.Component[]","G",false,[]],
      "currentItem":["currentItem","aura://Aura.Component[]","G",false,[]]
    }
  },
  {
    "descriptor":"markup://ui:menuTriggerPress",
    "t":"COMPONENT",
    "xs":"G",
    "a":{
      "focusItemIndex":["focusItemIndex","aura://Integer","I",false,0]
    }
  },
  {
    "descriptor":"markup://ui:change",
    "t":"COMPONENT",
    "xs":"PP"
  },
  {
    "descriptor":"markup://ui:clearErrors",
    "t":"COMPONENT",
    "xs":"G"
  },
  {
    "descriptor":"markup://ui:copy",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:cut",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:inputEvent",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:makeVisitor",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "visitor":["visitor","aura://String","I",false],
      "traverser":["traverser","aura://String","I",true],
      "callback":["callback","aura://Object","I",true,null]
    }
  },
  {
    "descriptor":"markup://ui:onTabHover",
    "t":"COMPONENT",
    "xs":"PP",
    "su":"markup://ui:baseMouseEvent",
    "a":{
      "tabComponent":["tabComponent","aura://Aura.Component","PP",false,null],
      "domEvent":["domEvent","aura://Object","I",false,null],
      "button":["button","aura://Integer","I",false]
    }
  },
  {
    "descriptor":"markup://ui:paste",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:press",
    "t":"COMPONENT",
    "xs":"I",
    "su":"markup://ui:baseDOMEvent",
    "a":{
      "domEvent":["domEvent","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:tabsetEvent",
    "t":"COMPONENT",
    "xs":"PP",
    "a":{
      "index":["index","aura://Integer","PP",false],
      "name":["name","aura://String","PP",false],
      "focus":["focus","aura://Boolean","PP",false],
      "tab":["tab","aura://Object","PP",false,null],
      "oldTab":["oldTab","aura://Object","PP",false,null],
      "active":["active","aura://Boolean","PP",false],
      "callback":["callback","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://ui:traverseEvent",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "visitor":["visitor","aura://Object","I",true,null],
      "traverser":["traverser","aura://Object","I",true,null]
    }
  },
  {
    "descriptor":"markup://ui:updateError",
    "t":"COMPONENT",
    "xs":"I"
  },
  {
    "descriptor":"markup://ui:updateSize",
    "t":"APPLICATION",
    "xs":"PP"
  },
  {
    "descriptor":"markup://ui:validationError",
    "t":"COMPONENT",
    "xs":"G",
    "a":{
      "errors":["errors","aura://Object[]","I",false,[]]
    }
  },
  {
    "descriptor":"markup://ui:getChildren",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "callback":["callback","aura://Object","I",true,null]
    }
  },
  {
    "descriptor":"markup://ui:searchEvent",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "type":["type","aura://String","I",false],
      "context":["context","aura://Object","I",false,null],
      "searchTerm":["searchTerm","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://auradocs:locationChange",
    "t":"APPLICATION",
    "xs":"I",
    "su":"markup://aura:locationChange",
    "a":{
      "demo":["demo","aura://String","I",false],
      "querystring":["querystring","aura://String","G",false],
      "topic":["topic","aura://String","I",false],
      "defType":["defType","aura://String","I",false],
      "descriptor":["descriptor","aura://String","I",false],
      "token":["token","aura://String","G",false],
      "searchTerm":["searchTerm","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://auraStorage:modified",
    "t":"APPLICATION",
    "xs":"I",
    "a":{
      "name":["name","aura://String","I",false]
    }
  },
  {
    "descriptor":"markup://ui:response",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "value":["value","aura://Object","I",false,null]
    }
  },
  {
    "descriptor":"markup://auraStorage:refreshStatusChange",
    "t":"COMPONENT",
    "xs":"I",
    "a":{
      "action":["action","aura://Aura.Action","I",false,null],
      "responseUpdated":["responseUpdated","aura://Boolean","I",false]
    }
  }
]);
$A.componentService.initLibraryDefs([
  {
    "descriptor":"markup://ui:panelPositioningLib",
    "includes":{
      "positioningUtils":"js://ui.panelPositioningLib.positioningUtils",
      "elementProxy":"js://ui.panelPositioningLib.elementProxy",
      "elementProxyFactory":"js://ui.panelPositioningLib.elementProxyFactory",
      "constraint":"js://ui.panelPositioningLib.constraint",
      "panelPositioning":"js://ui.panelPositioningLib.panelPositioning"
    }
  },
  {
    "descriptor":"markup://ui:eventLib",
    "includes":{
      "interactive":"js://ui.eventLib.interactive"
    }
  }
]);
$A.componentService.initControllerDefs([
  {
    "descriptor":"aura://ComponentController",
    "ac":[
      {
        "n":"getApplication",
        "descriptor":"aura://ComponentController/ACTION$getApplication",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Application",
        "ag":"aura",
        "pa":[
          {
            "name":"name",
            "type":"java://java.lang.String",
            "loggable":true
          },
          {
            "name":"attributes",
            "type":"java://java.util.Map<java.lang.String,java.lang.Object>"
          },
          {
            "name":"chainLoadLabels",
            "type":"java://java.lang.Boolean",
            "loggable":true
          }
        ]
      },
      {
        "n":"getApplicationDef",
        "descriptor":"aura://ComponentController/ACTION$getApplicationDef",
        "at":"SERVER",
        "rt":"java://org.auraframework.def.ApplicationDef",
        "ag":"aura",
        "pa":[
          {
            "name":"name",
            "type":"java://java.lang.String",
            "loggable":true
          }
        ]
      },
      {
        "n":"getComponent",
        "descriptor":"aura://ComponentController/ACTION$getComponent",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Instance",
        "ag":"aura",
        "pa":[
          {
            "name":"name",
            "type":"java://java.lang.String",
            "loggable":true
          },
          {
            "name":"attributes",
            "type":"java://java.util.Map<java.lang.String,java.lang.Object>"
          },
          {
            "name":"chainLoadLabels",
            "type":"java://java.lang.Boolean",
            "loggable":true
          }
        ]
      },
      {
        "n":"getComponentDef",
        "descriptor":"aura://ComponentController/ACTION$getComponentDef",
        "at":"SERVER",
        "rt":"java://org.auraframework.def.ComponentDef",
        "ag":"aura",
        "pa":[
          {
            "name":"name",
            "type":"java://java.lang.String",
            "loggable":true
          }
        ]
      },
      {
        "n":"getComponents",
        "descriptor":"aura://ComponentController/ACTION$getComponents",
        "at":"SERVER",
        "rt":"java://java.util.List",
        "ag":"aura",
        "pa":[
          {
            "name":"components",
            "type":"java://java.util.List<java.util.Map<java.lang.String,java.lang.Object>>"
          }
        ]
      },
      {
        "n":"getDefinitions",
        "descriptor":"aura://ComponentController/ACTION$getDefinitions",
        "at":"SERVER",
        "rt":"java://java.util.List",
        "ag":"aura",
        "pa":[
          {
            "name":"names",
            "type":"java://java.util.List<java.lang.String>",
            "loggable":true
          }
        ]
      },
      {
        "n":"getEventDef",
        "descriptor":"aura://ComponentController/ACTION$getEventDef",
        "at":"SERVER",
        "rt":"java://org.auraframework.def.EventDef",
        "ag":"aura",
        "pa":[
          {
            "name":"name",
            "type":"java://java.lang.String",
            "loggable":true
          }
        ]
      },
      {
        "n":"loadLabels",
        "descriptor":"aura://ComponentController/ACTION$loadLabels",
        "at":"SERVER",
        "rt":"java://java.lang.Boolean",
        "ag":"aura",
        "pa":[

        ]
      },
      {
        "n":"reportDeprecationUsages",
        "descriptor":"aura://ComponentController/ACTION$reportDeprecationUsages",
        "at":"SERVER",
        "rt":"java://void",
        "ca":true,
        "ag":"aura",
        "pa":[
          {
            "name":"usages",
            "type":"java://java.util.Map<java.lang.String,java.util.List<java.lang.String>>"
          }
        ]
      },
      {
        "n":"reportFailedAction",
        "descriptor":"aura://ComponentController/ACTION$reportFailedAction",
        "at":"SERVER",
        "rt":"java://void",
        "ag":"aura",
        "pa":[
          {
            "name":"failedAction",
            "type":"java://java.lang.String"
          },
          {
            "name":"failedId",
            "type":"java://java.lang.String"
          },
          {
            "name":"clientError",
            "type":"java://java.lang.String"
          },
          {
            "name":"clientStack",
            "type":"java://java.lang.String"
          },
          {
            "name":"componentStack",
            "type":"java://java.lang.String"
          },
          {
            "name":"stacktraceIdGen",
            "type":"java://java.lang.String"
          },
          {
            "name":"level",
            "type":"java://java.lang.String"
          }
        ]
      }
    ]
  },
  {
    "descriptor":"aura://LabelController",
    "ac":[
      {
        "n":"getLabel",
        "descriptor":"aura://LabelController/ACTION$getLabel",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "ag":"aura",
        "pa":[
          {
            "name":"section",
            "type":"java://java.lang.String"
          },
          {
            "name":"name",
            "type":"java://java.lang.String"
          }
        ]
      }
    ]
  },
  {
    "descriptor":"aura://StyleController",
    "ac":[
      {
        "n":"applyTokens",
        "descriptor":"aura://StyleController/ACTION$applyTokens",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "ag":"aura",
        "pa":[
          {
            "name":"descriptors",
            "type":"java://java.util.List<java.lang.String>"
          },
          {
            "name":"extraStyles",
            "type":"java://java.util.List<java.lang.String>"
          }
        ]
      }
    ]
  },
  {
    "descriptor":"aura://TestController",
    "ac":[
      {
        "n":"baseBallDivisions",
        "descriptor":"aura://TestController/ACTION$baseBallDivisions",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "pa":[

        ]
      },
      {
        "n":"basketBallDivisions",
        "descriptor":"aura://TestController/ACTION$basketBallDivisions",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "pa":[

        ]
      },
      {
        "n":"currentCallingDescriptor",
        "descriptor":"aura://TestController/ACTION$currentCallingDescriptor",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "pa":[

        ]
      },
      {
        "n":"doSomething",
        "descriptor":"aura://TestController/ACTION$doSomething",
        "at":"SERVER",
        "rt":"java://void",
        "pa":[

        ]
      },
      {
        "n":"getAppCacheUrls",
        "descriptor":"aura://TestController/ACTION$getAppCacheUrls",
        "at":"SERVER",
        "rt":"java://java.util.List",
        "pa":[

        ]
      },
      {
        "n":"getBootstrapPublicCacheExpiration",
        "descriptor":"aura://TestController/ACTION$getBootstrapPublicCacheExpiration",
        "at":"SERVER",
        "rt":"java://int",
        "pa":[

        ]
      },
      {
        "n":"getNamedComponent",
        "descriptor":"aura://TestController/ACTION$getNamedComponent",
        "at":"SERVER",
        "rt":"java://org.auraframework.instance.Component",
        "pa":[
          {
            "name":"componentName",
            "type":"java://java.lang.String"
          },
          {
            "name":"attributes",
            "type":"java://java.util.Map<java.lang.String,java.lang.Object>"
          }
        ]
      },
      {
        "n":"getString",
        "descriptor":"aura://TestController/ACTION$getString",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "pa":[

        ]
      },
      {
        "n":"getStringWithNonUnicode",
        "descriptor":"aura://TestController/ACTION$getStringWithNonUnicode",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "pa":[

        ]
      },
      {
        "n":"handleCustomException",
        "descriptor":"aura://TestController/ACTION$handleCustomException",
        "at":"SERVER",
        "rt":"java://void",
        "pa":[

        ]
      },
      {
        "n":"handleCustomExceptionWithData",
        "descriptor":"aura://TestController/ACTION$handleCustomExceptionWithData",
        "at":"SERVER",
        "rt":"java://void",
        "pa":[

        ]
      },
      {
        "n":"handleException",
        "descriptor":"aura://TestController/ACTION$handleException",
        "at":"SERVER",
        "rt":"java://void",
        "pa":[

        ]
      },
      {
        "n":"handleExceptionWithThrownArgument",
        "descriptor":"aura://TestController/ACTION$handleExceptionWithThrownArgument",
        "at":"SERVER",
        "rt":"java://void",
        "pa":[

        ]
      },
      {
        "n":"throwException",
        "descriptor":"aura://TestController/ACTION$throwException",
        "at":"SERVER",
        "rt":"java://java.lang.String",
        "pa":[

        ]
      }
    ]
  }
]);

Aura.appCoreJsReady=true;Aura.appJsReady=true;Aura.appDefsReady&&Aura.appDefsReady();